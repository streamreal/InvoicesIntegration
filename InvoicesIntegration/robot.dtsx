<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/25/2020 11:02:40 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ETP025"
  DTS:CreatorName="ELTRANSPLUS\andreydruzhinin"
  DTS:DelayValidation="True"
  DTS:DTSID="{D1F0A2D5-2EEB-4643-903F-08279923A161}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1049"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:SuppressConfigurationWarnings="True"
  DTS:VersionBuild="228"
  DTS:VersionGUID="{B9966AFB-C046-4227-842A-BFDF378296F9}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[10.10.0.28]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{105534D9-74E2-470E-9E3C-B4E5E8034318}"
      DTS:ObjectName="10.10.0.28">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=10.10.0.28;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[10.10.0.28.phpuser]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{DBFE5CA2-E50E-476C-9946-06AB398EF84E}"
      DTS:ObjectName="10.10.0.28.phpuser">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=10.10.0.28;User ID=phpuser;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAoIVwaEVm2E6gHAmG2U5aTgAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAABSvWM9NcGPH/uT0rjqU/jeAAAAAASAAACgAAAAEAAAAAXjDjGsQf9n9J2rzfcxjbsYAAAAKV4e8+DT2nQYY58fCX74hMdKcAfr8dMmFAAAAN+N7avniWxl6gWoSGklYndJw+mn</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP ETP]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{38CB1C84-40CD-41BC-8A75-875E136A6E39}"
      DTS:ObjectName="SMTP ETP">
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=10.10.0.50;UseWindowsAuthentication=False;EnableSsl=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Диспетчер соединений Excel]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{D82305B9-C72C-4440-8E19-88175B99B3E7}"
      DTS:ObjectName="Диспетчер соединений Excel">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" +  @[User::excelpath]  + ";Extended Properties=Excel 12.0"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\10.10.0.28\alta\Robot\Data\шаблон.xlsx;Extended Properties=&quot;Excel 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3085AA45-2BF5-4EE5-894D-EAEEF3D9A75D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="docguid">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{02CDE96A-BC37-4326-B000-0D6C37B265E3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="excelpath">
      <DTS:VariableValue
        DTS:DataType="8">\\10.10.0.28\alta\Robot\Data\шаблон.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7D398D31-C200-4D20-BFE1-64995101D6CD}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="idrequest">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C00C9808-9325-46DC-ACBC-F2B2BB877877}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="requesttable">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{45593756-9EE4-4138-B651-51B0F7F13B70}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sendermail">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{146EF0A6-9148-4930-BEA7-252544C30B7B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sqltoexcel">
      <DTS:VariableValue
        DTS:DataType="8">SELECT   [article] ,[model] ,[manufacturer] ,[trade_mark] ,[country] ,[qty] ,[unit_measurement] ,[price] ,[currency] ,[net] ,[gross] ,[packages_qty] ,[inv_num] ,[inv_date] ,[contract_num] ,[contract_date] ,[cargoid], CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_hscode] ELSE [auto_hs_code] END hs_code,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_addcode] ELSE [auto_hs_code_add] END addcode,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_des] ELSE [auto_common_des] + ' : ' + [auto_tovg_des] END descr,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_sert_num] ELSE [auto_sert_num] END sert_num,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_sert_from] ELSE [auto_sert_from] END sert_from,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_sert_to] ELSE [auto_sert_to] END sert_to,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_sgr_num] ELSE [auto_sgr_num] END sgr_num,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_sgr_from] ELSE [auto_sgr_from] END sgr_from,  CASE WHEN COALESCE([man_hscode], '') &lt;&gt; '' THEN [man_sgr_to] ELSE [auto_sgr_to] END sgr_to   FROM [automation].[dbo].[request_contents] WHERE [guid] = ''</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create EOJ + Bind"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{9ED2D1FF-EAD0-4D1D-89E1-729902B84EB0}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create EOJ + Bind"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_43ad3105359348378939d7f081bb24e3"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_43ad3105359348378939d7f081bb24e3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_43ad3105359348378939d7f081bb24e3")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
#endregion
using System.IO;
using System.Data.SqlClient;

namespace ST_43ad3105359348378939d7f081bb24e3
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            try
            {


                DirectoryInfo dir = new DirectoryInfo(@"\\10.10.0.28\alta\Robot\Alta_import");
                int fileCount = dir.GetFiles().Length;

                if (fileCount > 0)
                {
                    File.Create(@"\\10.10.0.28\alta\Robot\Alta_import\eoj.txt");
                    DateTime start = DateTime.Now;

                    //ожидание конца загрузки всех файлов, из расчета 5 секунд на документ
                    while (dir.GetFiles().Length > 0 && (DateTime.Now - start).TotalSeconds < (5.0 * fileCount))
                    {
                        System.Threading.Thread.Sleep(1000);
                    }

                    //процедура связки ДТ и Инвойсов, перенос документов в заданный каталог
                    SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
                    {
                        DataSource = "10.10.0.28",
                        UserID = "phpuser",
                        Password = "gnQCUElU"
                    };

                    using (SqlConnection con = new SqlConnection(connBuilder.ConnectionString))
                    {
                        SqlCommand command = new SqlCommand("automation.dbo.docs_update", con);
                        command.CommandType = CommandType.StoredProcedure;
                        command.Connection.Open();
                        int i = command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, "", e.Message, "", 0);
            }
        }        
    }

    #region ScriptResults declaration
    /// <summary>
    /// This enum provides a convenient shorthand within the scope of this class for setting the
    /// result of the script.
    /// 
    /// This code was generated automatically.
    /// </summary>
    enum ScriptResults
    {
        Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
        Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
    };
    #endregion

}]]></ProjectItem>
          <ProjectItem
            Name="ST_43ad3105359348378939d7f081bb24e3.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{54380f71-c3e0-467c-adbb-563a6a75b565}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_43ad3105359348378939d7f081bb24e3</RootNamespace>
    <AssemblyName>ST_43ad3105359348378939d7f081bb24e3</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_43ad3105359348378939d7f081bb24e3</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_43ad3105359348378939d7f081bb24e3</msb:DisplayName>
		<msb:ProjectId>{66895740-F65D-461E-9EB5-DC2215755381}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_43ad3105359348378939d7f081bb24e3.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_43ad3105359348378939d7f081bb24e3.Properties.Settings.get_Default():ST_43ad3105359348378939d7f081bb24e3.Properties.Sett" +
    "ings")]

namespace ST_43ad3105359348378939d7f081bb24e3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_43ad3105359348378939d7f081bb24e3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_43ad3105359348378939d7f081bb24e3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_43ad3105359348378939d7f081bb24e3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_43ad3105359348378939d7f081bb24e3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_43ad3105359348378939d7f081bb24e3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_43ad3105359348378939d7f081bb24e3.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAAQJbl4AAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAAyjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHgxAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA0BEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACs
MQAAAAAAAEgAAAACAAUA1CEAAOwOAAABAAAAAAAAAMAwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBgDxAAAAAQAAEXIBAABwcxAAAAoKBm8RAAAKjmkLBxY+
qwAAAHJJAABwKBIAAAomKBMAAAoMKwog6AMAACgUAAAKBm8RAAAKjiwhKBMAAAoIKBUAAAoNEgMo
FgAACiMAAAAAAAAUQAdsWjLMcxcAAAolcqEAAHBvGAAACiVytwAAcG8ZAAAKJXLHAABwbxoAAApv
GwAACnMcAAAKEwRy2QAAcBEEcx0AAAolGm8eAAAKJW8fAAAKbyAAAApvIQAACibeDBEELAcRBG8i
AAAK3N4oEwUCKCMAAApvJAAAChZyDwEAcBEFbyUAAApyDwEAcBZvJgAACibeACoAAAABHAAAAgCU
ACa6AAwAAAAAAAAAAMjIACgTAAABHgIoJwAACioeAigoAAAKKq5+BAAABC0echEBAHDQBAAAAigp
AAAKbyoAAApzKwAACoAEAAAEfgQAAAQqGn4FAAAEKh4CgAUAAAQqGn4GAAAEKh4CKCwAAAoqLnMI
AAAGgAYAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAB0BAAAI34AAOAE
AADMBgAAI1N0cmluZ3MAAAAArAsAAIQBAAAjVVMAMA0AABAAAAAjR1VJRAAAAEANAACsAQAAI0Js
b2IAAAAAAAAAAgAAAVcdogEJAQAAAPoBMwAWAAABAAAALAAAAAUAAAAGAAAACQAAAAEAAAAsAAAA
AgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAQAAAABAAAAAADZAwEAAAAAAAYAdgKQBQYABQOQ
BQYAwgFsBQ8ABAYAAAYA7wF2BAYAWQJ2BAYAOgJ2BAYA7AJ2BAYAlgJ2BAYArwJ2BAYABgJ2BAYA
IQI6AwoAygKIAwoAMgGIAwYA5AQ5AAYA6QAMBAYAJAQMBA4ApASQBgYAsgQMBAYAEwQMBAYApQFs
BQYAfQYMBAYAMQWwBQYA2ARSBBIAdQHDAxIA1gHDAxIATgE9BAYAigGQBQYAzwQ5AAYA5AA5AAYA
AQQ5AAYAYAApAw4AEgWQBg4A+AS8BA4AcQCQBg4AZwC8BA4A9gBLAA4AlwS8BAYAtAAMBAoAsQOI
AwoAQQWIAwYA/QAMBAYAwAAMBAYAsgZ2BAAAAAAlAAAAAAABAAEAAQAQADIEAQA5AAEAAQAAAQAA
ZAYBAFEAAQADAAAAEAC3BRMGWQAEAAMAAAEQAEsGEwZtAAYABwAGBkMArwBWgFQGsgBWgAIBsgAR
ABgEtgARACIBugARAIkAvgBQIAAAAACGADgEBgABAGwhAAAAAIYYXwUGAAEAdCEAAAAAgxhfBQYA
AQB8IQAAAACTCC0FwgABAKghAAAAAJMICgHHAAEAryEAAAAAkwgWAcwAAQC3IQAAAACWCIQG0gAC
AL4hAAAAAIYYXwUGAAIAxiEAAAAAkRhlBdcAAgAAAAEAIwMJAF8FAQARAF8FBgAZAF8FCgApAF8F
EAAxAF8FEAA5AF8FEABBAF8FEABJAF8FEABRAF8FEABZAF8FEABhAF8FEABpAF8FBgCpAF8FBgDR
AF8FFQDhAF8FBgB5AF8FEAB5AEIGKQDxAG4BLwCBAKYGNQABAfIEOgCBAGcEPwCJAH8FSAAJAV8F
BgAJAZkAEAAJAS4AEAAJAXwAEAARAVQDTACRAF8FEAAZAV8FUAAhAfIAVwAZAYgEXgAxAS0EBgAh
AbsGYwA5AWYBBgBxAFwGZwBBAXIGbQCZAKgATABJAVUFcwBxAF8FBgCxAF8FBgBRAdIAfABRAa4G
hQC5AF8FiwDZAF8FBgAIAAgApQAIAAwAqgApAHMAEgEuAAsA6gAuABMA8wAuABsAEgEuACMAGwEu
ACsARAEuADMARAEuADsARAEuAEMAGwEuAEsASgEuAFMARAEuAFsAYQFDAGMAqgBJAHMAEgGDAGsA
qgDBAHsAqgAbAAQAAQAFAAMAAAAxBdsAAAAqAeAAAACIBuUAAgAEAAMAAgAFAAUAAQAGAAUAAgAH
AAcABIAAAAEAAADTHJphAAAAAAAAAQAAAAQAAAAAAAAAAAAAAJMAVwAAAAAADQAAAAAAAAAAAAAA
nABpAwAAAAAEAAAAAAAAAAAAAACTAEsAAAAAAAQAAAAAAAAAAAAAAJMADAQAAAAAAAAAAAEAAADB
BQAAAAAAU1RfNDNhZDMxMDUzNTkzNDgzNzg5MzlkN2YwODFiYjI0ZTMAPE1vZHVsZT4Ac2V0X1Vz
ZXJJRABTeXN0ZW0uSU8AdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBUaHJlYWQARGJDb21t
YW5kAFNxbENvbW1hbmQAc2V0X1Bhc3N3b3JkAGRlZmF1bHRJbnN0YW5jZQBzZXRfRGF0YVNvdXJj
ZQBnZXRfTWVzc2FnZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhh
bmRsZQBGaWxlAERhdGVUaW1lAHNldF9Db21tYW5kVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBDcmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAHZhbHVlAFN5c3RlbS5UaHJlYWRpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmlu
ZwBnZXRfQ29ubmVjdGlvblN0cmluZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABT
eXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfNDNhZDMxMDUzNTkzNDgzNzg5MzlkN2YwODFiYjI0ZTMu
ZGxsAEZpbGVTdHJlYW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AVGltZVNwYW4AT3BlbgBTY3Jp
cHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAG9wX1N1YnRy
YWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAGdldF9Db25uZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxD
b25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24ARmlsZUluZm8AQ3VsdHVyZUlu
Zm8ARGlyZWN0b3J5SW5mbwBTbGVlcABEYkNvbm5lY3Rpb25TdHJpbmdCdWlsZGVyAFNxbENvbm5l
Y3Rpb25TdHJpbmdCdWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIARXZlbnRzT2JqZWN0V3JhcHBl
cgBGaXJlRXJyb3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBnZXRfVG90YWxTZWNv
bmRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF80
M2FkMzEwNTM1OTM0ODM3ODkzOWQ3ZjA4MWJiMjRlMy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNv
dXJjZXMARGVidWdnaW5nTW9kZXMAU1RfNDNhZDMxMDUzNTkzNDgzNzg5MzlkN2YwODFiYjI0ZTMu
UHJvcGVydGllcwBHZXRGaWxlcwBTZXR0aW5ncwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0
cwBnZXRfRXZlbnRzAE9iamVjdABnZXRfRGVmYXVsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0
X05vdwBnZXRfQXNzZW1ibHkARXhlY3V0ZU5vblF1ZXJ5AAAAR1wAXAAxADAALgAxADAALgAwAC4A
MgA4AFwAYQBsAHQAYQBcAFIAbwBiAG8AdABcAEEAbAB0AGEAXwBpAG0AcABvAHIAdAAAV1wAXAAx
ADAALgAxADAALgAwAC4AMgA4AFwAYQBsAHQAYQBcAFIAbwBiAG8AdABcAEEAbAB0AGEAXwBpAG0A
cABvAHIAdABcAGUAbwBqAC4AdAB4AHQAABUxADAALgAxADAALgAwAC4AMgA4AAAPcABoAHAAdQBz
AGUAcgAAEWcAbgBRAEMAVQBFAGwAVQAANWEAdQB0AG8AbQBhAHQAaQBvAG4ALgBkAGIAbwAuAGQA
bwBjAHMAXwB1AHAAZABhAHQAZQAAAQBxUwBUAF8ANAAzAGEAZAAzADEAMAA1ADMANQA5ADMANAA4
ADMANwA4ADkAMwA5AGQANwBmADAAOAAxAGIAYgAyADQAZQAzAC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAxI562Qr70kKfh+Jz7472MgAEIAEBCAMgAAEFIAEBEREE
IAEBDgUgAQERZQ0HBhI9CBFBEUUSSRJNBSAAHRJ1BQABEn0OBAAAEUEEAAEBCAgAAhFFEUERQQMg
AA0DIAAOBiACAQ4SSQYgAQERgJUEIAASSQMgAAgFIAASgKEFIAASgKUIIAUCCA4ODggIAAESgKkR
gK0FIAASgLEHIAIBDhKAsQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAACBggDBhEMAwYSXQMG
EmEDBhIUBAAAEl0EAAASYQUAAQESYQQAABIUAwAAAQQIABJdBAgAEmEECAASFAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfNDNhZDMxMDUzNTkz
NDgzNzg5MzlkN2YwODFiYjI0ZTMAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAASQEAGi5O
RVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZy
YW1ld29yayA0LjUAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVh
ZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tl
eVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VT
ZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAKAxAAAAAAAAAAAAALoxAAAAIAAAAAAAAAAAAAAAAAAA
AAAAAAAAAACsMQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAJph0xwAAAEAmmHTHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8ANAAzAGEAZAAzADEAMAA1ADMANQA5ADMANAA4ADMANwA4ADkAMwA5AGQANwBmADAA
OAAxAGIAYgAyADQAZQAzAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADcAMwA3ADkALgAyADQAOQA4ADYAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAA
UwBUAF8ANAAzAGEAZAAzADEAMAA1ADMANQA5ADMANAA4ADMANwA4ADkAMwA5AGQANwBmADAAOAAx
AGIAYgAyADQAZQAzAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQA
AABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVABy
AGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4A
YQBtAGUAAABTAFQAXwA0ADMAYQBkADMAMQAwADUAMwA1ADkAMwA0ADgAMwA3ADgAOQAzADkAZAA3
AGYAMAA4ADEAYgBiADIANABlADMALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0A
ZQAAAAAAUwBUAF8ANAAzAGEAZAAzADEAMAA1ADMANQA5ADMANAA4ADMANwA4ADkAMwA5AGQANwBm
ADAAOAAxAGIAYgAyADQAZQAzAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAA
MQAuADAALgA3ADMANwA5AC4AMgA0ADkAOAA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADMANwA5AC4AMgA0ADkAOAA2AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAMwxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Download files from mail"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D6EFA5AA-EB7D-4B54-9D05-0BAB00BB9AE5}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Download files from mail"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_3fdd2b942e254ff7a7c85cd6454b463c"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="ContentDisposition.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;

namespace S22.Imap {
	/// <summary>
	/// Represents the content disposition as is presented in the BODYSTRUCTURE
	/// response by the IMAP server.
	/// </summary>
	[Serializable]
	public class ContentDisposition {
		/// <summary>
		/// Initializes a new instance of the ContentDisposition class with
		/// default values.
		/// </summary>
		public ContentDisposition() {
			Attributes = new Dictionary<string, string>();
			Type = ContentDispositionType.Unknown;
			Filename = "";
		}

		/// <summary>
		/// The content disposition specifies the presentation style.
		/// </summary>
		public ContentDispositionType Type { get; set; }

		/// <summary>
		/// Additional attribute fields for specifying the name of a file, the creation
		/// date and modification date, which can be used by the reader's mail user agent
		/// to store the attachment.
		/// </summary>
		public Dictionary<string, string> Attributes { get; set; }

		/// <summary>
		/// Contains the name of the transmitted file if the content-disposition is of type
		/// "Attachment" and if the name value was provided as part of the header information.
		/// This field may be empty.
		/// </summary>
		public string Filename { get; set; }

		/// <summary>
		/// Maps MIME content disposition string values to their corresponding
		/// counter-parts of the ContentDispositionType enumeration.
		/// </summary>
		static internal Dictionary<string, ContentDispositionType> Map =
			new Dictionary<string, ContentDispositionType>(StringComparer.OrdinalIgnoreCase) {
			{ "Inline", ContentDispositionType.Inline },
			{ "Attachment",	ContentDispositionType.Attachment }
		};
	}

	/// <summary>
	/// Possible values for the content disposition type which determines the presentation
	/// style
	/// </summary>
	public enum ContentDispositionType {
		/// <summary>
		/// The content disposition could not be determined.
		/// </summary>
		Unknown,
		/// <summary>
		/// An inline content disposition means that the content should be automatically
		/// displayed when the message is displayed.
		/// </summary>
		Inline,
		/// <summary>
		/// An attachment content disposition means that the content should not be displayed
		/// automatically and requires some form of action from the user to open it.
		/// </summary>
		Attachment
	}

	internal static class ContentDispositionTypeMap {
		public static ContentDispositionType fromString(string disposition) {
			Dictionary<string, ContentDispositionType> Map =
			new Dictionary<string, ContentDispositionType>
				(StringComparer.OrdinalIgnoreCase) {
				{ "Inline", ContentDispositionType.Inline },
				{ "Attachment",	ContentDispositionType.Attachment }
			};
			try {
				return Map[disposition];
			} catch {
				return ContentDispositionType.Unknown;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="MailMessage.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Text.RegularExpressions;

namespace S22.Imap {
	/// <summary>
	/// Adds extension methods to the MailMessage class of the .Net Framework.
	/// These are only used internally and are not visible outside of the
	/// S22.Imap assembly so as to not interfere with other assemblies.
	/// </summary>
	internal static class MailMessageExtension {
		/// <summary>
		/// Constructs a textual representation of a mail message from the specified
		/// MailMessage instance compliant with the RFC822 and MIME standards.
		/// </summary>
		/// <param name="message">The MailMessage instance to construct the
		/// textual representation from.</param>
		/// <returns>An RFC822/MIME-compliant string describing a mail
		/// message.</returns>
		/// <exception cref="InvalidOperationException">Thrown if the From
		/// property is null or is not properly initialized.</exception>
		internal static string ToMIME822(this MailMessage message) {
			NameValueCollection header = BuildHeader(message);
			StringBuilder builder = new StringBuilder();

			foreach (string h in header) {
				string line = h + ": " + header[h];
				// RFC2822 states a line should at max be 78 characters (excluding CRLF)
				// so long headers may span over several lines.
/*
				string[] chunks = line.ToChunks(70);
				builder.AppendLine(chunks[0]);
				for (int i = 1; i < chunks.Length; i++)
					builder.AppendLine(" " + chunks[i]);
 */
				builder.AppendLine(line);
			}
			// The mail body is separated by an empty line from the header
			builder.AppendLine();
			builder.Append(BuildBody(message, header));
			builder.AppendLine();

			return builder.ToString();
		}

		/// <summary>
		/// Builds a RFC822/MIME-compliant mail header from the specified
		/// MailMessage instance and returns it as a NameValueCollection.
		/// </summary>
		/// <param name="m">The MailMessage instance to build the header
		/// from.</param>
		/// <returns>A NameValueCollection representing the RFC822/MIME
		/// mail header fields.</returns>
		static NameValueCollection BuildHeader(MailMessage m) {
			string[] ignore = new string[] {
				"MIME-Version", "Date", "Subject", "From", "To", "Cc", "Bcc",
				"Content-Type", "Content-Transfer-Encoding", "Priority",
				"Reply-To", "X-Priority", "Importance", "Sender", "Message-Id"
			};
			NameValueCollection header = new NameValueCollection() {
				{ "MIME-Version", "1.0" },
				{ "Date", DateTime.Now.ToString("R") },
				{ "Priority", PriorityMap[m.Priority] },
				{ "Importance", ImportanceMap[m.Priority] }
			};
			if (m.From == null)
				throw new InvalidOperationException("The From property must not be null");
			header.Add("From", m.From.To822Address());
			if (m.Subject != null)
				header.Add("Subject", m.Subject.IsASCII() ? m.Subject : QEncode(m.Subject));
			foreach (MailAddress a in m.To)
				header.Add("To", a.To822Address());
			foreach (MailAddress a in m.CC)
				header.Add("Cc", a.To822Address());
			foreach (MailAddress a in m.Bcc)
				header.Add("Bcc", a.To822Address());
			bool multipart = m.AlternateViews.Count > 0 || m.Attachments.Count > 0;
			if (!multipart) {
				string contentType = m.IsBodyHtml ? "text/html" : "text/plain";
				if (m.BodyEncoding != null)
					contentType = contentType + "; charset=" + m.BodyEncoding.WebName;
				header.Add("Content-Type", contentType);
				if (m.Body != null && !m.Body.IsASCII())
					header.Add("Content-Transfer-Encoding", "base64");
			} else {
				string contentType = (m.Attachments.Count == 0 ?
					"multipart/alternative" : "multipart/mixed") + "; boundary=" +
					GenerateContentBoundary();
				header.Add("Content-Type", contentType);
			}
			// Add any custom headers added by user
			foreach (string key in m.Headers) {
				if (ignore.Contains(key, StringComparer.OrdinalIgnoreCase))
					continue;
				header.Add(key, m.Headers.GetValues(key)[0]);
			}
			return header;
		}

		/// <summary>
		/// A map for mapping the values of the MailPriority enumeration to
		/// their corresponding MIME priority values as defined in
		/// RFC2156.
		/// </summary>
		static Dictionary<MailPriority, string> PriorityMap =
			new Dictionary<MailPriority, string>() {
				{ MailPriority.Low, "non-urgent" },
				{ MailPriority.Normal, "normal" },
				{ MailPriority.High, "urgent" }
			};

		/// <summary>
		/// A map for mapping the values of the MailPriority enumeration to
		/// their corresponding MIME importance values as defined in
		/// RFC2156.
		/// </summary>
		static Dictionary<MailPriority, string> ImportanceMap =
			new Dictionary<MailPriority, string>() {
				{ MailPriority.Low, "low" },
				{ MailPriority.Normal, "normal" },
				{ MailPriority.High, "high" }
			};

		/// <summary>
		/// Takes a unicode string and encodes it using Q-encoding.
		/// </summary>
		/// <param name="s">The string to encode</param>
		/// <returns>The input string encoded as Q-encoded string containing
		/// only ASCII characters.</returns>
		static string QEncode(string s) {
			StringBuilder builder = new StringBuilder("=?UTF-8?Q?");
			char[] chars = Encoding.Unicode.GetChars(Encoding.Unicode.GetBytes(s));
			foreach (char c in chars) {
				if (c < 32 || c == '=' || c == '_' || c == '?' || c > 126)
					builder.Append(string.Format("={0:X2}", (int)c));
				else if (c == ' ')
					builder.Append('_');
				else
					builder.Append(c);
			}
			return builder.ToString() + "?=";
		}

		/// <summary>
		/// Creates an address string from the specified MailAddress instance in
		/// compliance with the address specification as outlined in RFC2822 under
		/// section 3.4
		/// </summary>
		/// <param name="address">The MailAddress instance to create the address
		/// string from.</param>
		/// <returns>An address string as is used in RFC822 mail headers</returns>
		static string To822Address(this MailAddress address) {
			if (!String.IsNullOrEmpty(address.DisplayName)) {
				string name = address.DisplayName.IsASCII() ?
					address.DisplayName : QEncode(address.DisplayName);
				return name + " <" + address.Address + ">";
			}
			return address.Address;
		}

		/// <summary>
		/// Generates a unique sequence of characters for indicating a boundary
		/// between parts in a multipart message.
		/// </summary>
		/// <returns>A unique content boundary string</returns>
		static string GenerateContentBoundary() {
			return Guid.NewGuid().ToString("N");
		}

		/// <summary>
		/// Builds an RFC822/MIME-compliant mail body from the specified
		/// MailMessage instance and returns it as a formatted string.
		/// </summary>
		/// <param name="m">The MailMessage instance to build the mail body
		/// from.</param>
		/// <param name="header">The RFC822/MIME mail header to use for
		/// constructing the mail body.</param>
		/// <returns>An RFC822/MIME-compliant mail body as a string.
		/// </returns>
		/// <remarks>According to RFC2822 each line of a mail message should
		/// at max be 78 characters in length excluding carriage return and
		/// newline characters. This method accounts for that and ensures
		/// line breaks are inserted to meet this requirement.</remarks>
		static string BuildBody(MailMessage m, NameValueCollection header) {
			StringBuilder builder = new StringBuilder();
			bool multipart = header["Content-Type"].Contains("boundary");
			// Just a regular RFC822 mail w/o any MIME parts
			if (!multipart) {
				AddBody(builder, m, header);
				return builder.ToString();
			}
			Match match = Regex.Match(header["Content-Type"], @"boundary=(\w+)");
			string boundary = match.Groups[1].Value;
			// Start boundary
			builder.AppendLine("--" + boundary);
			bool nestParts = m.AlternateViews.Count > 0 && m.Attachments.Count > 0;
			if (nestParts) {
				AddNestedAlternative(builder, m, header);
				builder.AppendLine("--" + boundary);
				AddNestedMixed(builder, m);
			} else {
				AddBody(builder, m, header, true);
				foreach (AlternateView v in m.AlternateViews) {
					builder.AppendLine("--" + boundary);
					AddAttachment(builder, v);
				}
				foreach (Attachment a in m.Attachments) {
					builder.AppendLine("--" + boundary);
					AddAttachment(builder, a);
				}
			}
			// End boundary
			builder.AppendLine("--" + boundary + "--");
			return builder.ToString();
		}

		/// <summary>
		/// Adds a body part to the specified Stringbuilder object composed from
		/// the Body and BodyEncoding properties of the MailMessage class.
		/// </summary>
		/// <param name="builder">The Stringbuilder to append the body part to.</param>
		/// <param name="m">The MailMessage instance to build the body part from.</param>
		/// <param name="header">The RFC822/MIME mail header to use for
		/// constructing the mail body.</param>
		/// <param name="addHeaders">Set to true to append body headers before
		/// adding the actual body part content.</param>
		static void AddBody(StringBuilder builder, MailMessage m,
			NameValueCollection header, bool addHeaders = false) {
			bool base64 = header["Content-Transfer-Encoding"] == "base64";
			if (addHeaders) {
				string contentType = m.IsBodyHtml ? "text/html" : "text/plain";
				if (m.BodyEncoding != null)
					contentType = contentType + "; charset=" + m.BodyEncoding.WebName;
				builder.AppendLine("Content-Type: " + contentType);
				if (m.Body != null && !m.Body.IsASCII()) {
					builder.AppendLine("Content-Transfer-Encoding: base64");
					base64 = true;
				}
				builder.AppendLine();
			}
			string body = m.Body;
			if (base64) {
				byte[] bytes = m.BodyEncoding.GetBytes(m.Body);
				body = Convert.ToBase64String(bytes);
			}
			StringReader reader = new StringReader(body);
			char[] line = new char[76];
			int read;
			while ((read = reader.Read(line, 0, line.Length)) > 0)
				builder.AppendLine(new string(line, 0, read));
		}

		/// <summary>
		/// Creates a MIME body part from an entry of the AlternateView or
		/// Attachments collection of a MailMessage instance and appends it
		/// to the specified Stringbuilder instance.
		/// </summary>
		/// <param name="builder">The Stringbuilder instance to append the
		/// body part to.</param>
		/// <param name="view">An entry from either the AlternateView or the
		/// Attachments collection of a MailMessage instance.</param>
		static void AddAttachment(StringBuilder builder, AttachmentBase view) {
			// Append the MIME headers for this body part
			string contentType = "Content-Type: " + view.ContentType.MediaType;
			foreach (string key in view.ContentType.Parameters.Keys) {
				contentType = contentType + "; " + key + "=" +
					view.ContentType.Parameters[key];
			}
			builder.AppendLine(contentType);
			builder.AppendLine("Content-Transfer-Encoding: base64");
			if (!String.IsNullOrEmpty(view.ContentId))
				builder.AppendLine("Content-Id: <" + view.ContentId + ">");
			if (view is Attachment)
				builder.AppendLine("Content-Disposition: attachment");
			builder.AppendLine();
			// Append the actual body part contents encoded as Base64
			using (MemoryStream memstream = new MemoryStream()) {
				int bytesRead;
				byte[] buffer = new byte[4096];
				while ((bytesRead =
					view.ContentStream.Read(buffer, 0, buffer.Length)) > 0) {
					memstream.Write(buffer, 0, bytesRead);
				}
				string str = Convert.ToBase64String(memstream.ToArray());
				StringReader reader = new StringReader(str);
				char[] line = new char[76];
				int read;
				while ((read = reader.Read(line, 0, line.Length)) > 0)
					builder.AppendLine(new string(line, 0, read));
			}
			// Rewind the stream if it supports seeking
			if (view.ContentStream.CanSeek)
				view.ContentStream.Seek(0, SeekOrigin.Begin);
		}

		/// <summary>
		/// Creates a nested multipart/alternative part which contains all entries
		/// from the AlternateViews collection of the specified MailMessage instance
		/// as well as the body part for the Body and BodyEncoding properties of the
		/// specified MailMessage instance.
		/// </summary>
		/// <param name="builder">The StringBuilder instance to append to.</param>
		/// <param name="m">The MailMessage instance whose AlternateView collection
		/// will be added to the nested multipart/alternative part.</param>
		/// <param name="header">The RFC822/MIME mail header to use for
		/// constructing the mail body.</param>
		/// <remarks>This is used if the MailMessage instance contains both alternative
		/// views and attachments. In this case the created RFC822/MIME mail message will
		/// contain nested body parts.</remarks>
		static void AddNestedAlternative(StringBuilder builder, MailMessage m,
			NameValueCollection header) {
			string boundary = GenerateContentBoundary();
			builder.AppendLine("Content-Type: multipart/alternative; boundary=" + boundary);
			builder.AppendLine();
			// Add the body parts to the nested multipart/alternative part
			builder.AppendLine("--" + boundary);
			AddBody(builder, m, header, true);
			foreach (AlternateView v in m.AlternateViews) {
				builder.AppendLine("--" + boundary);
				AddAttachment(builder, v);
			}
			builder.AppendLine("--" + boundary + "--");
		}

		/// <summary>
		/// Creates a nested multipart/mixed part which contains all entries
		/// from the Attachments collection of the specified MailMessage instance.
		/// </summary>
		/// <param name="builder">The StringBuilder instance to append to.</param>
		/// <param name="m">The MailMessage instance whose Attachments collection
		/// will be added to the nested multipart/mixed part.</param>
		/// <remarks>This is used if the MailMessage instance contains both alternative
		/// views and attachments. In this case the created RFC822/MIME mail message will
		/// contain nested body parts.</remarks>
		static void AddNestedMixed(StringBuilder builder, MailMessage m) {
			string boundary = GenerateContentBoundary();
			builder.AppendLine("Content-Type: multipart/mixed; boundary=" + boundary);
			builder.AppendLine();
			// Add the body parts to the nested multipart/mixed part
			foreach (Attachment a in m.Attachments) {
				builder.AppendLine("--" + boundary);
				AddAttachment(builder, a);
			}
			builder.AppendLine("--" + boundary + "--");
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Bodypart.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Text;

namespace S22.Imap {
	/// <summary>
	/// Represents a MIME body part of a mail message that has multiple
	/// parts.
	/// </summary>
	[Serializable]
	public class Bodypart {
		/// <summary>
		/// Initializes a new instance of the Bodypart class with default
		/// values.
		/// </summary>
		/// <param name="partNumber">The part number as is expected by the
		/// IMAP FETCH command.</param>
		internal Bodypart(string partNumber) {
			// Initialize all fields with default values
			PartNumber = partNumber;
			Type = ContentType.Other;
			Subtype = Id = Description = Md5 = Language = Location = "";
			Parameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
			Disposition = new ContentDisposition();
			Encoding = ContentTransferEncoding.Unknown;
			Size = Lines = 0;
		}
		/// <summary>
		/// The body part number which acts as part specifier for
		/// the FETCH BODY command.
		/// </summary>
		internal string PartNumber { get; set; }
		/// <summary>
		/// The MIME content-type of this body part. The content-type is
		/// used to declare the general type of data.
		/// </summary>
		public ContentType Type { get; set; }
		/// <summary>
		/// The MIME content-subtype of this body part. The subtype
		/// specifies a specific format for the type of data.
		/// </summary>
		public string Subtype { get; set; }
		/// <summary>
		/// Parameter values present in the MIME content-type header
		/// of this body part (for instance, 'charset').
		/// </summary>
		public Dictionary<string, string> Parameters { get; set; }
		/// <summary>
		/// The MIME content-id of this body part, if any. This value
		/// may be used for uniquely identifying MIME entities in
		/// several contexts.
		/// </summary>
		public string Id { get; set; }
		/// <summary>
		/// The MIME content-description of this body part. This value
		/// may contain some descriptive information on the body part.
		/// </summary>
		public string Description { get; set; }
		/// <summary>
		/// The MIME content-transfer-encoding mechanism used for
		/// encoding this body part's data.
		/// </summary>
		public ContentTransferEncoding Encoding { get; set; }
		/// <summary>
		/// The size of this body part in bytes. Note that this size
		/// is the size in its transfer encoding and not the resulting
		/// size after any decoding.
		/// </summary>
		public Int64 Size { get; set; }
		/// <summary>
		/// The size of the body in text lines. This field is only
		/// present in body parts with a content-type of text.
		/// </summary>
		public Int64 Lines { get; set; }
		/// <summary>
		/// The computed MD5-Hash of the body part. This field is not
		/// mandatory and may be empty.
		/// </summary>
		public string Md5 { get; set; }
		/// <summary>
		/// The MIME content-disposition for this body part. This field
		/// is not mandatory and may be empty.
		/// </summary>
		public ContentDisposition Disposition { get; set; }
		/// <summary>
		/// A string giving the body language. This field is not mandatory
		/// and may be empty.
		/// </summary>
		public string Language { get; set; }
		/// <summary>
		/// A string list giving the body content URI. This field is not
		/// mandatory and may be empty.
		/// </summary>
		public string Location { get; set; }
		/// <summary>
		/// Returns a detailed description listing all properties of this
		/// Bodypart instance.
		/// </summary>
		/// <returns>A string describing this instance of the Bodypart class</returns>
		public override string ToString() {
			StringBuilder builder = new StringBuilder();
			builder.AppendLine("Part Number: " + PartNumber);
			builder.AppendLine("Type: " + Type);
			builder.AppendLine("Subtype: " + Subtype);
			foreach (string key in Parameters.Keys)
				builder.AppendLine("Parameters[" + key + "]: " + Parameters[key]);
			builder.AppendLine("Id: " + Id);
			builder.AppendLine("Description: " + Description);
			builder.AppendLine("Encoding: " + Encoding);
			builder.AppendLine("Size: " + Size);
			builder.AppendLine("Lines: " + Lines);
			builder.AppendLine("Md5: " + Md5);
			builder.AppendLine("Disposition: " + Disposition.Type);
			foreach (string key in Disposition.Attributes.Keys)
				builder.AppendLine("Disposition[" + key + "]: " + Disposition.Attributes[key]);
			builder.AppendLine("Language: " + Language);
			builder.AppendLine("Location: " + Location);
			return builder.ToString();
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="MailboxInfo.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Contains status information for an IMAP mailbox such as the total
	/// number of messages in the mailbox, various attributes as well as
	/// quota information.
	/// </summary>
	/// <remarks>The terms "mailbox" and "folder" can be used interchangeably
	/// and refer to the IMAP concept of multiple server-side directories into
	/// which messages can be stored (such as "Inbox", "Sent Items", "Trash",
	/// etc.).</remarks>
	[Serializable]
	public class MailboxInfo {
		/// <summary>
		/// Initializes a new instance of the MailboxInfo class with the specified
		/// values.
		/// </summary>
		/// <param name="Name">The IMAP name of the mailbox</param>
		/// <param name="Flags">The IMAP flags set on this mailbox</param>
		/// <param name="Messages">The number of messages in the mailbox</param>
		/// <param name="Unread">The number of unread messages in the mailbox</param>
		/// <param name="NextUID">The next unique identifier (UID) of the mailbox</param>
		/// <param name="UsedStorage">The amount of used storage of the mailbox, in bytes</param>
		/// <param name="FreeStorage">The amount of free storage of the mailbox, in bytes</param>
		internal MailboxInfo(string Name, MailboxFlag[] Flags, int Messages, int Unread,
			uint NextUID, UInt64 UsedStorage, UInt64 FreeStorage) {
				this.Name = Name;
				this.Flags = Flags;
				this.Messages = Messages;
				this.Unread = Unread;
				this.NextUID = NextUID;
				this.UsedStorage = UsedStorage;
				this.FreeStorage = FreeStorage;
		}

		/// <summary>
		/// Returns the name of the mailbox.
		/// </summary>
		/// <returns>The name of the mailbox</returns>
		public override string ToString() {
			return Name;
		}

		/// <summary>
		/// The name of the mailbox
		/// </summary>
		public string Name {
			get;
			set;
		}

		/// <summary>
		/// An array of flags set on this mailbox.
		/// </summary>
		public MailboxFlag[] Flags {
			get;
			set;
		}

		/// <summary>
		/// The total number of messages in the mailbox.
		/// </summary>
		public int Messages {
			get;
			set;
		}

		/// <summary>
		/// The number of unread (unseen) messages in the mailbox.
		/// </summary>
		public int Unread {
			get;
			set;
		}

		/// <summary>
		/// The next unique identifier value of the mailbox.
		/// </summary>
		public uint NextUID {
			get;
			set;
		}

		/// <summary>
		/// The amount of used storage in the mailbox, measured in bytes.
		/// </summary>
		/// <remarks>Not all IMAP servers support the retrieval of quota
		/// information. If it is not possible to retrieve the amount of
		/// used storage, this property will be set to 0.
		/// </remarks>
		public UInt64 UsedStorage {
			get;
			set;
		}

		/// <summary>
		/// The amount of free storage in the mailbox, measured in bytes.
		/// </summary>
		/// <remarks>Not all IMAP servers support the retrieval of quota
		/// information. If it is not possible to retrieve the amount of
		/// free storage, this property will be set to 0.
		/// </remarks>
		public UInt64 FreeStorage {
			get;
			set;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="FetchOptions.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Fetch options that can be used with the GetMessage and GetMessages methods
	/// to selectively retrieve parts of a mail message while skipping others.
	/// </summary>
	public enum FetchOptions {
		/// <summary>
		/// Fetches the entire mail message with all of its content.
		/// </summary>
		Normal,
		/// <summary>
		/// Only the mail message headers will be retrieved, while the actual content will
		/// not be downloaded. If this option is specified, only the header fields of the
		/// returned MailMessage object will be initialized.
		/// </summary>
		HeadersOnly,
		/// <summary>
		/// Retrieves the mail message, but will only download content that has a
		/// content-type of text. This will retrieve text as well as html representations,
		/// but no inline content or attachments.
		/// </summary>
		TextOnly,
		/// <summary>
		/// Retrieves the mail message, but skips any content that has been marked as
		/// attachment.
		/// </summary>
		NoAttachments
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Reader.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;

namespace S22.Imap {
	/// <summary>
	/// A helper class for parsing the BODYSTRUCTURE response of an
	/// IMAP FETCH command more conveniently.
	/// </summary>
	internal class Reader : StringReader {
		/// <summary>
		/// Initializes a new instance of the Reader class that reads from the
		/// specified string.
		/// </summary>
		/// <param name="s">The string to which the Reader instance should be
		/// initialized.</param>
		public Reader(string s)
			: base(s) {
		}

		/// <summary>
		/// Reads the next character from the input string and advances the
		/// character position by one character.
		/// </summary>
		/// <returns>The next character from the underlying string.</returns>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public override int Read() {
			int character = base.Read();
			if (character == -1)
				throw new EndOfStringException();
			return character;
		}

		/// <summary>
		/// Returns the next available character but does not consume it.
		/// </summary>
		/// <param name="skipSpaces">Set to true to skip any preceding
		/// whitespace characters.</param>
		/// <returns>An integer representing the next character to be read,
		/// or -1 if no more characters are available.</returns>
		public int Peek(bool skipSpaces) {
			try {
				if (skipSpaces)
					SkipSpaces();
			} catch (EndOfStringException) {
			}
			return base.Peek();
		}

		/// <summary>
		/// Advances the character position until the specified character
		/// is encountered.
		/// </summary>
		/// <param name="character">The character to skip to.</param>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public void SkipUntil(char character) {
			while (Read() != character) ;
		}

		/// <summary>
		/// Advances the character position over any whitespace characters
		/// and subsequently ensures the next read will not return a
		/// whitespace character.
		/// </summary>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public void SkipSpaces() {
			while (Peek() == ' ' || Peek() == '\t')
				Read();
		}

		/// <summary>
		/// Reads characters until the specified character is encountered.
		/// </summary>
		/// <param name="character">The character to read up to.</param>
		/// <returns>The read characters as a string value.</returns>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public string ReadUntil(char character) {
			StringBuilder builder = new StringBuilder();
			char c;
			while ((c = (char)Read()) != character)
				builder.Append(c);
			return builder.ToString();
		}

		/// <summary>
		/// Reads a word from the underlying string. A word in this context
		/// is a literal enclosed in double-quotes.
		/// </summary>
		/// <returns>The read word.</returns>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public string ReadWord() {
			char c;
			char[] last = new char[3];
			while ((c = (char)Read()) != '"') {
				last[0] = last[1];
				last[1] = last[2];
				last[2] = c;
				if ((new string(last)) == "NIL")
					return "";
			}
			StringBuilder builder = new StringBuilder();
			last[0] = ' ';
			while (true) {
				/* account for backslash-escaped double-quote characters */
				if ((c = (char)Read()) == '"' && last[0] != '\\')
					break;
				builder.Append(c);
				last[0] = c;
			}
			return builder.ToString();
		}

		/// <summary>
		/// Reads an integer from the underlying string.
		/// </summary>
		/// <returns>The read integer value.</returns>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public Int64 ReadInteger() {
			StringBuilder builder = new StringBuilder();
			SkipSpaces();
			do {
				char c = (char)Read();
				if (c >= '0' && c <= '9')
					builder.Append(c);
				else
					break;
			} while (Peek() >= '0' && Peek() <= '9');
			return Int64.Parse(builder.ToString());
		}

		/// <summary>
		/// Reads a list from the underlying string. A list in this context
		/// is a list of attribute/value literals (enclosed in double-quotes)
		/// enclosed in parenthesis.
		/// </summary>
		/// <returns>The read list as a dictionary with the attribute names
		/// as keys and attribute values as values.</returns>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public Dictionary<string, string> ReadList() {
			Dictionary<string, string> Dict =
				 new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
			char c;
			char[] last = new char[3];
			while ((c = (char)Read()) != '(') {
				last[0] = last[1];
				last[1] = last[2];
				last[2] = c;
				if ((new string(last)) == "NIL")
					return Dict;
			}
			StringBuilder pairs = new StringBuilder();
			last[0] = ' ';
			/* attribute/value literals my contain parenthesis */
			bool inQuotes = false;
			while (Peek() > 0) {
				c = (char)Read();
				if (c == '"' && last[0] != '\\')
					inQuotes = !inQuotes;
				if (c == ')' && !inQuotes)
					break;
				last[0] = c;
				pairs.Append(c);
			}
			MatchCollection matches = Regex.Matches(pairs.ToString(), "\"([^\"]+)\"\\s+\"([^\"]+)\"");
			foreach (Match m in matches)
				Dict.Add(m.Groups[1].Value, m.Groups[2].Value);
			return Dict;
		}

		/// <summary>
		/// Reads a disposition from the underlying string. A disposition in
		/// this context is a list of attribute/value literals (enclosed in
		/// double-quotes) preceded by a word enclosed in parenthesis.
		/// </summary>
		/// <returns>An initialized ContentDisposition instance representing
		/// the parsed disposition.</returns>
		/// <exception cref="EndOfStringException">Thrown when reading is
		/// attempted past the end of the underlying string.</exception>
		public ContentDisposition ReadDisposition() {
			ContentDisposition Disp = new ContentDisposition();
			char c;
			char[] last = new char[3];
			while ((c = (char)Read()) != '(') {
				last[0] = last[1];
				last[1] = last[2];
				last[2] = c;
				if ((new string(last)) == "NIL")
					return Disp;
			}

			string type = ReadWord();
			Disp.Type = ContentDispositionTypeMap.fromString(type);
			Disp.Attributes = ReadList();
			ReadUntil(')');

			if (Disp.Attributes.ContainsKey("Filename"))
				Disp.Filename = Disp.Attributes["Filename"];
			return Disp;
		}
	}

	/// <summary>
	/// The exception that is thrown when reading is attempted past the end
	/// of a string.
	/// </summary>
	internal class EndOfStringException : Exception {
		/// <summary>
		/// Initializes a new instance of the EndOfStringException class
		/// </summary>
		public EndOfStringException() : base() { }
		/// <summary>
		/// Initializes a new instance of the EndOfStringException class with its message
		/// string set to <paramref name="message"/>.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		public EndOfStringException(string message) : base(message) { }
		/// <summary>
		/// Initializes a new instance of the EndOfStringException class with its message
		/// string set to <paramref name="message"/> and a reference to the inner exception that
		/// is the cause of this exception.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		/// <param name="inner">The exception that is the cause of the current exception.</param>
		public EndOfStringException(string message, Exception inner) : base(message, inner) { }
		/// <summary>
		/// Initializes a new instance of the EndOfStringException class with the specified
		/// serialization and context information.
		/// </summary>
		/// <param name="info">An object that holds the serialized object data about the exception
		/// being thrown. </param>
		/// <param name="context">An object that contains contextual information about the source
		/// or destination. </param>
		protected EndOfStringException(SerializationInfo info, StreamingContext context) { }
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_3fdd2b942e254ff7a7c85cd6454b463c.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B42440D0-0DF0-4DA9-858D-D2B70D26B28E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_3fdd2b942e254ff7a7c85cd6454b463c</RootNamespace>
    <AssemblyName>ST_3fdd2b942e254ff7a7c85cd6454b463c</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="AuthMethod.cs" />
    <Compile Include="Bodypart.cs" />
    <Compile Include="Bodystructure.cs" />
    <Compile Include="ContentDisposition.cs" />
    <Compile Include="ContentTransferEncoding.cs" />
    <Compile Include="ContentType.cs" />
    <Compile Include="Exceptions.cs" />
    <Compile Include="FetchOptions.cs" />
    <Compile Include="IdleEvents.cs" />
    <Compile Include="IImapClient.cs" />
    <Compile Include="ImapClient.cs" />
    <Compile Include="MailboxFlags.cs" />
    <Compile Include="MailboxInfo.cs" />
    <Compile Include="MailboxQuota.cs" />
    <Compile Include="MailboxStatus.cs" />
    <Compile Include="MailMessage.cs" />
    <Compile Include="MessageBuilder.cs" />
    <Compile Include="MessageFlags.cs" />
    <Compile Include="MIMEPart.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SearchCondition.cs" />
    <Compile Include="Util.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="Reader.cs" />
    <Compile Include="SafeQueue.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_3fdd2b942e254ff7a7c85cd6454b463c")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_3fdd2b942e254ff7a7c85cd6454b463c")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="MailboxStatus.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Represents the status information of a mailbox which can be
	/// constructed from the server response to a STATUS command.
	/// </summary>
	[Serializable]
	internal class MailboxStatus {
		/// <summary>
		/// Initializes a new MailboxStatus instance with the specified number
		/// of total and unread messages.
		/// </summary>
		/// <param name="Messages">The total number of messages in the mailbox.</param>
		/// <param name="Unread">The number of unread (unseen) messages in the mailbox.</param>
		/// <param name="NextUID">The next unique identifier value of the mailbox</param>
		internal MailboxStatus(int Messages, int Unread, uint NextUID) {
			this.Messages = Messages;
			this.Unread = Unread;
			this.NextUID = NextUID;
		}

		/// <summary>
		/// The next unique identifier value of the mailbox.
		/// </summary>
		internal uint NextUID {
			get;
			private set;
		}

		/// <summary>
		/// The total number of messages in the mailbox.
		/// </summary>
		internal int Messages {
			get;
			private set;
		}

		/// <summary>
		/// The number of unread (unseen) messages in the mailbox.
		/// </summary>
		internal int Unread {
			get;
			private set;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Util.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace S22.Imap {
	/// <summary>
	/// A static utility class containing methods for decoding encoded
	/// non-ASCII data as is often used in mail messages as well as
	/// extension methods for some existing classes.
	/// </summary>
	internal static class Util {
		/// <summary>
		/// Returns a copy of the string enclosed in double-quotes and with escaped
		/// CRLF, back-slash and double-quote characters (as is expected by some
		/// commands of the IMAP protocol).
		/// </summary>
		/// <param name="value">Extends the System.String class</param>
		/// <returns>A copy of the string enclosed in double-quotes and properly
		/// escaped as is required by the IMAP protocol.</returns>
		internal static string QuoteString(this string value) {
			return "\"" + value
				.Replace("\\", "\\\\")
				.Replace("\r", "\\r")
				.Replace("\n", "\\n")
				.Replace("\"", "\\\"") + "\"";
		}

		/// <summary>
		/// Returns true if the string contains only ASCII characters.
		/// </summary>
		/// <param name="s">Extension method for the String class.</param>
		/// <returns>Returns true if the string contains only ASCII characters,
		/// otherwise false is returned.</returns>
		internal static bool IsASCII(this string s) {
			return s.ToCharArray().All(c => c < 127);
		}

		/// <summary>
		/// Splits a string into chunks of the specified number of
		/// characters.
		/// </summary>
		/// <param name="str">Extension method for the String class.</param>
		/// <param name="characters">The length of a chunk, measured in
		/// characters.</param>
		/// <returns>An array of string chunks</returns>
		internal static string[] ToChunks(this string str, int characters) {
			List<string> list = new List<string>();
			while (str.Length > 0) {
				int length = str.Length > characters ? characters :
					str.Length;
				string t = str.Substring(0, length);
				str = str.Remove(0, length);
				list.Add(t);
			}
			return list.ToArray();
		}

		/// <summary>
		/// Raises the event. Ensures the event is only raised, if it is not null.
		/// </summary>
		/// <typeparam name="T">Extends System.EventHandler class"/></typeparam>
		/// <param name="event">Extends System.EventHandler class</param>
		/// <param name="sender">The sender of the event</param>
		/// <param name="args">The event arguments associated with this event</param>
		internal static void Raise<T>(this EventHandler<T> @event, object sender, T args)
			where T : EventArgs {
			if (@event == null)
				return;
			@event(sender, args);
		}

		/// <summary>
		/// Decodes a string composed of one or several MIME 'encoded-words'.
		/// </summary>
		/// <param name="words">A string to composed of one or several MIME
		/// 'encoded-words'</param>
		/// <exception cref="FormatException">Thrown when an unknown encoding
		/// (other than Q-Encoding or Base64) is encountered.</exception>
		/// <returns>A concatenation of all enconded-words in the passed
		/// string</returns>
		public static string DecodeWords(string words) {
			MatchCollection matches = Regex.Matches(words,
				@"(=\?[A-Za-z0-9\-_]+\?[BbQq]\?[^\?]+\?=)");
			string decoded = String.Empty;
			foreach (Match m in matches)
				decoded = decoded + DecodeWord(m.ToString());
			return decoded;
		}

		/// <summary>
		/// Decodes a MIME 'encoded-word' string.
		/// </summary>
		/// <param name="word">The encoded word to decode</param>
		/// <exception cref="FormatException">Thrown when an unknown encoding
		/// (other than Q-Encoding or Base64) is encountered.</exception>
		/// <returns>A decoded string</returns>
		/// <remarks>MIME encoded-word syntax is a way to encode strings that
		/// contain non-ASCII data. Commonly used encodings for the encoded-word
		/// sytax are Q-Encoding and Base64. For an in-depth description, refer
		/// to RFC 2047</remarks>
		internal static string DecodeWord(string word) {
			Match m = Regex.Match(word,
					@"=\?([A-Za-z0-9\-_]+)\?([BbQq])\?(.+)\?=");
			if (!m.Success)
				return word;
			Encoding encoding = Util.GetEncoding(m.Groups[1].Value);
			string type = m.Groups[2].Value.ToUpper();
			string text = m.Groups[3].Value;
			switch (type) {
				case "Q":
					return Util.QDecode(text, encoding);
				case "B":
					return encoding.GetString(Util.Base64Decode(text));
				default:
					throw new FormatException("Encoding not recognized " +
						"in encoded word: " + word);
			}
		}

		/// <summary>
		/// Takes a Q-encoded string and decodes it using the specified
		/// encoding.
		/// </summary>
		/// <param name="value">The Q-encoded string to decode</param>
		/// <param name="encoding">The encoding to use for encoding the
		/// returned string</param>
		/// <exception cref="FormatException">Thrown if the string is
		/// not a valid Q-encoded string.</exception>
		/// <returns>A Q-decoded string</returns>
		internal static string QDecode(string value, Encoding encoding) {
			try {
				using (MemoryStream m = new MemoryStream()) {
					for (int i = 0; i < value.Length; i++) {
						if (value[i] == '=') {
							string hex = value.Substring(i + 1, 2);
							m.WriteByte(Convert.ToByte(hex, 16));
							i = i + 2;
						} else if (value[i] == '_') {
							m.WriteByte(Convert.ToByte(' '));
						} else {
							m.WriteByte(Convert.ToByte(value[i]));
						}
					}
					return encoding.GetString(m.ToArray());
				}
			} catch {
				throw new FormatException("value is not a valid Q-encoded " +
					"string");
			}
		}

		/// <summary>
		/// Takes a quoted-printable encoded string and decodes it using
		/// the specified encoding.
		/// </summary>
		/// <param name="value">The quoted-printable-encoded string to
		/// decode</param>
		/// <param name="encoding">The encoding to use for encoding the
		/// returned string</param>
		/// <exception cref="FormatException">Thrown if the string is
		/// not a valid quoted-printable encoded string.</exception>
		/// <returns>A quoted-printable decoded string</returns>
		internal static string QPDecode(string value, Encoding encoding) {
			try {
				using (MemoryStream m = new MemoryStream()) {
					for (int i = 0; i < value.Length; i++) {
						if (value[i] == '=') {
							string hex = value.Substring(i + 1, 2);
							m.WriteByte(Convert.ToByte(hex, 16));
							i = i + 2;
						} else {
							m.WriteByte(Convert.ToByte(value[i]));
						}
					}
					return encoding.GetString(m.ToArray());
				}
			} catch {
				throw new FormatException("value is not a valid quoted-printable " +
					"encoded string");
			}
		}

		/// <summary>
		/// Takes a Base64-encoded string and decodes it.
		/// </summary>
		/// <param name="value">The Base64-encoded string to decode</param>
		/// <returns>A byte array containing the Base64-decoded bytes
		/// of the input string.</returns>
		/// <exception cref="System.ArgumentNullException">Thrown if the
		/// input value is null.</exception>
		/// <exception cref="System.FormatException">The length of value,
		/// ignoring white-space characters, is not zero or a multiple of 4,
		/// or the format of value is invalid. value contains a non-base-64
		/// character, more than two padding characters, or a non-white
		/// space-character among the padding characters.</exception>
		internal static byte[] Base64Decode(string value) {
			return Convert.FromBase64String(value);
		}

		/// <summary>
		/// Takes a UTF-16 encoded string and encodes it as modified
		/// UTF-7.
		/// </summary>
		/// <param name="s">The string to encode.</param>
		/// <returns>A UTF-7 encoded string</returns>
		/// <remarks>IMAP uses a modified version of UTF-7 for encoding
		/// international mailbox names. For details, refer to RFC 3501
		/// section 5.1.3 (Mailbox International Naming
		/// Convention).</remarks>
		internal static string UTF7Encode(string s) {
			StringReader reader = new StringReader(s);
			StringBuilder builder = new StringBuilder();
			while (reader.Peek() != -1) {
				char c = (char)reader.Read();
				int codepoint = Convert.ToInt32(c);
				/* it's a printable ASCII character */
				if (codepoint > 0x1F && codepoint < 0x80) {
					builder.Append(c == '&' ? "&-" : c.ToString());
				} else {
					/* character sequence needs to be encoded */
					StringBuilder sequence = new StringBuilder(c.ToString());
					while (reader.Peek() != -1) {
						codepoint = Convert.ToInt32((char)reader.Peek());
						if (codepoint > 0x1F && codepoint < 0x80)
							break;
						sequence.Append((char)reader.Read());
					}
					byte[] buffer = Encoding.BigEndianUnicode.GetBytes(
						sequence.ToString());
					string encoded = Convert.ToBase64String(buffer).Replace('/', ',').
						TrimEnd('=');
					builder.Append("&" + encoded + "-");
				}
			}
			return builder.ToString();
		}

		/// <summary>
		/// Takes a modified UTF-7 encoded string and decodes it.
		/// </summary>
		/// <param name="s">The UTF-7 encoded string to decode.</param>
		/// <returns>A UTF-16 encoded "standard" C# string</returns>
		/// <exception cref="FormatException">Thrown if the input string is
		/// not a proper UTF-7 encoded string.</exception>
		/// <remarks>IMAP uses a modified version of UTF-7 for encoding
		/// international mailbox names. For details, refer to RFC 3501
		/// section 5.1.3 (Mailbox International Naming
		/// Convention).</remarks>
		internal static string UTF7Decode(string s) {
			StringReader reader = new StringReader(s);
			StringBuilder builder = new StringBuilder();
			while (reader.Peek() != -1) {
				char c = (char)reader.Read();
				if (c == '&' && reader.Peek() != '-') {
					/* character sequence needs to be decoded */
					StringBuilder sequence = new StringBuilder();
					while (reader.Peek() != -1) {
						if ((c = (char)reader.Read()) == '-')
							break;
						sequence.Append(c);
					}
					string encoded = sequence.ToString().Replace(',', '/');
					int pad = encoded.Length % 4;
					if (pad > 0)
						encoded = encoded.PadRight(encoded.Length + (4 - pad), '=');
					try {
						byte[] buffer = Convert.FromBase64String(encoded);
						builder.Append(Encoding.BigEndianUnicode.GetString(buffer));
					} catch (Exception e) {
						throw new FormatException(
							"The input string is not in the correct Format", e);
					}
				} else {
					if (c == '&' && reader.Peek() == '-')
						reader.Read();
					builder.Append(c);
				}
			}
			return builder.ToString();
		}

		/// <summary>
		/// This just wraps Encoding.GetEncoding in a try-catch block to
		/// ensure it never fails. If the encoding can not be determined
		/// ASCII is returned as a default.
		/// </summary>
		/// <param name="name">The code page name of the preferred encoding.
		/// Any value returned by System.Text.Encoding.WebName is a valid
		/// input.</param>
		/// <returns>The System.Text.Encoding associated with the specified
		/// code page or Encoding.ASCII if the specified code page could not
		/// be resolved.</returns>
		internal static Encoding GetEncoding(string name) {
			Encoding encoding;
			try {
				encoding = Encoding.GetEncoding(name);
			} catch {
				encoding = Encoding.ASCII;
			}
			return encoding;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

#region Namespaces
#endregion
using S22.Imap;
using System;
using System.Data.SqlClient;
using System.IO;
using System.Net.Mail;
using System.Linq;

namespace ST_3fdd2b942e254ff7a7c85cd6454b463c
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion
        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            try
            {

                Guid g;
                SqlConnection conn;
                string queryAdd;
                string email;
                int counter;
                string filename = "";

                string[] approved_emails =
                {
                    "andreydruzhinin@eltransplus.ru" 
                };

                SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
                {
                    DataSource = "10.10.0.28",
                    UserID = "phpuser",
                    Password = "gnQCUElU"
                };

                conn = new SqlConnection(connBuilder.ConnectionString);
                conn.Open();

                string query = "INSERT [automation].[dbo].[request_list]([guid],[file_name],[email]) VALUES ";

                using (ImapClient Client = new ImapClient("10.10.0.50", 143, "declaration@eltransplus.ru", "JnKvbEgs"))
                {
                    Client.DefaultMailbox = "INBOX";

                    uint[] uids = Client.Search(SearchCondition.Unseen());
                    MailMessage[] messages = Client.GetMessages(uids);

                    /*
                    foreach (uint uid in uids)
                    {
                        Client.AddMessageFlags(uid, Client.DefaultMailbox, MessageFlag.Seen);
                    }
                    */

                    foreach (MailMessage msg in messages)
                    {
                        email = msg.From.Address;
                        foreach (Attachment attachment in msg.Attachments)
                        {
                            if (attachment.Name.EndsWith(".xlsx") && approved_emails.Contains(email))
                            {
                                byte[] allBytes = new byte[attachment.ContentStream.Length];
                                int bytesRead = attachment.ContentStream.Read(allBytes, 0, (int)attachment.ContentStream.Length);
                                                                
                                if (File.Exists(@"\\10.10.0.28\alta\Robot\Temp\" + attachment.Name))
                                {
                                    counter = 1;
                                    do
                                    {
                                        filename = "(" + counter.ToString() + ")" + attachment.Name;
                                        counter++;
                                    } while (File.Exists(@"\\10.10.0.28\alta\Robot\Temp\" + filename));
                                }
                                else
                                {
                                    filename = attachment.Name;
                                }

                                string destinationFile = @"\\10.10.0.28\alta\Robot\Temp\" + filename;
                                BinaryWriter writer = new BinaryWriter(new FileStream(destinationFile, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None));
                                writer.Write(allBytes);
                                writer.Close();

                                g = Guid.NewGuid();
                                queryAdd = "('" + g.ToString() + "','" + destinationFile + "','" + email + "')";

                                SqlCommand SQL = new SqlCommand(query + queryAdd, conn);
                                SQL.ExecuteNonQuery();
                            }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, "ERROR", e.Message, null, 0);
            }
        }


    }
}]]></ProjectItem>
          <ProjectItem
            Name="MailboxFlags.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// An IMAP mailbox can have a number of flags (read: attributes) set on it,
	/// indicating its designated purpose (such as "Spam" or "Drafts").
	/// 
	/// This is especially convenient if dealing with international mailbox
	/// names, because by examining the associated flags, the mailbox purpose
	/// can be easily determined, even if the mailbox name provides no useful
	/// indication.
	/// </summary>
	/// <remarks>
	/// Unfortunately as with many things IMAP, reporting the flags described
	/// above is an optional extension (XLIST) to the IMAP protocol and as
	/// such may or may not be supported by an IMAP server.
	/// </remarks>
	public enum MailboxFlag {
		/// <summary>
		/// The mailbox presents a view on all messages in the user's message
		/// store.
		/// </summary>
		AllMail,
		/// <summary>
		/// The mailbox is used to archive messages. The meaning of an
		/// "archival" mailbox is server-dependent.
		/// </summary>
		Archive,
		/// <summary>
		/// The mailbox is used to hold draft messages, typically these are
		/// messages that are being composed but have not yet been sent.
		/// </summary>
		Drafts,
		/// <summary>
		/// The mailbox is used to hold copies of messages that have been
		/// sent.  
		/// </summary>
		Sent,
		/// <summary>
		/// The mailbox is where messages deemed to be junk mail (spam) are
		/// held.
		/// </summary>
		Spam,
		/// <summary>
		/// The mailbox is used to hold messages that have been deleted or
		/// marked for deletion.
		/// </summary>
		Trash
	}
}]]></ProjectItem>
          <ProjectItem
            Name="AuthMethod.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Defines supported means of authenticating with the IMAP server.
	/// </summary>
	public enum AuthMethod {
		/// <summary>
		/// Login using plaintext password authentication. This is
		/// the default supported by most servers.
		/// </summary>
		Login,
		/// <summary>
		/// Login using the CRAM-MD5 authentication mechanism.
		/// </summary>
		CRAMMD5,
		/// <summary>
		/// Login using the OAuth authentication mechanism over
		/// the Simple Authentication and Security Layer (Sasl).
		/// </summary>
		SaslOAuth
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ImapClient.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Timers;

namespace S22.Imap {
	/// <summary>
	/// Allows applications to communicate with a mail server by using the
	/// Internet Message Access Protocol (IMAP).
	/// </summary>
	public class ImapClient : IDisposable, IImapClient
	{
		private Stream stream;
		private TcpClient client;
		private readonly object readLock = new object();
		private readonly object writeLock = new object();
		private readonly object sequenceLock = new object();
		private string[] capabilities;
		private int tag = 0;
		private string selectedMailbox;
		private string defaultMailbox = "INBOX";
		private event EventHandler<IdleMessageEventArgs> newMessageEvent;
		private event EventHandler<IdleMessageEventArgs> messageDeleteEvent;
		private bool hasEvents {
			get {
				return newMessageEvent != null || messageDeleteEvent != null;
			}
		}
		private bool idling;
		private Thread idleThread, idleDispatch;
		private int pauseRefCount = 0;
		private SafeQueue<string> idleEvents = new SafeQueue<string>();
		private System.Timers.Timer noopTimer = new System.Timers.Timer();

		/// <summary>
		/// The default mailbox to operate on, when no specific mailbox name was indicated
		/// to methods operating on mailboxes. This property is initially set to "INBOX".
		/// </summary>
		/// <exception cref="ArgumentNullException">The value specified for a set operation is
		/// null.</exception>
		/// <exception cref="ArgumentException">The value specified for a set operation is equal
		/// to String.Empty ("").</exception>
		/// <remarks>This property is initialized to "INBOX"</remarks>
		public string DefaultMailbox {
			get {
				return defaultMailbox;
			}
			set {
				if (value == null)
					throw new ArgumentNullException();
				if (value == String.Empty)
					throw new ArgumentException();
				defaultMailbox = value;
			}
		}

		/// <summary>
		/// Indicates whether the client is authenticated with the server
		/// </summary>
		public bool Authed {
			get;
			private set;
		}

		/// <summary>
		/// This event is raised when a new mail message is received by the server.
		/// </summary>
		/// <remarks>To probe a server for IMAP IDLE support, the <see cref="Supports"/>
		/// method can be used, specifying "IDLE" for the capability parameter.
		/// 
		/// Notice that the event handler will be executed on a threadpool thread.
		/// </remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="NewMessage"]/*'/>
		public event EventHandler<IdleMessageEventArgs> NewMessage {
			add {
				newMessageEvent += value;
				StartIdling();
			}
			remove {
				newMessageEvent -= value;
				if (!hasEvents)
					StopIdling();
			}
		}

		/// <summary>
		/// This event is raised when a message is deleted on the server.
		/// </summary>
		/// <remarks>To probe a server for IMAP IDLE support, the <see cref="Supports"/>
		/// method can be used, specifying "IDLE" for the capability parameter.
		/// 
		/// Notice that the event handler will be executed on a threadpool thread.
		/// </remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="MessageDeleted"]/*'/>
		public event EventHandler<IdleMessageEventArgs> MessageDeleted {
			add {
				messageDeleteEvent += value;
				StartIdling();
			}
			remove {
				messageDeleteEvent -= value;
				if (!hasEvents)
					StopIdling();
			}
		}

		/// <summary>
		/// Initializes a new instance of the ImapClient class and connects to the specified port
		/// on the specified host, optionally using the Secure Socket Layer (SSL) security protocol.
		/// </summary>
		/// <param name="hostname">The DNS name of the server to which you intend to connect.</param>
		/// <param name="port">The port number of the server to which you intend to connect.</param>
		/// <param name="ssl">Set to true to use the Secure Socket Layer (SSL) security protocol.</param>
		/// <param name="validate">Delegate used for verifying the remote Secure Sockets
		/// Layer (SSL) certificate which is used for authentication. Set this to null if not needed</param>
		/// <exception cref="ArgumentOutOfRangeException">The port parameter is not between MinPort
		/// and MaxPort.</exception>
		/// <exception cref="ArgumentNullException">The hostname parameter is null.</exception>
		/// <exception cref="SocketException">An error occurred while accessing the socket used for
		/// establishing the connection to the IMAP server. Use the ErrorCode property to obtain the
		/// specific error code</exception>
		/// <exception cref="System.Security.Authentication.AuthenticationException">An authentication
		/// error occured while trying to establish a secure connection.</exception>
		/// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
		/// from the server upon connecting.</exception>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="ctor-1"]/*'/>
		public ImapClient(string hostname, int port = 143, bool ssl = false,
			RemoteCertificateValidationCallback validate = null) {
			Connect(hostname, port, ssl, validate);
		}

		/// <summary>
		/// Initializes a new instance of the ImapClient class and connects to the specified port on
		/// the specified host, optionally using the Secure Socket Layer (SSL) security protocol and
		/// attempts to authenticate with the server using the specified authentication method and
		/// credentials.
		/// </summary>
		/// <param name="hostname">The DNS name of the server to which you intend to connect.</param>
		/// <param name="port">The port number of the server to which you intend to connect.</param>
		/// <param name="username">The username with which to login in to the IMAP server.</param>
		/// <param name="password">The password with which to log in to the IMAP server.</param>
		/// <param name="method">The requested method of authentication. Can be one of the values
		/// of the AuthMethod enumeration.</param>
		/// <param name="ssl">Set to true to use the Secure Socket Layer (SSL) security protocol.</param>
		/// <param name="validate">Delegate used for verifying the remote Secure Sockets Layer
		/// (SSL) certificate which is used for authentication. Set this to null if not needed</param>
		/// <exception cref="ArgumentOutOfRangeException">The port parameter is not between MinPort
		/// and MaxPort.</exception>
		/// <exception cref="ArgumentNullException">The hostname parameter is null.</exception>
		/// <exception cref="SocketException">An error occurred while accessing the socket used for
		/// establishing the connection to the IMAP server. Use the ErrorCode property to obtain the
		/// specific error code</exception>
		/// <exception cref="System.Security.Authentication.AuthenticationException">An authentication
		/// error occured while trying to establish a secure connection.</exception>
		/// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
		/// from the server upon connecting.</exception> 
		/// <exception cref="InvalidCredentialsException">Thrown if authentication using the
		/// supplied credentials failed.</exception>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="ctor-2"]/*'/>
		public ImapClient(string hostname, int port, string username, string password, AuthMethod method =
			AuthMethod.Login, bool ssl = false, RemoteCertificateValidationCallback validate = null) {
			Connect(hostname, port, ssl, validate);
			Login(username, password, method);
		}

		/// <summary>
		/// Connects to the specified port on the specified host, optionally using the Secure Socket Layer
		/// (SSL) security protocol.
		/// </summary>
		/// <param name="hostname">The DNS name of the server to which you intend to connect.</param>
		/// <param name="port">The port number of the server to which you intend to connect.</param>
		/// <param name="ssl">Set to true to use the Secure Socket Layer (SSL) security protocol.</param>
		/// <param name="validate">Delegate used for verifying the remote Secure Sockets
		/// Layer (SSL) certificate which is used for authentication. Set this to null if not needed</param>
		/// <exception cref="ArgumentOutOfRangeException">The port parameter is not between MinPort
		/// and MaxPort.</exception>
		/// <exception cref="ArgumentNullException">The hostname parameter is null.</exception>
		/// <exception cref="SocketException">An error occurred while accessing the socket used for
		/// establishing the connection to the IMAP server. Use the ErrorCode property to obtain the
		/// specific error code.</exception>
		/// <exception cref="System.Security.Authentication.AuthenticationException">An authentication
		/// error occured while trying to establish a secure connection.</exception>
		/// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
		/// from the server upon connecting.</exception>
		private void Connect(string hostname, int port, bool ssl, RemoteCertificateValidationCallback validate) {
			client = new TcpClient(hostname, port);
			stream = client.GetStream();
			if (ssl) {
				SslStream sslStream = new SslStream(stream, false, validate ??
					((sender, cert, chain, err) => true));
				sslStream.AuthenticateAsClient(hostname);
				stream = sslStream;
			}
			/* Server issues untagged OK greeting upon connect */
			string greeting = GetResponse();
			if (!IsResponseOK(greeting))
				throw new BadServerResponseException(greeting);
		}

		/// <summary>
		/// Determines whether the received response is a valid IMAP OK response.
		/// </summary>
		/// <param name="response">A response string received from the server</param>
		/// <param name="tag">A tag if the response is associated with a command</param>
		/// <returns>True if the response is a valid IMAP OK response, otherwise false
		/// is returned.</returns>
		private bool IsResponseOK(string response, string tag = null) {
			if (tag != null)
				return response.StartsWith(tag + "OK");
			string v = response.Substring(response.IndexOf(' ')).Trim();
			return v.StartsWith("OK");
		}

		/// <summary>
		/// Attempts to establish an authenticated session with the server using the specified
		/// credentials.
		/// </summary>
		/// <param name="username">The username with which to login in to the IMAP server.</param>
		/// <param name="password">The password with which to log in to the IMAP server.</param>
		/// <param name="method">The requested method of authentication. Can be one of the values
		/// of the AuthMethod enumeration.</param>
		/// <exception cref="InvalidCredentialsException">Thrown if authentication using the
		/// supplied credentials failed.</exception>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="Login"]/*'/>
		public void Login(string username, string password, AuthMethod method) {
			string tag = GetTag();
			string response = null;
			switch (method) {
				case AuthMethod.Login:
					response = SendCommandGetResponse(tag + "LOGIN " + username.QuoteString() + " " +
						password.QuoteString());
					break;
				case AuthMethod.CRAMMD5:
					response = SendCommandGetResponse(tag + "AUTHENTICATE CRAM-MD5");
					/* retrieve server key */
					string key = Encoding.Default.GetString(
						Convert.FromBase64String(response.Replace("+ ", "")));
					/* compute the hash */
					using (var kMd5 = new HMACMD5(Encoding.ASCII.GetBytes(password))) {
						byte[] hash1 = kMd5.ComputeHash(Encoding.ASCII.GetBytes(key));
						key = BitConverter.ToString(hash1).ToLower().Replace("-", "");
						string command = Convert.ToBase64String(
							Encoding.ASCII.GetBytes(username + " " + key));
						response = SendCommandGetResponse(command);
					}
					break;
				case AuthMethod.SaslOAuth:
					response = SendCommandGetResponse(tag + "AUTHENTICATE XOAUTH " + password);
					break;
			}
			/* Server may include a CAPABILITY response */
			if (response.StartsWith("* CAPABILITY")) {
				capabilities = response.Substring(13).Trim().Split(' ')
					.Select(s => s.ToUpperInvariant()).ToArray();
				response = GetResponse();
			}
			if (!IsResponseOK(response, tag))
				throw new InvalidCredentialsException(response);
			Authed = true;
		}

		/// <summary>
		/// Logs an authenticated client out of the server. After the logout sequence has
		/// been completed, the server closes the connection with the client.
		/// </summary>
		/// <exception cref="BadServerResponseException">Thrown if an unexpected response is
		/// received from the server during the logout sequence</exception>
		/// <remarks>Calling Logout in a non-authenticated state has no effect</remarks>
		public void Logout() {
			if (!Authed)
				return;
			lock (sequenceLock) {
				StopIdling();
				string tag = GetTag();
				string bye = SendCommandGetResponse(tag + "LOGOUT");
				if (!bye.StartsWith("* BYE"))
					throw new BadServerResponseException(bye);
				string response = GetResponse();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				Authed = false;
			}
		}

		/// <summary>
		/// Generates a unique identifier to prefix a command with, as is
		/// required by the IMAP protocol.
		/// </summary>
		/// <returns>A unique identifier string</returns>
		private string GetTag() {
			Interlocked.Increment(ref tag);
			return string.Format("xm{0:000} ", tag);
		}

		/// <summary>
		/// Sends a command string to the server. This method blocks until the command has
		/// been transmitted.
		/// </summary>
		/// <param name="command">Command string to be sent to the server. The command string is
		/// suffixed by CRLF (as is required by the IMAP protocol) prior to sending.</param>
		private void SendCommand(string command) {
			// We can safely use UTF-8 here since it's backwards compatible with ASCII
			// and comes in handy when sending strings in literal form
			// (see RFC 3501, 4.3).
			byte[] bytes = Encoding.UTF8.GetBytes(command + "\r\n");
			lock (writeLock) {
				stream.Write(bytes, 0, bytes.Length);
			}
		}

		/// <summary>
		/// Sends a command string to the server and subsequently waits for a response, which is
		/// then returned to the caller. This method blocks until the server response has been
		/// received.
		/// </summary>
		/// <param name="command">Command string to be sent to the server. The command string is
		/// suffixed by CRLF (as is required by the IMAP protocol) prior to sending.</param>
		/// <param name="resolveLiterals">Set to true to resolve possible literals
		/// returned by the server (Refer to RFC 3501 Section 4.3 for details).</param>
		/// <returns>The response received by the server.</returns>
		private string SendCommandGetResponse(string command, bool resolveLiterals = true) {
			lock (readLock) {
				lock (writeLock) {
					SendCommand(command);
				}
				return GetResponse(resolveLiterals);
			}
		}

		/// <summary>
		/// Waits for a response from the server. This method blocks
		/// until a response has been received.
		/// </summary>
		/// <param name="resolveLiterals">Set to true to resolve possible literals
		/// returned by the server (Refer to RFC 3501 Section 4.3 for details).</param>
		/// <returns>A response string from the server</returns>
		private string GetResponse(bool resolveLiterals = true) {
			const int Newline = 10, CarriageReturn = 13;
			using (var mem = new MemoryStream()) {
				lock (readLock) {
					while (true) {
						byte b = (byte)stream.ReadByte();
						if (b == CarriageReturn)
							continue;
						if (b == Newline) {
							string s = Encoding.ASCII.GetString(mem.ToArray());
							if (resolveLiterals) {
								s = Regex.Replace(s, @"{(\d+)}$", m => {
									return "\"" + GetData(Convert.ToInt32(m.Groups[1].Value)) +
										"\"" + GetResponse(false);
								});
							}
							return s;
						} else
							mem.WriteByte(b);
					}
				}
			}
		}

		/// <summary>
		/// Reads the specified amount of bytes from the server. This
		/// method blocks until the specified amount of bytes has been
		/// read from the network stream.
		/// </summary>
		/// <param name="byteCount">The number of bytes to read</param>
		/// <returns>The read number of bytes as an ASCII-encoded string</returns>
		private string GetData(int byteCount) {
			byte[] buffer = new byte[4096];
			using (var mem = new MemoryStream()) {
				lock (readLock) {
					while (byteCount > 0) {
						int request = byteCount > buffer.Length ?
							buffer.Length : byteCount;
						int read = stream.Read(buffer, 0, request);
						mem.Write(buffer, 0, read);
						byteCount = byteCount - read;
					}
				}
				return Encoding.ASCII.GetString(mem.ToArray());
			}
		}

		/// <summary>
		/// Returns a listing of capabilities that the IMAP server supports. All strings
		/// in the returned array are guaranteed to be upper-case.
		/// </summary>
		/// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
		/// from the server during the request. The message property of the exception contains the
		/// error message returned by the server.</exception>
		/// <returns>A listing of supported capabilities as an array of strings</returns>
		/// <remarks>This is one of the few methods which can be called in a non-authenticated
		/// state.</remarks>
		public string[] Capabilities() {
			if (capabilities != null)
				return capabilities;
			lock (sequenceLock) {
				PauseIdling();
				string tag = GetTag();
				string command = tag + "CAPABILITY";
				string response = SendCommandGetResponse(command);
				/* Server is required to issue untagged capability response */
				if (response.StartsWith("* CAPABILITY "))
					response = response.Substring(13);
				capabilities = response.Trim().Split(' ')
					.Select(s => s.ToUpperInvariant()).ToArray();
				/* should return OK */
				response = GetResponse();
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return capabilities;
			}
		}

		/// <summary>
		/// Returns whether the specified capability is supported by the server.
		/// </summary>
		/// <param name="capability">The capability to probe for (for example "IDLE")</param>
		/// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
		/// from the server during the request. The message property of the exception contains
		/// the error message returned by the server.</exception>
		/// <returns>Returns true if the specified capability is supported by the server, 
		/// otherwise false is returned.</returns>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="ctor-2"]/*'/>
		public bool Supports(string capability) {
			return (capabilities ?? Capabilities()).Contains(capability.ToUpper());
		}

		/// <summary>
		/// Changes the name of a mailbox.
		/// </summary>
		/// <param name="mailbox">The mailbox to rename.</param>
		/// <param name="newName">The new name the mailbox will be renamed to.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mailbox could
		/// not be renamed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		public void RenameMailbox(string mailbox, string newName) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "RENAME " +
					Util.UTF7Encode(mailbox).QuoteString() + " " +
					Util.UTF7Encode(newName).QuoteString());
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Permanently removes a mailbox.
		/// </summary>
		/// <param name="mailbox">Name of the mailbox to remove.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mailbox could
		/// not be removed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		public void DeleteMailbox(string mailbox) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "DELETE " +
					Util.UTF7Encode(mailbox).QuoteString());
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Creates a new mailbox with the given name.
		/// </summary>
		/// <param name="mailbox">Name of the mailbox to create.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mailbox could
		/// not be created. The message property of the exception contains the error message
		/// returned by the server.</exception>
		public void CreateMailbox(string mailbox) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "CREATE " +
					Util.UTF7Encode(mailbox).QuoteString());
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Selects a mailbox so that messages in the mailbox can be accessed.
		/// </summary>
		/// <param name="mailbox">The mailbox to select. If this parameter is null, the
		/// default mailbox is selected.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mailbox could
		/// not be selected. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <remarks>IMAP Idle must be paused or stopped before calling this method.</remarks>
		private void SelectMailbox(string mailbox) {
			if (!Authed)
				throw new NotAuthenticatedException();
			if (mailbox == null)
				mailbox = defaultMailbox;
			/* requested mailbox is already selected */
			if (selectedMailbox == mailbox)
				return;
			lock (sequenceLock) {
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "SELECT " +
					Util.UTF7Encode(mailbox).QuoteString());
				// Fixme: evaluate untagged data?
				while (response.StartsWith("*"))
					response = GetResponse();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				selectedMailbox = mailbox;
			}
		}

		/// <summary>
		/// Retrieves a list of all available and selectable mailboxes on the server.
		/// </summary>
		/// <returns>A list of all available and selectable mailboxes</returns>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if a list of mailboxes
		/// could not be retrieved. The message property of the exception contains the
		/// error message returned by the server.</exception>
		/// <remarks>The mailbox INBOX is a special name reserved to mean "the
		/// primary mailbox for this user on this server"</remarks>
		public string[] ListMailboxes() {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				List<string> mailboxes = new List<string>();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "LIST \"\" \"*\"");
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response,
						"\\* LIST \\((.*)\\)\\s+\"([^\"]+)\"\\s+(.+)");
					if (m.Success) {
						string[] attr = m.Groups[1].Value.Split(' ');
						bool add = true;
						foreach (string a in attr) {
							/* Only list selectable mailboxes */
							if (a.ToLower() == @"\noselect")
								add = false;
						}
						// Names _should_ be enclosed in double-quotes but not all servers
						// follow through with this, so we don't enforce it in the above regex.
						string name = Regex.Replace(m.Groups[3].Value, "^\"(.+)\"$", "$1");
						try {
							name = Util.UTF7Decode(name);
						} catch {
							// Include the unaltered string in the result if UTF-7 decoding
							// failed for any reason.
						}
						if (add)
							mailboxes.Add(name);
					}
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return mailboxes.ToArray();
			}
		}

		/// <summary>
		/// Permanently removes all messages that have the \Deleted flag set from the
		/// specified mailbox.
		/// </summary>
		/// <param name="mailbox">The mailbox to remove all messages from that have the
		/// \Deleted flag set. If this parameter is omitted, the value of the DefaultMailbox
		/// property is used to determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the expunge operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <seealso cref="DeleteMessage"/>
		public void Expunge(string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "EXPUNGE");
				/* Server is required to send an untagged response for each message that is
				 * deleted before sending OK */
				while (response.StartsWith("*"))
					response = GetResponse();
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Retrieves status information (total number of messages, various attributes
		/// as well as quota information) for the specified mailbox.</summary>
		/// <param name="mailbox">The mailbox to retrieve status information for. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <returns>A MailboxInfo object containing status information for the
		/// mailbox.</returns>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <remarks>Not all IMAP servers support the retrieval of quota information. If
		/// it is not possible to retrieve this information, the UsedStorage and FreeStorage
		/// properties of the returned MailboxStatus instance are set to 0.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMailboxInfo"]/*'/>
		public MailboxInfo GetMailboxInfo(string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			// this is not a cheap method to call, it involves a couple of round-trips
			// to the server.
			lock (sequenceLock) {
				PauseIdling();
				if (mailbox == null)
					mailbox = defaultMailbox;
				MailboxStatus status = GetMailboxStatus(mailbox);

				/* Collect quota information if the server supports it */
				UInt64 Used = 0, Free = 0;
				if (Supports("QUOTA")) {
					MailboxQuota[] Quotas = GetQuota(mailbox);
					foreach (MailboxQuota Q in Quotas) {
						if (Q.ResourceName == "STORAGE") {
							Used = Q.Usage;
							Free = Q.Limit - Q.Usage;
						}
					}
				}
				/* Try to collect special-use flags */
				MailboxFlag[] flags = GetMailboxFlags(mailbox);

				return new MailboxInfo(mailbox, flags, status.Messages,
					status.Unread, status.NextUID, Used, Free);
			}
		}

		/// <summary>
		/// Retrieves the set of special-use flags associated with the specified
		/// mailbox.
		/// </summary>
		/// <param name="mailbox">The mailbox to receive the special-use flags for.
		/// If this parameter is omitted, the value of the DefaultMailbox property
		/// is used to determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the operation could
		/// not be completed. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <returns>An array containing the special-use flags set on the
		/// mailbox.</returns>
		/// <remarks>This feature is an optional extension to the IMAP protocol and as
		/// such some servers may not report any flags at all.</remarks>
		private MailboxFlag[] GetMailboxFlags(string mailbox = null) {
			Dictionary<string, MailboxFlag> dictFlags =
				new Dictionary<string, MailboxFlag>(StringComparer.OrdinalIgnoreCase) {
				{ @"\All", MailboxFlag.AllMail },	{ @"\AllMail", MailboxFlag.AllMail },
				{ @"\Archive", MailboxFlag.Archive }, { @"\Drafts", MailboxFlag.Drafts },
				{ @"\Junk", MailboxFlag.Spam },	{ @"\Spam", MailboxFlag.Spam },
				{ @"\Trash", MailboxFlag.Trash },	{ @"\Rubbish", MailboxFlag.Trash },
				{ @"\Sent", MailboxFlag.Sent },	{ @"\SentItems", MailboxFlag.Sent }
			};
			List<MailboxFlag> list = new List<MailboxFlag>();
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				if (mailbox == null)
					mailbox = defaultMailbox;
				string tag = GetTag();
				// Use XLIST if server supports it, otherwise at least try LIST and
				// hope server implements the "LIST Extension for Special-Use Mailboxes"
				// (Refer to RFC6154).
				string command = Supports("XLIST") ? "XLIST" : "LIST";
				string response = SendCommandGetResponse(tag + command + " \"\" " +
					Util.UTF7Encode(mailbox).QuoteString());
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response,
						"\\* X?LIST \\((.*)\\)\\s+\"([^\"]+)\"\\s+(.+)");
					if (m.Success) {
						string[] flags = m.Groups[1].Value.Split(' ');
						foreach (string f in flags) {
							if (dictFlags.ContainsKey(f))
								list.Add(dictFlags[f]);
						}
					}
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
			return list.ToArray();
		}

		/// <summary>
		/// Retrieves status information (total number of messages, number of unread
		/// messages, etc.) for the specified mailbox.</summary>
		/// <param name="mailbox">The mailbox to retrieve status information for. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <returns>A MailboxStatus object containing status information for the
		/// mailbox.</returns>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		private MailboxStatus GetMailboxStatus(string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			int messages = 0, unread = 0;
			uint uid = 0;
			lock (sequenceLock) {
				PauseIdling();
				if (mailbox == null)
					mailbox = defaultMailbox;
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "STATUS " +
					Util.UTF7Encode(mailbox).QuoteString() + " (MESSAGES UNSEEN UIDNEXT)");
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"\* STATUS.*MESSAGES (\d+)");
					if (m.Success)
						messages = Convert.ToInt32(m.Groups[1].Value);
					m = Regex.Match(response, @"\* STATUS.*UNSEEN (\d+)");
					if (m.Success)
						unread = Convert.ToInt32(m.Groups[1].Value);
					m = Regex.Match(response, @"\* STATUS.*UIDNEXT (\d+)");
					if (m.Success)
						uid = Convert.ToUInt32(m.Groups[1].Value);
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
			return new MailboxStatus(messages, unread, uid);
		}

		/// <summary>
		/// Searches the specified mailbox for messages that match the given
		/// searching criteria.
		/// </summary>
		/// <param name="criteria">A search criteria expression. Only messages
		/// that match this expression will be included in the result set returned
		/// by this method.</param>
		/// <param name="mailbox">The mailbox that will be searched. If this parameter is
		/// omitted, the value of the DefaultMailbox property is used to determine the mailbox
		/// to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the search could
		/// not be completed. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <exception cref="NotSupportedException">Thrown if the search values
		/// contain characters beyond the ASCII range and the server does not support
		/// handling such strings.</exception>
		/// <returns>An array of unique identifier (UID) message attributes which
		/// can be used with the GetMessage family of methods to download mail
		/// messages.</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="Search"]/*'/>
		public uint[] Search(SearchCondition criteria, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag(), str = criteria.ToString();
				StringReader reader = new StringReader(str);
				bool useUTF8 = str.Contains("\r\n");
				string line = reader.ReadLine();
				string response = SendCommandGetResponse(tag + "UID SEARCH " +
					(useUTF8 ? "CHARSET UTF-8 " : "") + line);
				// If our search string consists of multiple lines, we're sending some
				// strings in literal form and need to issue continuation requests.
				while ((line = reader.ReadLine()) != null) {
					if (!response.StartsWith("+")) {
						ResumeIdling();
						throw new NotSupportedException("Please restrict your search " +
							"to ASCII-only characters", new BadServerResponseException(response));
					}
					response = SendCommandGetResponse(line);
				}
				List<uint> result = new List<uint>();
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"^\* SEARCH (.+)");
					if (m.Success) {
						string[] v = m.Groups[1].Value.Trim().Split(' ');
						foreach (string s in v) {
							try {
								result.Add(Convert.ToUInt32(s));
							} catch(FormatException) { }
						}
					}
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return result.ToArray();
			}
		}

		/// <summary>
		/// Retrieves a mail message by its unique identifier message attribute.
		/// </summary>
		/// <param name="uid">The unique identifier of the mail message to retrieve</param>
		/// <param name="seen">Set this to true to set the \Seen flag for this message
		/// on the server.</param>
		/// <param name="mailbox">The mailbox the message will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An initialized instance of the MailMessage class representing the
		/// fetched mail message</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessage-1"]/*'/>
		public MailMessage GetMessage(uint uid, bool seen = true, string mailbox = null) {
			return GetMessage(uid, FetchOptions.Normal, seen, mailbox);
		}
	
		/// <summary>
		/// Retrieves a mail message by its unique identifier message attribute with the
		/// specified fetch option.
		/// </summary>
		/// <param name="uid">The unique identifier of the mail message to retrieve</param>
		/// <param name="options">A value from the FetchOptions enumeration which allows
		/// for fetching selective parts of a mail message.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for this message
		/// on the server.</param>
		/// <param name="mailbox">The mailbox the message will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An initialized instance of the MailMessage class representing the
		/// fetched mail message</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.
		/// <para>If you need more fine-grained control over which parts of a mail
		/// message to fetch, consider using one of the overloaded GetMessage methods.
		/// </para>
		/// </remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessage-2"]/*'/>
		public MailMessage GetMessage(uint uid, FetchOptions options,
			bool seen = true, string mailbox = null) {
			switch (options) {
				case FetchOptions.HeadersOnly:
					return MessageBuilder.FromHeader(GetMailHeader(uid, seen, mailbox));
				case FetchOptions.NoAttachments:
					return GetMessage(uid, p => { return p.Disposition.Type !=
						ContentDispositionType.Attachment; }, seen, mailbox);
				case FetchOptions.TextOnly:
					return GetMessage(uid, p => { return p.Type == ContentType.Text; },
						seen, mailbox);
				default:
					return MessageBuilder.FromMIME822(GetMessageData(uid, seen, mailbox));
			}
		}

		/// <summary>
		/// Retrieves a mail message by its unique identifier message attribute providing
		/// fine-grained control over which message parts to retrieve.
		/// </summary>
		/// <param name="uid">The unique identifier of the mail message to retrieve</param>
		/// <param name="callback">A delegate which will be invoked for every MIME body
		/// part of the mail message to determine whether it should be fetched from the
		/// server or skipped.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for this message
		/// on the server.</param>
		/// <param name="mailbox">The mailbox the message will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An initialized instance of the MailMessage class representing the
		/// fetched mail message</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessage-3"]/*'/>
		public MailMessage GetMessage(uint uid, ExaminePartDelegate callback,
			bool seen = true, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string header = GetMailHeader(uid, seen, mailbox);
				MailMessage message = MessageBuilder.FromHeader(header);
				string structure = GetBodystructure(uid, mailbox);
				try {
					Bodypart[] parts = Bodystructure.Parse(structure);
					foreach (Bodypart part in parts) {
						/* Let delegate decide if part should be fetched or not */
						if (callback(part) == true) {
							string content = GetBodypart(uid, part.PartNumber, seen, mailbox);
							message.AddBodypart(part, content);
						}
					}
				} catch (FormatException) {
					throw new BadServerResponseException("Server returned erroneous " +
						"body structure:" + structure);
				}
				ResumeIdling();
				return message;
			}
		}

		/// <summary>
		/// Retrieves a set of mail messages by their unique identifier message attributes.
		/// </summary>
		/// <param name="uids">An array of unique identifiers of the mail messages to
		/// retrieve</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the fetched
		/// messages on the server.</param>
		/// <param name="mailbox">The mailbox the messages will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail messages could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An array of initialized instances of the MailMessage class representing
		/// the fetched mail messages</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessages-1"]/*'/>
		public MailMessage[] GetMessages(uint[] uids, bool seen = true, string mailbox = null) {
			return GetMessages(uids, FetchOptions.Normal, seen, mailbox);
		}

		/// <summary>
		/// Retrieves a set of mail messages by their unique identifier message attributes
		/// providing fine-grained control over which message parts to retrieve of each
		/// respective message.
		/// </summary>
		/// <param name="uids">An array of unique identifiers of the mail messages to
		/// retrieve</param>
		/// <param name="callback">A delegate which will be invoked for every MIME body
		/// part of a mail message to determine whether it should be fetched from the
		/// server or skipped.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the fetched
		/// messages on the server.</param>
		/// <param name="mailbox">The mailbox the messages will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail messages could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An array of initialized instances of the MailMessage class representing
		/// the fetched mail messages</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessages-3"]/*'/>
		public MailMessage[] GetMessages(uint[] uids, ExaminePartDelegate callback,
			bool seen = true, string mailbox = null) {
			List<MailMessage> list = new List<MailMessage>();
			foreach (uint uid in uids)
				list.Add(GetMessage(uid, callback, seen, mailbox));
			return list.ToArray();
		}

		/// <summary>
		/// Retrieves a set of mail messages by their unique identifier message attributes
		/// with the specified fetch option.
		/// </summary>
		/// <param name="uids">An array of unique identifiers of the mail messages to
		/// retrieve</param>
		/// <param name="options">A value from the FetchOptions enumeration which allows
		/// for fetching selective parts of a mail message.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the fetched
		/// messages on the server.</param>
		/// <param name="mailbox">The mailbox the messages will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail messages could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An array of initialized instances of the MailMessage class representing
		/// the fetched mail messages</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessages-2"]/*'/>
		public MailMessage[] GetMessages(uint[] uids, FetchOptions options,
			bool seen = true, string mailbox = null) {
				List<MailMessage> list = new List<MailMessage>();
				foreach (uint uid in uids)
					list.Add(GetMessage(uid, options, seen, mailbox));
				return list.ToArray();
		}

		/// <summary>
		/// Stores the specified mail message on the IMAP server.
		/// </summary>
		/// <param name="message">The mail message to store on the server.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the message
		/// on the server.</param>
		/// <param name="mailbox">The mailbox the message will be stored in. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to store the message in.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be stored. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>The unique identifier (UID) of the stored message.</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <seealso cref="StoreMessages"/>
		/// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="StoreMessage"]/*'/>
		public uint StoreMessage(MailMessage message, bool seen = false, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			string mime822 = message.ToMIME822();
			lock (sequenceLock) {
				PauseIdling();
				if (mailbox == null)
					mailbox = defaultMailbox;
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "APPEND " +
					Util.UTF7Encode(mailbox).QuoteString() + (seen ? @" (\Seen)" : "") +
					" {" + mime822.Length + "}");
				/* Server is required to send a continuation response to signal
				 * we can go ahead with the actual message data */
				if (!response.StartsWith("+"))
					throw new BadServerResponseException(response);
				response = SendCommandGetResponse(mime822);
				while (response.StartsWith("*"))
					response = GetResponse(); 
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return GetHighestUID(mailbox);
			}
		}

		/// <summary>
		/// Stores the specified mail messages on the IMAP server.
		/// </summary>
		/// <param name="messages">An array of mail messages to store on the server.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for each message
		/// on the server.</param>
		/// <param name="mailbox">The mailbox the messages will be stored in. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to store the messages in.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail messages could
		/// not be stored. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>An array containing the unique identifiers (UID) of the stored
		/// messages.</returns>
		/// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
		/// message which uniquely identifies the message within a mailbox. No two
		/// messages in a mailbox share the the same UID.</remarks>
		/// <seealso cref="StoreMessage"/>
		public uint[] StoreMessages(MailMessage[] messages, bool seen = false,
			string mailbox = null) {
			List<uint> list = new List<uint>();
			foreach (MailMessage m in messages)
				list.Add(StoreMessage(m, seen, mailbox));
			return list.ToArray();
		}

		/// <summary>
		/// Retrieves the mail header for a mail message and returns it as a string.
		/// </summary>
		/// <param name="uid">The UID of the mail message to retrieve the mail
		/// headers for.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the fetched
		/// messages on the server.</param>
		/// <param name="mailbox">The mailbox the messages will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail header could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>A string containing the raw mail header of the mail message with the
		/// specified UID.</returns>
		private string GetMailHeader(uint uid, bool seen = true, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				StringBuilder builder = new StringBuilder();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID FETCH " + uid + " (BODY" +
					(seen ? null : ".PEEK") + "[HEADER])", false);
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"\* \d+ FETCH .* {(\d+)}");
					if (m.Success) {
						int size = Convert.ToInt32(m.Groups[1].Value);
						builder.Append(GetData(size));
						response = GetResponse();
						if (!Regex.IsMatch(response, @"\)\s*$"))
							throw new BadServerResponseException(response);
					}
					response = GetResponse(false);
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return builder.ToString();
			}
		}

		/// <summary>
		/// Retrieves the body structure for a mail message and returns it as a string.
		/// </summary>
		/// <param name="uid">The UID of the mail message to retrieve the body structure
		/// for.</param>
		/// <param name="mailbox">The mailbox the messages will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the body structure could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>A string containing the raw body structure of the mail message with the
		/// specified UID.</returns>
		/// <remarks>A body structure is a textual description of the layout of a mail message.
		/// It is described in some detail in RFC 3501 under 7.4.2 FETCH response.</remarks>
		private string GetBodystructure(uint uid, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID FETCH " + uid +
					" (BODYSTRUCTURE)");
				string structure = String.Empty;
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response,
						@"FETCH \(.*BODYSTRUCTURE \((.*)\).*\)", RegexOptions.IgnoreCase);
					if (m.Success)
						structure = m.Groups[1].Value;
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return structure;
			}
		}

		/// <summary>
		/// Retrieves the MIME body part of a multipart message with the specified
		/// part number.
		/// </summary>
		/// <param name="uid">The UID of the mail message to retrieve a MIME body part
		/// from.</param>
		/// <param name="partNumber">The part number of the body part to fetch as
		/// is expected by the IMAP server.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the fetched
		/// messages on the server.</param>
		/// <param name="mailbox">The mailbox the messages will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the body part could
		/// not be fetched. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <returns>A string containing the downloaded body part of the mail message
		/// with the specified UID.</returns>
		private string GetBodypart(uint uid, string partNumber, bool seen = true,
			string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				StringBuilder builder = new StringBuilder();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID FETCH " + uid +
					" (BODY" + (seen ? null : ".PEEK") + "[" + partNumber + "])", false);
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"\* \d+ FETCH .* {(\d+)}");
					if (m.Success) {
						int size = Convert.ToInt32(m.Groups[1].Value);
						builder.Append(GetData(size));
						response = GetResponse();
						if (!Regex.IsMatch(response, @"\)\s*$"))
							throw new BadServerResponseException(response);
					}
					response = GetResponse(false);
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return builder.ToString();
			}
		}

		/// <summary>
		/// Retrieves the raw MIME/RFC822 mail message data for the mail message with
		/// the specified UID.
		/// </summary>
		/// <param name="uid">The UID of the mail message to retrieve as a MIME/RFC822
		/// string.</param>
		/// <param name="seen">Set this to true to set the \Seen flag for the fetched
		/// messages on the server.</param>
		/// <param name="mailbox">The mailbox the message will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message data
		/// could not be fetched. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <returns>A string containing the raw MIME/RFC822 data of the mail message
		/// with the specified UID.</returns>
		private string GetMessageData(uint uid, bool seen = true, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				StringBuilder builder = new StringBuilder();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID FETCH " + uid +
					" (BODY" + (seen ? null : ".PEEK") + "[])", false);
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"\* \d+ FETCH .* {(\d+)}");
					if (m.Success) {
						int size = Convert.ToInt32(m.Groups[1].Value);
						builder.Append(GetData(size));
						response = GetResponse();
						if (!Regex.IsMatch(response, @"\)\s*$"))
							throw new BadServerResponseException(response);
					}
					response = GetResponse(false);
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return builder.ToString();
			}
		}

		/// <summary>
		/// Retrieves the highest UID in the mailbox.
		/// </summary>
		/// <param name="mailbox">The mailbox to find the highest UID for. If
		/// this parameter is null, the value of the DefaultMailbox property is
		/// used to determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the UID could
		/// not be determined. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <returns>The highest unique identifier value (UID) in the mailbox</returns>
		/// <remarks>The highest UID usually corresponds to the newest message in a
		/// mailbox.</remarks>
		private uint GetHighestUID(string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "STATUS " +
					Util.UTF7Encode(selectedMailbox).QuoteString() + " (UIDNEXT)");
				uint nextUID = 0;
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"\* STATUS.*UIDNEXT (\d+)");
					if (m.Success)
						nextUID = Convert.ToUInt32(m.Groups[1].Value);
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return (nextUID - 1);
			}
		}

		/// <summary>
		/// Copies a mail message with the specified UID to the specified destination
		/// mailbox.
		/// </summary>
		/// <param name="uid">The UID of the mail message that is to be copied.</param>
		/// <param name="destination">The name of the mailbox to copy the message
		/// into.</param>
		/// <param name="mailbox">The mailbox the message will be copied from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be copied to the specified destination. The message property of the
		/// exception contains the error message returned by the server.</exception>
		/// <seealso cref="MoveMessage"/>
		public void CopyMessage(uint uid, string destination, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID COPY " + uid + " "
					+ destination.QuoteString());
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Moves a mail message with the specified UID to the specified destination
		/// mailbox.
		/// </summary>
		/// <param name="uid">The UID of the mail message that is to be moved.</param>
		/// <param name="destination">The name of the mailbox to move the message
		/// into.</param>
		/// <param name="mailbox">The mailbox the message will be moved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be moved into the specified destination. The message property of the
		/// exception contains the error message returned by the server.</exception>
		/// <seealso cref="CopyMessage"/>
		/// <seealso cref="DeleteMessage"/>
		public void MoveMessage(uint uid, string destination, string mailbox = null) {
			CopyMessage(uid, destination, mailbox);
			DeleteMessage(uid, mailbox);
		}

		/// <summary>
		/// Deletes the mail message with the specified UID.
		/// </summary>
		/// <param name="uid">The UID of the mail message that is to be deleted.</param>
		/// <param name="mailbox">The mailbox the message will be deleted from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message could
		/// not be deleted. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <seealso cref="MoveMessage"/>
		public void DeleteMessage(uint uid, string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID STORE " + uid +
					@" +FLAGS.SILENT (\Deleted \Seen)");
				while (response.StartsWith("*")) {
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Retrieves the IMAP message flag attributes for a mail message.
		/// </summary>
		/// <param name="uid">The UID of the mail message to retrieve the flag
		/// attributes for.</param>
		/// <param name="mailbox">The mailbox the message will be retrieved from. If this
		/// parameter is omitted, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message flags
		/// could not be retrieved. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <returns>A list of IMAP flags set for the message with the matching UID.</returns>
		/// <seealso cref="SetMessageFlags"/>
		/// <seealso cref="AddMessageFlags"/>
		/// <seealso cref="RemoveMessageFlags"/>
		public MessageFlag[] GetMessageFlags(uint uid, string mailbox = null) {
			Dictionary<string, MessageFlag> messageFlagsMapping =
			new Dictionary<string, MessageFlag>(StringComparer.OrdinalIgnoreCase) {
				{ @"\Seen", MessageFlag.Seen },
				{ @"\Answered", MessageFlag.Answered },
				{ @"\Flagged", MessageFlag.Flagged },
				{ @"\Deleted", MessageFlag.Deleted },
				{ @"\Draft", MessageFlag.Draft },
				{ @"\Recent",	MessageFlag.Recent }
			};
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID FETCH " + uid +
					" (FLAGS)");
				List<MessageFlag> flags = new List<MessageFlag>();
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response, @"FLAGS \(([\w\s\\]*)\)");
					if (m.Success) {
						string[] setFlags = m.Groups[1].Value.Split(' ');
						foreach (string flag in setFlags) {
							if (messageFlagsMapping.ContainsKey(flag))
								flags.Add(messageFlagsMapping[flag]);
						}
					}
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return flags.ToArray();
			}
		}

		/// <summary>
		/// Sets the IMAP message flag attributes for a mail message.
		/// </summary>
		/// <param name="uid">The UID of the mail message to set the flag
		/// attributes for.</param>
		/// <param name="mailbox">The mailbox that contains the mail message. If this
		/// parameter is null, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <param name="flags">One or multiple message flags from the MessageFlag 
		/// enumeration.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message flags
		/// could not be set. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <remarks>This method replaces the current flag attributes of the message
		/// with the specified new flags. If you wish to retain the old attributes, use
		/// the <see cref="AddMessageFlags"/> method instead.</remarks>
		/// <seealso cref="GetMessageFlags"/>
		/// <seealso cref="AddMessageFlags"/>
		/// <seealso cref="RemoveMessageFlags"/>
		public void SetMessageFlags(uint uid, string mailbox, params MessageFlag[] flags) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string flagsString = "";
				foreach (MessageFlag f in flags)
					flagsString = flagsString + @"\" + f + " ";
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID STORE " + uid +
					@" FLAGS.SILENT (" + flagsString.Trim() + ")");
				while (response.StartsWith("*")) {
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Adds the specified set of IMAP message flags to the existing flag attributes
		/// of a mail message.
		/// </summary>
		/// <param name="uid">The UID of the mail message to add the flag
		/// attributes to.</param>
		/// <param name="mailbox">The mailbox that contains the mail message. If this
		/// parameter is null, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <param name="flags">One or multiple message flags from the MessageFlag 
		/// enumeration.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message flags
		/// could not be added. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <remarks>This method adds the specified set of flags to the existing set of
		/// flag attributes of the message. If you wish to replace the old attributes, use
		/// the <see cref="SetMessageFlags"/> method instead.</remarks>
		/// <seealso cref="GetMessageFlags"/>
		/// <seealso cref="SetMessageFlags"/>
		/// <seealso cref="RemoveMessageFlags"/>
		public void AddMessageFlags(uint uid, string mailbox, params MessageFlag[] flags) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string flagsString = "";
				foreach (MessageFlag f in flags)
					flagsString = flagsString + @"\" + f + " ";
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID STORE " + uid +
					@" +FLAGS.SILENT (" + flagsString.Trim() + ")");
				while (response.StartsWith("*")) {
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Removes the specified set of IMAP message flags from the existing flag
		/// attributes of a mail message.
		/// </summary>
		/// <param name="uid">The UID of the mail message to remove the flag
		/// attributes to.</param>
		/// <param name="mailbox">The mailbox that contains the mail message. If this
		/// parameter is null, the value of the DefaultMailbox property is used to
		/// determine the mailbox to operate on.</param>
		/// <param name="flags">One or multiple message flags from the MessageFlag 
		/// enumeration.</param>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the mail message flags
		/// could not be removed. The message property of the exception contains the error
		/// message returned by the server.</exception>
		/// <remarks>This method removes the specified set of flags from the existing set of
		/// flag attributes of the message. If you wish to replace the old attributes, use
		/// the <see cref="SetMessageFlags"/> method instead.</remarks>
		/// <seealso cref="GetMessageFlags"/>
		/// <seealso cref="SetMessageFlags"/>
		/// <seealso cref="AddMessageFlags"/>
		public void RemoveMessageFlags(uint uid, string mailbox, params MessageFlag[] flags) {
			if (!Authed)
				throw new NotAuthenticatedException();
			lock (sequenceLock) {
				PauseIdling();
				SelectMailbox(mailbox);
				string flagsString = "";
				foreach (MessageFlag f in flags)
					flagsString = flagsString + @"\" + f + " ";
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "UID STORE " + uid +
					@" -FLAGS.SILENT (" + flagsString.Trim() + ")");
				while (response.StartsWith("*")) {
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Starts receiving of IMAP IDLE notifications from the IMAP server.
		/// </summary>
		/// <exception cref="InvalidOperationException">Thrown if the server does
		/// not support the IMAP4 IDLE command.</exception>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the IDLE operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <exception cref="ApplicationException">Thrown if an unexpected program condition
		/// occured.</exception>
		/// <remarks>Calling this method when already receiving idle notifications
		/// has no effect.</remarks>
		/// <seealso cref="StopIdling"/>
		/// <seealso cref="PauseIdling"/>
		/// <seealso cref="ResumeIdling"/>
		private void StartIdling() {
			if (idling)
				return;
			if (!Supports("IDLE"))
				throw new InvalidOperationException("The server does not support the " +
					"IMAP4 IDLE command");
			lock (sequenceLock) {
				/* Make sure the default mailbox is selected */
				SelectMailbox(null);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "IDLE");
				/* Server must respond with a '+' continuation response */
				if (!response.StartsWith("+"))
					throw new BadServerResponseException(response);
			}
			/* setup and start the idle thread */
			if (idleThread != null)
				throw new ApplicationException("idleThread is not null");
			idling = true;
			idleThread = new Thread(IdleLoop);
			idleThread.IsBackground = true;
			idleThread.Start();
			/* setup a timer to issue NOOPs every once in a while */
			noopTimer.Interval = 1000 * 60 * 10;
			noopTimer.Elapsed += IssueNoop;
			noopTimer.Start();
		}

		/// <summary>
		/// Stops receiving of IMAP IDLE notifications from the IMAP server.
		/// </summary>
		/// <exception cref="InvalidOperationException">Thrown if the server does
		/// not support the IMAP4 IDLE command.</exception>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the IDLE operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <remarks>Calling this method when not receiving idle notifications
		/// has no effect.</remarks>
		/// <seealso cref="StartIdling"/>
		/// <seealso cref="PauseIdling"/>
		private void StopIdling() {
			if (!Authed)
				throw new NotAuthenticatedException();
			if (!idling)
				return;
			SendCommand("DONE");
			/* Wait until idle thread has shutdown */
			idleThread.Join();
			idleThread = null;
			idling = false;
			noopTimer.Stop();
		}

		/// <summary>
		/// Temporarily pauses receiving of IMAP IDLE notifications from the IMAP
		/// server.
		/// </summary>
		/// <exception cref="InvalidOperationException">Thrown if the server does
		/// not support the IMAP4 IDLE command.</exception>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the IDLE operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <remarks>To resume receiving IDLE notifications ResumeIdling must be called
		/// </remarks>
		/// <seealso cref="StartIdling"/>
		/// <seealso cref="ResumeIdling"/>
		private void PauseIdling() {
			if (!Authed)
				throw new NotAuthenticatedException();
			if (!idling)
				return;
			pauseRefCount = pauseRefCount + 1;
			if (pauseRefCount != 1)
				return;
			/* Send server "DONE" continuation-command to indicate we no longer wish
			 * to receive idle notifications. The server response is consumed by
			 * the idle thread and signals it to shut down.
			 */
			SendCommand("DONE");

			/* Wait until idle thread has shutdown */
			idleThread.Join();
			idleThread = null;
		}

		/// <summary>
		/// Resumes receiving of IMAP IDLE notifications from the IMAP server.
		/// </summary>
		/// <exception cref="InvalidOperationException">Thrown if the server does
		/// not support the IMAP4 IDLE command.</exception>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the IDLE operation could
		/// not be completed. The message property of the exception contains the error message
		/// returned by the server.</exception>
		/// <exception cref="ApplicationException">Thrown if an unexpected program condition
		/// occured.</exception>
		/// <remarks>This method is usually called in response to a prior call to the
		/// PauseIdling method.</remarks>
		/// <seealso cref="StopIdling"/>
		private void ResumeIdling() {
			if (!Authed)
				throw new NotAuthenticatedException();
			if (!idling)
				return;
			pauseRefCount = pauseRefCount - 1;
			if (pauseRefCount != 0)
				return;
			/* Make sure the default mailbox is selected */
			lock (sequenceLock) {
				SelectMailbox(null);
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "IDLE");
				/* Server must respond with a '+' continuation response */
				if (!response.StartsWith("+"))
					throw new BadServerResponseException(response);
			}
			/* setup and start the idle thread */
			if (idleThread != null)
				throw new ApplicationException("idleThread is not null");
			idleThread = new Thread(IdleLoop);
			idleThread.IsBackground = true;
			idleThread.Start();
		}

		/// <summary>
		/// The main idle loop. Waits for incoming IMAP IDLE notifications and dispatches
		/// them as events. This runs in its own thread whenever IMAP IDLE
		/// notifications are to be received.
		/// </summary>
		private void IdleLoop() {
			if (idleDispatch == null) {
				idleDispatch = new Thread(EventDispatcher);
				idleDispatch.IsBackground = true;
				idleDispatch.Start();
			}

			while (true) {
				try {
					string response = GetResponse();
					/* A request was made to stop idling so quit the thread */
					if (response.Contains("OK IDLE"))
						return;
					/* Let the dispatcher thread take care of the IDLE notification so we
					 * can go back to receiving responses */
					idleEvents.Enqueue(response);
				} catch (IOException) {
					/* Closing _Stream or the underlying _Connection instance will
					 * cause a WSACancelBlockingCall exception on a blocking socket.
					 * This is not an error so just let it pass.
					 */
				}
			}
		}

		/// <summary>
		/// Blocks on a queue and wakes up whenever a new notification is put into the
		/// queue. The notification is then examined and dispatched as an event.
		/// </summary>
		private void EventDispatcher() {
			while (true) {
				string response = idleEvents.Dequeue();
				Match m = Regex.Match(response, @"\*\s+(\d+)\s+(\w+)");
				if (!m.Success)
					continue;
				uint numberOfMessages = Convert.ToUInt32(m.Groups[1].Value);
				switch (m.Groups[2].Value.ToUpper()) {
					case "EXISTS":
						newMessageEvent.Raise(this,
							new IdleMessageEventArgs(numberOfMessages, GetHighestUID(), this));
						break;
					case "EXPUNGE":
						messageDeleteEvent.Raise(
							this, new IdleMessageEventArgs(numberOfMessages, GetHighestUID(), this));
						break;
				}
			}
		}

		/// <summary>
		/// Issues a NOOP command to the IMAP server. Called in the context of a
		/// System.Timer event when IDLE notifications are being received.
		/// </summary>
		/// <remarks>This is needed by the IMAP IDLE mechanism to give the server
		/// an indication the connection is still active.
		/// </remarks>
		private void IssueNoop(object sender, ElapsedEventArgs e) {
			lock (sequenceLock) {
				PauseIdling();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "NOOP");
				while (response.StartsWith("*"))
					response = GetResponse();
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
			}
		}

		/// <summary>
		/// Retrieves IMAP QUOTA information for a mailbox.
		/// </summary>
		/// <param name="mailbox">The mailbox to retrieve QUOTA information for.
		/// If this parameter is null, the value of the DefaultMailbox property is
		/// used to determine the mailbox to operate on.</param>
		/// <returns>A list of MailboxQuota objects describing usage and limits
		/// of the quota roots for the mailbox.</returns>
		/// <exception cref="NotAuthenticatedException">Thrown if the method was called
		/// in a non-authenticated state, i.e. before logging into the server with
		/// valid credentials.</exception>
		/// <exception cref="InvalidOperationException">Thrown if the IMAP4 QUOTA
		/// extension is not supported by the server.</exception>
		/// <exception cref="BadServerResponseException">Thrown if the quota operation
		/// could not be completed. The message property of the exception contains the error
		/// message returned by the server.</exception>
		private MailboxQuota[] GetQuota(string mailbox = null) {
			if (!Authed)
				throw new NotAuthenticatedException();
			if (!Supports("QUOTA"))
				throw new InvalidOperationException(
					"This server does not support the IMAP4 QUOTA extension");
			lock (sequenceLock) {
				PauseIdling();
				if (mailbox == null)
					mailbox = DefaultMailbox;
				List<MailboxQuota> Quotas = new List<MailboxQuota>();
				string tag = GetTag();
				string response = SendCommandGetResponse(tag + "GETQUOTAROOT " +
					Util.UTF7Encode(mailbox).QuoteString());
				while (response.StartsWith("*")) {
					Match m = Regex.Match(response,
						"\\* QUOTA \"(\\w*)\" \\((\\w+)\\s+(\\d+)\\s+(\\d+)\\)");
					if (m.Success) {
						try {
							MailboxQuota Quota = new MailboxQuota(m.Groups[2].Value,
								UInt32.Parse(m.Groups[3].Value),
								UInt32.Parse(m.Groups[4].Value));
							Quotas.Add(Quota);
						} catch {
							throw new BadServerResponseException(response);
						}
					}
					response = GetResponse();
				}
				ResumeIdling();
				if (!IsResponseOK(response, tag))
					throw new BadServerResponseException(response);
				return Quotas.ToArray();
			}
		}

		/// <summary>
		/// Releases all resources used by this ImapClient object.
		/// </summary>
		public void Dispose() {
			if (idleThread != null) {
				idleThread.Abort();
				idleThread = null;
			}
			if (idleDispatch != null) {
				idleDispatch.Abort();
				idleDispatch = null;
			}
			stream.Close();
			client.Close();
			stream = null;
			client = null;
		}
	}

	/// <summary>
	/// A delegate which is invoked during a call to GetMessage or GetMessages for every
	/// MIME part in a multipart mail message. The delegate can examine the MIME body
	/// part and decide to either include it in the returned mail message or dismiss
	/// it.
	/// </summary>
	/// <param name="part">A MIME body part of a mail message which consists of multiple
	/// parts.</param>
	/// <returns>Return true to include the body part in the returned MailMessage object,
	/// or false to skip it.</returns>
	public delegate bool ExaminePartDelegate(Bodypart part);
}]]></ProjectItem>
          <ProjectItem
            Name="MessageFlags.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Flag message attributes that can be associated with a mail message on an IMAP
	/// server.
	/// </summary>
	public enum MessageFlag {
		/// <summary>
		/// Indicates that the message has been read.
		/// </summary>
		Seen,
		/// <summary>
		/// Indicates that the message has been answered.
		/// </summary>
		Answered,
		/// <summary>
		/// Indicates that the message is "flagged" for urgent/special attention.
		/// </summary>
		Flagged,
		/// <summary>
		/// Indicates that the message has been marked as "deleted" and will be
		/// removed upon the next call to the Expunge method.
		/// </summary>
		Deleted,
		/// <summary>
		/// Indicates that the message has not completed composition and is
		/// marked as a draft.
		/// </summary>
		Draft,
		/// <summary>
		/// Indicates that the message has recently arrived in this mailbox.
		/// </summary>
		Recent
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Exceptions.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Runtime.Serialization;

namespace S22.Imap {
	/// <summary>
	/// The exception is thrown when an unexpected response is received from the server.
	/// </summary>
	[Serializable()]
	public class BadServerResponseException : Exception {
		/// <summary>
		/// Initializes a new instance of the BadServerResponseException class
		/// </summary>
		public BadServerResponseException() : base() { }
		/// <summary>
		/// Initializes a new instance of the BadServerResponseException class with its message
		/// string set to <paramref name="message"/>.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		public BadServerResponseException(string message) : base(message) { }
		/// <summary>
		/// Initializes a new instance of the BadServerResponseException class with its message
		/// string set to <paramref name="message"/> and a reference to the inner exception that
		/// is the cause of this exception.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		/// <param name="inner">The exception that is the cause of the current exception.</param>
		public BadServerResponseException(string message, Exception inner) : base(message, inner) { }
		/// <summary>
		/// Initializes a new instance of the BadServerResponseException class with the specified
		/// serialization and context information.
		/// </summary>
		/// <param name="info">An object that holds the serialized object data about the exception
		/// being thrown. </param>
		/// <param name="context">An object that contains contextual information about the source
		/// or destination. </param>
		protected BadServerResponseException(SerializationInfo info, StreamingContext context) { }
	}

	/// <summary>
	/// This exception is thrown when the supplied credentials in a login attempt were rejected
	/// by the server.
	/// </summary>
	[Serializable()]
	public class InvalidCredentialsException : Exception {
		/// <summary>
		/// Initializes a new instance of the InvalidCredentialsException class
		/// </summary>
		public InvalidCredentialsException() : base() { }
		/// <summary>
		/// Initializes a new instance of the InvalidCredentialsException class with its message
		/// string set to <paramref name="message"/>.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		public InvalidCredentialsException(string message) : base(message) { }
		/// <summary>
		/// Initializes a new instance of the InvalidCredentialsException class with its message
		/// string set to <paramref name="message"/> and a reference to the inner exception that
		/// is the cause of this exception.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		/// <param name="inner">The exception that is the cause of the current exception.</param>
		public InvalidCredentialsException(string message, Exception inner) : base(message, inner) { }
		/// <summary>
		/// Initializes a new instance of the InvalidCredentialsException class with the specified
		/// serialization and context information.
		/// </summary>
		/// <param name="info">An object that holds the serialized object data about the exception
		/// being thrown. </param>
		/// <param name="context">An object that contains contextual information about the source
		/// or destination. </param>
		protected InvalidCredentialsException(SerializationInfo info, StreamingContext context) { }
	}

	/// <summary>
	/// This exception is thrown when a client has not authenticated with the server and
	/// attempts to call a method which can only be called in an authenticated context.
	/// </summary>
	[Serializable()]
	public class NotAuthenticatedException : Exception {
		/// <summary>
		/// Initializes a new instance of the NotAuthenticatedException class
		/// </summary>
		public NotAuthenticatedException() : base() { }
		/// <summary>
		/// Initializes a new instance of the NotAuthenticatedException class with its message
		/// string set to <paramref name="message"/>.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		public NotAuthenticatedException(string message) : base(message) { }
		/// <summary>
		/// Initializes a new instance of the NotAuthenticatedException class with its message
		/// string set to <paramref name="message"/> and a reference to the inner exception that
		/// is the cause of this exception.
		/// </summary>
		/// <param name="message">A description of the error. The content of message is intended
		/// to be understood by humans.</param>
		/// <param name="inner">The exception that is the cause of the current exception.</param>
		public NotAuthenticatedException(string message, Exception inner) : base(message, inner) { }
		/// <summary>
		/// Initializes a new instance of the NotAuthenticatedException class with the specified
		/// serialization and context information.
		/// </summary>
		/// <param name="info">An object that holds the serialized object data about the exception
		/// being thrown. </param>
		/// <param name="context">An object that contains contextual information about the source
		/// or destination. </param>
		protected NotAuthenticatedException(SerializationInfo info, StreamingContext context) { }
	}

}]]></ProjectItem>
          <ProjectItem
            Name="SearchCondition.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace S22.Imap {
	/// <summary>
	/// Chainable search conditions to be used with the Search method.
	/// </summary>
	public class SearchCondition {
		/// <summary>
		/// Finds all messages in the mailbox.
		/// </summary>
		/// <returns>A SearchCondition object representing the "all" search criterion</returns>
		public static SearchCondition All() {
			return new SearchCondition { Field = Fields.All };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the header or body of the
		/// message.
		/// </summary>
		/// <param name="text">String to search messages for</param>
		/// <returns>A SearchCondition object representing the "text" search criterion</returns>
		public static SearchCondition Text(string text) {
			return new SearchCondition { Field = Fields.Text, Value = text };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the envelope structure's
		/// BCC field.
		/// </summary>
		/// <param name="text">String to search the envelope structure's BCC field for</param>
		/// <returns>A SearchCondition object representing the "BCC" search criterion</returns>
		public static SearchCondition BCC(string text) {
			return new SearchCondition { Field = Fields.BCC, Value = text };
		}
		/// <summary>
		/// Finds messages whose internal date (disregarding time and timezone) is
		/// earlier than the specified date.
		/// </summary>
		/// <param name="date">Date to compare the message's internal date with</param>
		/// <returns>A SearchCondition object representing the "Before" search criterion</returns>
		public static SearchCondition Before(DateTime date) {
			return new SearchCondition { Field = Fields.Before, Value = date };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the body of the
		/// message.
		/// </summary>
		/// <param name="text">String to search the message body for</param>
		/// <returns>A SearchCondition object representing the "Body" search criterion</returns>
		public static SearchCondition Body(string text) {
			return new SearchCondition { Field = Fields.Body, Value = text };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the envelope structure's
		/// CC field.
		/// </summary>
		/// <param name="text">String to search the envelope structure's CC field for</param>
		/// <returns>A SearchCondition object representing the "CC" search criterion</returns>
		public static SearchCondition Cc(string text) {
			return new SearchCondition { Field = Fields.Cc, Value = text };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the envelope structure's
		/// FROM field.
		/// </summary>
		/// <param name="text">String to search the envelope structure's FROM field for</param>
		/// <returns>A SearchCondition object representing the "FROM" search criterion</returns>
		public static SearchCondition From(string text) {
			return new SearchCondition { Field = Fields.From, Value = text };
		}
		/// <summary>
		/// Finds messages that have a header with the specified field-name and that
		/// contains the specified string in the text of the header.
		/// </summary>
		/// <param name="name">field-name of the header to search for</param>
		/// <param name="text">String to search for in the text of the header</param>
		/// <returns>A SearchCondition object representing the "HEADER" search
		/// criterion</returns>
		/// <remarks>
		/// If the string to search is zero-length, this matches all messages
		/// that have a header line with the specified field-name regardless of the
		/// contents.
		/// </remarks>
		public static SearchCondition Header(string name, string text) {
			return new SearchCondition { Field = Fields.Header,
				Value = name + " " + text.QuoteString() };
		}
		/// <summary>
		/// Finds messages with the specified keyword flag set.
		/// </summary>
		/// <param name="text">Keyword flag to search for</param>
		/// <returns>A SearchCondition object representing the "KEYWORD" search
		/// criterion</returns>
		public static SearchCondition Keyword(string text) {
			return new SearchCondition { Field = Fields.Keyword, Value = text };
		}
		/// <summary>
		/// Finds messages with a size larger than the specified number of bytes.
		/// </summary>
		/// <param name="size">Minimum size, in bytes a message must have to be
		/// included in the result set</param>
		/// <returns>A SearchCondition object representing the "LARGER" search
		/// criterion</returns>
		public static SearchCondition Larger(long size) {
			return new SearchCondition { Field = Fields.Larger, Value = size };
		}
		/// <summary>
		/// Finds messages with a size smaller than the specified number of bytes.
		/// </summary>
		/// <param name="size">Maximum size, in bytes a message must have to be
		/// included in the result set</param>
		/// <returns>A SearchCondition object representing the "SMALLER" search
		/// criterion</returns>
		public static SearchCondition Smaller(long size) {
			return new SearchCondition { Field = Fields.Smaller, Value = size };
		}
		/// <summary>
		/// Finds messages whose Date: header (disregarding time and timezone) is
		/// earlier than the specified date.
		/// </summary>
		/// <param name="date">Date to compare the Date: header field with.</param>
		/// <returns>A SearchCondition object representing the "SENTBEFORE" search
		/// criterion</returns>
		public static SearchCondition SentBefore(DateTime date) {
			return new SearchCondition { Field = Fields.SentBefore, Value = date };
		}
		/// <summary>
		/// Finds messages whose Date: header (disregarding time and timezone) is
		/// within the specified date.
		/// </summary>
		/// <param name="date">Date to compare the Date: header field with.</param>
		/// <returns>A SearchCondition object representing the "SENTON" search
		/// criterion</returns>
		public static SearchCondition SentOn(DateTime date) {
			return new SearchCondition { Field = Fields.SentOn, Value = date };
		}
		/// <summary>
		/// Finds messages whose Date: header (disregarding time and timezone) is
		/// within or later than the specified date.
		/// </summary>
		/// <param name="date">Date to compare the Date: header field with.</param>
		/// <returns>A SearchCondition object representing the "SENTSINCE" search
		/// criterion</returns>
		public static SearchCondition SentSince(DateTime date) {
			return new SearchCondition { Field = Fields.SentSince, Value = date };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the envelope
		/// structure's SUBJECT field.
		/// </summary>
		/// <param name="text">String to search the envelope structure's SUBJECT
		/// field for</param>
		/// <returns>A SearchCondition object representing the "SUBJECT" search
		/// criterion</returns>
		public static SearchCondition Subject(string text) {
			return new SearchCondition { Field = Fields.Subject, Value = text };
		}
		/// <summary>
		/// Finds messages that contain the specified string in the envelope
		/// structure's TO field.
		/// </summary>
		/// <param name="text">String to search the envelope structure's TO
		/// field for</param>
		/// <returns>A SearchCondition object representing the "TO" search
		/// criterion</returns>
		public static SearchCondition To(string text) {
			return new SearchCondition { Field = Fields.To, Value = text };
		}
		/// <summary>
		/// Finds messages with unique identifiers corresponding to the specified
		/// unique identifier set.
		/// </summary>
		/// <param name="uids">An array of unique identifiers</param>
		/// <returns>A SearchCondition object representing the "UID" search
		/// criterion</returns>
		public static SearchCondition UID(params uint[] uids) {
			return new SearchCondition { Field = Fields.UID,
				Value = uids };
		}
		/// <summary>
		/// Finds messages with a unique identifier greater than the specified
		/// unique identifier. Because of the nature of the IMAP search mechanism,
		/// the result set will always contain the UID of the last message in the
		/// mailbox, even if said UID is smaller than the UID specified.
		/// </summary>
		/// <param name="uid">A unique identifier (UID).</param>
		/// <returns>A SearchCondition object representing the "UID" search
		/// criterion</returns>
		public static SearchCondition GreaterThan(uint uid) {
			return new SearchCondition { Field = Fields.UID,
				Value = (uid + 1).ToString() + ":*", Quote = false };
		}
		/// <summary>
		/// Finds messages with a unique identifier less than the specified
		/// unique identifier.
		/// </summary>
		/// <param name="uid">A unique identifier (UID).</param>
		/// <returns>A SearchCondition object representing the "UID" search
		/// criterion</returns>
		public static SearchCondition LessThan(uint uid) {
			return new SearchCondition { Field = Fields.UID,
				Value = "1:" + (uid - 1).ToString(), Quote = false };
		}
		/// <summary>
		/// Finds messages that do not have the specified keyword flag set.
		/// </summary>
		/// <param name="text">A valid IMAP keyword flag</param>
		/// <returns>A SearchCondition object representing the "UNKEYWORD"
		/// search criterion</returns>
		public static SearchCondition Unkeyword(string text) {
			return new SearchCondition { Field = Fields.Unkeyword, Value = text };
		}
		/// <summary>
		/// Finds messages with the \Answered flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "ANSWERED" search
		/// criterion</returns>
		public static SearchCondition Answered() {
			return new SearchCondition { Field = Fields.Answered };
		}
		/// <summary>
		/// Finds messages with the \Deleted flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "DELETED" search
		/// criterion</returns>
		public static SearchCondition Deleted() {
			return new SearchCondition { Field = Fields.Deleted };
		}
		/// <summary>
		/// Finds messages with the \Draft flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "DRAFT" search
		/// criterion</returns>
		public static SearchCondition Draft() {
			return new SearchCondition { Field = Fields.Draft };
		}
		/// <summary>
		/// Finds messages with the \Flagged flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "FLAGGED" search
		/// criterion</returns>
		public static SearchCondition Flagged() {
			return new SearchCondition { Field = Fields.Flagged };
		}
		/// <summary>
		/// Finds messages that have the \Recent flag set but not the \Seen flag.
		/// </summary>
		/// <returns>A SearchCondition object representing the "NEW" search
		/// criterion</returns>
		public static SearchCondition New() {
			return new SearchCondition { Field = Fields.New };
		}
		/// <summary>
		/// Finds messages that do not have the \Recent flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "OLD" search
		/// criterion</returns>
		public static SearchCondition Old() {
			return new SearchCondition { Field = Fields.Old };
		}
		/// <summary>
		/// Finds messages that have the \Recent flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "RECENT" search
		/// criterion</returns>
		public static SearchCondition Recent() {
			return new SearchCondition { Field = Fields.Recent };
		}
		/// <summary>
		/// Finds messages that have the \Seen flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "SEEN" search
		/// criterion</returns>
		public static SearchCondition Seen() {
			return new SearchCondition { Field = Fields.Seen };
		}
		/// <summary>
		/// Finds messages that do not have the \Answered flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "UNANSWERED" search
		/// criterion</returns>
		public static SearchCondition Unanswered() {
			return new SearchCondition { Field = Fields.Unanswered };
		}
		/// <summary>
		/// Finds messages that do not have the \Deleted flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "UNDELETED" search
		/// criterion</returns>
		public static SearchCondition Undeleted() {
			return new SearchCondition { Field = Fields.Undeleted };
		}
		/// <summary>
		/// Finds messages that do not have the \Draft flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "UNDRAFT" search
		/// criterion</returns>
		public static SearchCondition Undraft() {
			return new SearchCondition { Field = Fields.Undraft };
		}
		/// <summary>
		/// Finds messages that do not have the \Flagged flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "UNFLAGGED" search
		/// criterion</returns>
		public static SearchCondition Unflagged() {
			return new SearchCondition { Field = Fields.Unflagged };
		}
		/// <summary>
		/// Finds messages that do not have the \Seen flag set.
		/// </summary>
		/// <returns>A SearchCondition object representing the "UNSEEN" search
		/// criterion</returns>
		public static SearchCondition Unseen() {
			return new SearchCondition { Field = Fields.Unseen };
		}

		/// <summary>
		/// Logically ANDs multiple search conditions, meaning a message will only
		/// be included in the search result set if all conditions are met.
		/// </summary>
		/// <param name="other">A search condition to logically AND this
		/// SearchCondition instance with</param>
		/// <returns>A new SearchCondition instance which can be further chained
		/// with other search conditions.</returns>
		public SearchCondition And(SearchCondition other) {
			return Join(string.Empty, this, other);
		}

		/// <summary>
		/// Logically negates search conditions, meaning a message will only
		/// be included in the search result set if the specified conditions
		/// are not met.
		/// </summary>
		/// <param name="other">A search condition that must not be met by a
		/// message for it to be included in the search result set</param>
		/// <returns>A new SearchCondition instance which can be further chained
		/// with other search conditions.</returns>
		public SearchCondition Not(SearchCondition other) {
			return Join("NOT", this, other);
		}

		/// <summary>
		/// Logically ORs multiple search conditions, meaning a message will be
		/// included in the search result set if it meets at least one of the
		/// conditions.
		/// </summary>
		/// <param name="other">A search condition to logically OR this
		/// SearchCondition instance with</param>
		/// <returns>A new SearchCondition instance which can be further chained
		/// with other search conditions.</returns>
		public SearchCondition Or(SearchCondition other) {
			return Join("OR", this, other);
		}

		/// <summary>
		/// The search keys which can be used with the IMAP SEARCH command, as
		/// are defined in section 6.4.4 of RFC 3501.
		/// </summary>
		private enum Fields {
			BCC, Before, Body, Cc, From, Header, Keyword,
			Larger, On, SentBefore, SentOn, SentSince, Since, Smaller, Subject,
			Text, To, UID, Unkeyword, All, Answered, Deleted, Draft, Flagged,
			New, Old, Recent, Seen, Unanswered, Undeleted, Undraft, Unflagged, Unseen
		}

		private object Value { get; set; }
		private Fields? Field { get; set; }
		private List<SearchCondition> Conditions { get; set; }
		private string Operator { get; set; }
		private bool Quote = true;

		/// <summary>
		/// Joins two SearchCondition objects into a new one using the specified
		/// logical operator.
		/// </summary>
		/// <param name="condition">The logical operator to use for joining the
		/// search conditions. Possible values are "OR", "NOT" and the empty
		/// string "" which denotes a logical AND.</param>
		/// <param name="left">The first SearchCondition object</param>
		/// <param name="right">The second SearchCondition object</param>
		/// <returns>A new SearchCondition object representing the two
		/// search conditions joined by the specified logical operator.</returns>
		private static SearchCondition Join(string condition, SearchCondition left,
			SearchCondition right) {
			return new SearchCondition {
				Operator = condition.ToUpper(),
				Conditions = new List<SearchCondition> { left, right }
			};
		}

		/// <summary>
		/// Constructs a string from this SearchCondition object using the proper syntax
		/// as is required for the IMAP SEARCH command.
		/// </summary>
		/// <returns>A string representing this SearchCondition instance that can be
		/// used with the IMAP SEARCH command.</returns>
		public override string ToString() {
			if (Conditions != null && Conditions.Count > 0 && Operator != null) {
				return (Operator.ToUpper() + " (" +
					string.Join(") (", Conditions) + ")").Trim();
			}
			StringBuilder builder = new StringBuilder();
			if (Field != null)
				builder.Append(Field.ToString().ToUpper());
			object Val = Value;
			if (Val != null) {
				if (Field != null)
					builder.Append(" ");
				if (Val is string) {
					string s = (string)Val;
					// If the string contains non-ASCII characters we must use the somewhat
					// cumbersome literal form as is outlined in RFC 3501 Section 4.3.
					if (!s.IsASCII()) {
						builder.AppendLine("{" + Encoding.UTF8.GetBytes(s).Length + "}");
					} else {
						if (Quote)
							Val = ((string)Val).QuoteString();
					}
				} else if (Val is DateTime) {
					Val = ((DateTime)Val).ToString("dd-MMM-yyyy",
						CultureInfo.InvariantCulture).QuoteString();
				} else if (Val is uint[]) {
					Val = string.Join<uint>(",", (uint[])Val);
				}
				builder.Append(Val);
			}
			return builder.ToString();
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ContentType.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;

namespace S22.Imap {
	/// <summary>
	/// Possible values for the "Type" property of the Bodypart class.
	/// For a detailed description of MIME Media Types refer to
	/// RFC 2046.
	/// </summary>
	public enum ContentType {
		/// <summary>
		/// The "text" media type is intended for sending material which
		/// is principally textual in form.
		/// </summary>
		Text,
		/// <summary>
		/// A media type of "image" indicates that the body contains an image.
		/// The subtype names the specific image format. 
		/// </summary>
		Image,
		/// <summary>
		/// A media type of "audio" indicates that the body contains audio
		/// data.
		/// </summary>
		Audio,
		/// <summary>
		/// A media type of "video" indicates that the body contains a
		/// time-varying-picture image, possibly with color and coordinated sound.
		/// </summary>
		Video,
		/// <summary>
		/// The "application" media type is to be used for discrete data which do
		/// not fit in any of the other categories, and particularly for data to
		/// be processed by some type of application program.
		/// </summary>
		Application,
		/// <summary>
		/// The "message" content type allows messages to contain other messages
		/// or pointers to other messages.
		/// </summary>
		Message,
		/// <summary>
		/// The media type value is unknown or could not be determined.
		/// </summary>
		Other
	}

	internal static class ContentTypeMap {
		public static ContentType fromString(string contentType) {
			Dictionary<string, ContentType> Map =
			new Dictionary<string, ContentType>(StringComparer.OrdinalIgnoreCase) {
				{ "Text", ContentType.Text },
				{ "Image",	ContentType.Image },
				{ "Audio",	ContentType.Audio },
				{ "Video", ContentType.Video },
				{ "Application", ContentType.Application },
				{ "Message", ContentType.Message },
				{ "Other", ContentType.Other }
			};
			try {
				return Map[contentType];
			} catch {
				return ContentType.Other;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties.Settings.get_Default():ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties.Sett" +
    "ings")]

namespace ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_3fdd2b942e254ff7a7c85cd6454b463c.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ContentTransferEncoding.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;

namespace S22.Imap {
	/// <summary>
	/// Possible values for the "Encoding" property of the Bodypart class. The content
	/// transfer encoding indicates whether or not a binary-to-text encoding
	/// scheme has been used on top of the original encoding as specified within the
	/// Content-Type header.
	/// </summary>
	public enum ContentTransferEncoding {
		/// <summary>
		/// The content tranfer encoding could not be determined or is unknown.
		/// </summary>
		Unknown,
		/// <summary>
		/// Up to 998 bytes per line of the code range 1 - 127 with CR and LF only
		/// allowed to appear as part of a CRLF line ending.
		/// </summary>
		Bit7,
		/// <summary>
		/// Up to 998 bytes per line with CR and LF only allowed to appear as part
		/// of a CRLF line ending.
		/// </summary>
		Bit8,
		/// <summary>
		/// Any sequence of bytes.
		/// </summary>
		Binary,
		/// <summary>
		/// Byte sequence is encoded using the quoted-printable encoding.
		/// </summary>
		QuotedPrintable,
		/// <summary>
		/// Byte sequence is encoded using Base64 encoding.
		/// </summary>
		Base64
	}

	internal static class ContentTransferEncodingMap {
		public static ContentTransferEncoding fromString(string transferEncoding) {
			Dictionary<string, ContentTransferEncoding> Map =
			new Dictionary<string, ContentTransferEncoding>
				(StringComparer.OrdinalIgnoreCase) {
				{ "7Bit", ContentTransferEncoding.Bit7 },
				{ "8Bit",	ContentTransferEncoding.Bit8 },
				{ "Binary",	ContentTransferEncoding.Binary },
				{ "Quoted-Printable", ContentTransferEncoding.QuotedPrintable },
				{ "Base64", ContentTransferEncoding.Base64 }
			};
			try {
				return Map[transferEncoding];
			} catch {
				return ContentTransferEncoding.Unknown;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="MIMEPart.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Specialized;

namespace S22.Imap {
	/// <summary>
	/// Represents a part of a MIME multi-part message. Each part consists
	/// of its own content header and a content body.
	/// </summary>
	internal class MIMEPart {
		/// <summary>
		/// A collection containing the content header information as
		/// key-value pairs.
		/// </summary>
		public NameValueCollection header {
			get;
			set;
		}
		/// <summary>
		/// A string containing the content body of the part.
		/// </summary>
		public string body {
			get;
			set;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Bodystructure.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;

namespace S22.Imap {
	/// <summary>
	/// Provides a means for parsing the textual description of the body structure of a mail
	/// message as is returned by an IMAP server for a "FETCH BODYSTRUCTURE" command.
	/// </summary>
	/// <remarks>
	/// They couldn't have made the BODYSTRUCTURE any more complicated and unnecessarily
	/// hard to parse. I wonder what they were thinking when they came up with this.
	/// </remarks>
	internal class Bodystructure {
		/// <summary>
		/// Parses the body structure of a mail message as is returned by the IMAP server
		/// in response to a FETCH BODYSTRUCTURE command.
		/// </summary>
		/// <param name="text">The body structure server response</param>
		/// <returns>An array of initialized Bodypart objects representing the body
		/// structure of the mail message</returns>
		/// <exception cref="FormatException">Thrown if the passed string does not
		/// contain a valid body structure and parsing failed.</exception>
		public static Bodypart[] Parse(string text) {
			Bodystructure s = new Bodystructure(text);
			List<Bodypart> list = new List<Bodypart>();
			try {
				char c = (char)s.reader.Peek();
				if (c == '(')
					list.AddRange(s.ParseList());
				else
					list.Add(s.ParseBodypart("1", false));
			} catch (Exception) {
				throw new FormatException(text);
			}
			return list.ToArray();
		}

		/// <summary>
		/// A Reader object initialized with the string containing the bodystructure
		/// response.
		/// </summary>
		private Reader reader;

		/// <summary>
		/// Initializes a new instance of the Bodystructure class.
		/// </summary>
		/// <param name="text"></param>
		private Bodystructure(string text) {
			reader = new Reader(text);
		}

		/// <summary>
		/// Parses a bodypart entry from the body structure and advances the
		/// read pointer.
		/// </summary>
		/// <param name="partNumber">The designated part specifier by which the body
		/// part is refered to by the server.</param>
		/// <param name="parenthesis">Set to true if the bodypart is enclosed
		/// in parenthesis.</param>
		/// <returns></returns>
		private Bodypart ParseBodypart(string partNumber, bool parenthesis = true) {
			Bodypart part = new Bodypart(partNumber);
			// Mandatory fields:
			//  "Type"² "Subtype"² ("Attribute" "Value")² "Id"² "Description"² "Encoding"² Size³
			//  ² String value, but can be NIL, ³ Integer value
			part.Type = ContentTypeMap.fromString(reader.ReadWord());
			part.Subtype = reader.ReadWord();
			part.Parameters = reader.ReadList();
			part.Id = reader.ReadWord();
			part.Description = reader.ReadWord();
			part.Encoding = ContentTransferEncodingMap.fromString(reader.ReadWord());
			part.Size = reader.ReadInteger();
			if (part.Type == ContentType.Text)
				part.Lines = reader.ReadInteger();
			if (part.Type == ContentType.Message && part.Subtype.ToUpper() == "RFC822")
				ParseMessage822Fields(part);
			try {
				ParseOptionalFields(part, parenthesis);
			} catch (EndOfStringException) {}
			return part;
		}

		/// <summary>
		/// Parses the mandatory extra fields that are present if the bodypart is
		/// of type message/rfc822 (see RFC 3501, p. 75).
		/// </summary>
		/// <param name="part">The bodypart instance the parsed fields will be
		/// added to.</param>
		private void ParseMessage822Fields(Bodypart part) {
			// We just skip over most of this extra information as it is useless
			// to us.
			// Mandatory fields:
			//	"Envelope" "Bodystructure" "Lines"
			SkipParenthesizedExpression();
			SkipParenthesizedExpression();
			part.Lines = reader.ReadInteger();
		}

		/// <summary>
		/// Parses the optional fields of a bodypart entry from the body structure
		/// and advances the read pointer.
		/// </summary>
		/// <param name="part">The bodypart instance the parsed fields will be
		/// added to.</param>
		/// <param name="parenthesis">Set to true if the bodypart entry is enclosed
		/// in parenthesis.</param>
		private void ParseOptionalFields(Bodypart part, bool parenthesis = true) {
			// Optional fields:
			//  "Md5"² ("Disposition" ("Attribute" "Value"))² "Language"² "Location"²
			if (parenthesis && reader.Peek(true) == ')') {
				reader.Read();
				return;
			}
			part.Md5 = reader.ReadWord();
			if (parenthesis && reader.Peek(true) == ')') {
				reader.Read();
				return;
			}
			part.Disposition = reader.ReadDisposition();
			if (parenthesis && reader.Peek(true) == ')') {
				reader.Read();
				return;
			}
			part.Language = reader.ReadWord();
			if (parenthesis && reader.Peek(true) == ')') {
				reader.Read();
				return;
			}
			part.Location = reader.ReadWord();
			if (parenthesis)
				reader.SkipUntil(')');
		}

		/// <summary>
		/// Parses a list of bodypart entries as is outlined in the description of the
		/// BODYPART response in RFC 3501.
		/// </summary>
		/// <param name="nestPrefix">The nesting prefix that will be prefixed to the
		/// bodyparts partNumber.</param>
		/// <returns>An array of initialized Bodypart objects parsed from the
		/// list.</returns>
		private Bodypart[] ParseList(string nestPrefix = "") {
			List<Bodypart> list = new List<Bodypart>();
			int count = 1;

			// consume opening bracket. If next character is another opening
			// bracket, it's a nested list
			while (reader.Peek(true) == '(') {
				reader.Read();
				char c = (char)reader.Peek(true);
				if (c == '(')
					list.AddRange(ParseList(nestPrefix + count + "."));
				else {
					string partNumber = nestPrefix + count;
					Bodypart part = ParseBodypart(partNumber);
					list.Add(part);
				}
				count = count + 1;
			}
			/* Skip over multipart */
			SkipMultipart();
			return list.ToArray();
		}

		/// <summary>
		/// Advances the read pointer to skip over a multipart entry.
		/// </summary>
		private void SkipMultipart() {
			int openingBrackets = 0;
			while (reader.Peek() > 0) {
				char c = (char)reader.Read();
				if (c == '(')
					openingBrackets++;
				if (c == ')') {
					if (openingBrackets == 0)
						break;
					openingBrackets--;
				}
			}
		}

		/// <summary>
		/// Advances the read pointer to skip over an arbitrary
		/// expression enclosed in parentheses.
		/// </summary>
		private void SkipParenthesizedExpression() {
			int openingBrackets = 1;
			bool inQuotes = false;
			char[] last = new char[3];
			char c;
			while ((c = (char)reader.Read()) != '(') {
				last[0] = last[1];
				last[1] = last[2];
				last[2] = c;
				if ((new string(last)) == "NIL")
					return;
			}
			while (reader.Peek() > 0) {
				c = (char)reader.Read();
				if (c == '"' && last[0] != '\\')
					inQuotes = !inQuotes;
				last[0] = c;
				if (c == '(' && !inQuotes)
					openingBrackets++;
				if (c == ')' && !inQuotes) {
					openingBrackets--;
					if (openingBrackets == 0)
						break;
				}
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="IdleEvents.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Provides data for IMAP idle notification events, such as the NewMessage and
	/// MessageDelete events.
	/// </summary>
	public class IdleMessageEventArgs : EventArgs {
		/// <summary>
		/// Initializes a new instance of the IdleMessageEventArgs class and sets the
		/// MessageCount attribute to the value of the <paramref name="MessageCount"/>
		/// parameter.
		/// </summary>
		/// <param name="MessageCount">The number of messages in the selected
		/// mailbox.</param>
		/// <param name="MessageUID"> The unique identifier (UID) of the newest
		/// message in the mailbox.</param>
		/// <param name="Client">The instance of the ImapClient class that raised
		/// the event.</param>
		internal IdleMessageEventArgs(uint MessageCount, uint MessageUID,
			ImapClient Client) {
			this.MessageCount = MessageCount;
			this.MessageUID = MessageUID;
			this.Client = Client;
		}

		/// <summary>
		/// The total number of messages in the selected mailbox.
		/// </summary>
		public uint MessageCount {
			get;
			private set;
		}

		/// <summary>
		/// The unique identifier (UID) of the newest message in the mailbox. 
		/// </summary>
		/// <remarks>The UID can be passed to the GetMessage method in order to retrieve
		/// the mail message from the server.</remarks>
		public uint MessageUID {
			get;
			private set;
		}

		/// <summary>
		/// The instance of the ImapClient class that raised the event.
		/// </summary>
		public ImapClient Client {
			get;
			private set;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_3fdd2b942e254ff7a7c85cd6454b463c</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_3fdd2b942e254ff7a7c85cd6454b463c</msb:DisplayName>
		<msb:ProjectId>{0D5C4981-6541-497A-A037-61C402BF94DF}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_3fdd2b942e254ff7a7c85cd6454b463c.csproj"/>
		<msb:File Include="Bodystructure.cs"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Bodypart.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="ContentDisposition.cs"/>
		<msb:File Include="ContentTransferEncoding.cs"/>
		<msb:File Include="ContentType.cs"/>
		<msb:File Include="Exceptions.cs"/>
		<msb:File Include="ImapClient.cs"/>
		<msb:File Include="MessageFlags.cs"/>
		<msb:File Include="FetchOptions.cs"/>
		<msb:File Include="IdleEvents.cs"/>
		<msb:File Include="IImapClient.cs"/>
		<msb:File Include="SearchCondition.cs"/>
		<msb:File Include="MailboxFlags.cs"/>
		<msb:File Include="MailboxInfo.cs"/>
		<msb:File Include="MailboxQuota.cs"/>
		<msb:File Include="MailboxStatus.cs"/>
		<msb:File Include="SafeQueue.cs"/>
		<msb:File Include="MailMessage.cs"/>
		<msb:File Include="MessageBuilder.cs"/>
		<msb:File Include="MIMEPart.cs"/>
		<msb:File Include="Reader.cs"/>
		<msb:File Include="Util.cs"/>
		<msb:File Include="AuthMethod.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="MessageBuilder.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Net.Mail;
using System.Text;
using System.Text.RegularExpressions;

namespace S22.Imap {
	/// <summary>
	/// A helper class for reading mail message data and building a MailMessage
	/// instance out of it.
	/// </summary>
	internal static class MessageBuilder {
		/// <summary>
		/// Creates a new empty instance of the MailMessage class from a string
		/// containing a raw mail message header.
		/// </summary>
		/// <param name="text">A string containing the mail header to create
		/// the MailMessage instance from.</param>
		/// <returns>A MailMessage instance with initialized Header fields but
		/// no content</returns>
		internal static MailMessage FromHeader(string text) {
			NameValueCollection header = ParseMailHeader(text);
			MailMessage m = new MailMessage();
			foreach (string key in header) {
				string value = header.GetValues(key)[0];
				try {
						m.Headers.Add(key, value);
				} catch {
					// HeaderCollection throws an exception if adding an empty string as
					// value, which can happen, if reading a mail message with an empty
					// subject.
					// Also spammers often forge headers, so just fall through and ignore.
				}
			}
			Match ma = Regex.Match(header["Subject"] ?? "", @"=\?([A-Za-z0-9\-_]+)");
			if (ma.Success) {
				// encoded-word subject. A subject must not contain any encoded newline
				// characters, so if we find any, we strip them off.
				m.SubjectEncoding = Util.GetEncoding(ma.Groups[1].Value);
				try {
					m.Subject = Util.DecodeWords(header["Subject"]).
						Replace(Environment.NewLine, "");
				} catch {
					// if, for any reason encoding fails, set the subject to the
					// original, unaltered string.
					m.Subject = header["Subject"];
				}
			} else {
				m.SubjectEncoding = Encoding.ASCII;
				m.Subject = header["Subject"];
			}
			m.Priority = ParsePriority(header["Priority"]);
			SetAddressFields(m, header);
			return m;
		}

		/// <summary>
		/// Creates a new instance of the MailMessage class from a string
		/// containing raw RFC822/MIME mail message data.
		/// </summary>
		/// <param name="text">A string containing the mail message data to
		/// create the MailMessage instance from.</param>
		/// <returns>An initialized instance of the MailMessage class.</returns>
		/// <remarks>This is used when fetching entire messages instead
		/// of the partial-fetch mechanism because it saves redundant
		/// round-trips to the server.</remarks>
		internal static MailMessage FromMIME822(string text) {
			StringReader reader = new StringReader(text);
			StringBuilder header = new StringBuilder();
			string line;
			while(!String.IsNullOrEmpty(line = reader.ReadLine()))
				header.AppendLine(line);
			MailMessage m = FromHeader(header.ToString());
			MIMEPart[] parts = ParseMailBody(reader.ReadToEnd(), m.Headers);
			foreach (MIMEPart p in parts)
				m.AddBodypart(BodypartFromMIME(p), p.body);
			return m;
		}

		/// <summary>
		/// Parses the mail header of a mail message and returns it as a
		/// NameValueCollection.
		/// </summary>
		/// <param name="header">The mail header to parse.</param>
		/// <returns>A NameValueCollection containing the header fields as keys
		/// with their respective values as values.</returns>
		internal static NameValueCollection ParseMailHeader(string header) {
			StringReader reader = new StringReader(header);
			NameValueCollection coll = new NameValueCollection();
			string line, fieldname = null, fieldvalue = null;
			while ((line = reader.ReadLine()) != null) {
				if (line == String.Empty)
					continue;
				/* Values may stretch over several lines */
				if (line[0] == ' ' || line[0] == '\t') {
					if(fieldname != null)
						coll[fieldname] = coll[fieldname] + line.TrimEnd();
					continue;
				}
				/* The mail header consists of field:value pairs */
				int delimiter = line.IndexOf(':');
				if (delimiter < 0)
					continue;
				fieldname = line.Substring(0, delimiter).Trim();
				fieldvalue = line.Substring(delimiter + 1).Trim();
				coll.Add(fieldname, fieldvalue);
			}
			return coll;
		}

		/// <summary>
		/// Parses a MIME header field which can contain multiple 'parameter = value'
		/// pairs (such as Content-Type: text/html; charset=iso-8859-1).
		/// </summary>
		/// <param name="field">The header field to parse</param>
		/// <returns>A NameValueCollection containing the parameter names as keys
		/// with the respective parameter values as values.</returns>
		/// <remarks>The value of the actual field disregarding the 'parameter = value'
		/// pairs is stored in the collection under the key "value" (in the above example
		/// of Content-Type, this would be "text/html").</remarks>
		private static NameValueCollection ParseMIMEField(string field) {
			NameValueCollection coll = new NameValueCollection();
			try {
				MatchCollection matches = Regex.Matches(field,
					"([\\w\\-]+)\\s*=\\s*([^;]+)");
				foreach (Match m in matches)
					coll.Add(m.Groups[1].Value, m.Groups[2].Value.Trim('"'));
				Match mvalue = Regex.Match(field, @"^\s*([^;]+)");
				coll.Add("value", mvalue.Success ? mvalue.Groups[1].Value.Trim() : "");
			} catch {
				// We don't want this to blow up on the user with weird mails so
				// just return an empty collection.
				coll.Add("value", String.Empty);
			}
			return coll;
		}

		/// <summary>
		/// Parses a mail header address-list field such as To, Cc and Bcc which
		/// can contain multiple email addresses.
		/// </summary>
		/// <param name="list">The address-list field to parse</param>
		/// <returns>An array of MailAddress objects representing the parsed
		/// mail addresses.</returns>
		private static MailAddress[] ParseAddressList(string list) {
			List<MailAddress> mails = new List<MailAddress>();
			string[] addr = list.Split(',');
			foreach (string a in addr) {
				Match m = Regex.Match(a.Trim(),
					@"(.*)\s*<?([A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4})>?",
					RegexOptions.IgnoreCase | RegexOptions.RightToLeft);
				if (m.Success) {
					// The above regex will erroneously match some illegal (very rare)
					// local-parts. RFC-compliant validation is not worth the effort
					// at all, so just wrap this in a try/catch block in case
					// MailAddress' ctor complains.
					try {
						mails.Add(new MailAddress(m.Groups[2].Value, m.Groups[1].Value));
					} catch { }
				}
			}
			return mails.ToArray();
		}

		/// <summary>
		/// Parses a mail message identifier from a string.
		/// </summary>
		/// <param name="field">The field to parse the message id from</param>
		/// <exception cref="ArgumentException">Thrown when the field
		/// argument does not contain a valid message identifier.</exception>
		/// <returns>The parsed message id</returns>
		/// <remarks>A message identifier (msg-id) is a globally unique
		/// identifier for a message.</remarks>
		private static string ParseMessageId(string field) {
			/* a msg-id is enclosed in < > brackets */
			Match m = Regex.Match(field, @"<(.+)>");
			if (m.Success)
				return m.Groups[1].Value;
			throw new ArgumentException("The field does not contain a valid message " +
				"identifier: " + field);
		}

		/// <summary>
		/// Parses the priority of a mail message which can be specified
		/// as part of the header information.
		/// </summary>
		/// <param name="priority">The mail header priority value. The value
		/// can be null in which case a "normal priority" is returned.</param>
		/// <returns>A value from the MailPriority enumeration corresponding to
		/// the specified mail priority. If the passed priority value is null
		/// or invalid, a normal priority is assumed and MailPriority.Normal
		/// is returned.</returns>
		private static MailPriority ParsePriority(string priority) {
			Dictionary<string, MailPriority> Map =
				new Dictionary<string, MailPriority>(StringComparer.OrdinalIgnoreCase) {
						{ "non-urgent", MailPriority.Low },
						{ "normal",	MailPriority.Normal },
						{ "urgent",	MailPriority.High }
				};
			try {
				return Map[priority];
			} catch {
				return MailPriority.Normal;
			}
		}

		/// <summary>
		/// Sets the address fields (From, To, CC, etc.) of a MailMessage
		/// object using the specified mail message header information.
		/// </summary>
		/// <param name="m">The MailMessage instance to operate on</param>
		/// <param name="header">A collection of mail and MIME headers</param>
		private static void SetAddressFields(MailMessage m, NameValueCollection header) {
			MailAddress[] addr;
			if (header["To"] != null) {
				addr = ParseAddressList(header["To"]);
				foreach (MailAddress a in addr)
					m.To.Add(a);
			}
			if (header["Cc"] != null) {
				addr = ParseAddressList(header["Cc"]);
				foreach (MailAddress a in addr)
					m.CC.Add(a);
			}
			if (header["Bcc"] != null) {
				addr = ParseAddressList(header["Bcc"]);
				foreach (MailAddress a in addr)
					m.Bcc.Add(a);
			}
			if (header["From"] != null) {
				addr = ParseAddressList(header["From"]);
				if(addr.Length > 0)
					m.From = addr[0];
			}
			if (header["Sender"] != null) {
				addr = ParseAddressList(header["Sender"]);
				if(addr.Length > 0)
					m.Sender = addr[0];
			}
			if (header["Reply-to"] != null) {
				addr = ParseAddressList(header["Reply-to"]);
				foreach (MailAddress a in addr)
					m.ReplyToList.Add(a);
			}
		}

		/// <summary>
		/// Adds a body part to an existing MailMessage instance.
		/// </summary>
		/// <param name="message">Extension method for the MailMessage class.</param>
		/// <param name="part">The body part to add to the MailMessage instance.</param>
		/// <param name="content">The content of the body part.</param>
		internal static void AddBodypart(this MailMessage message, Bodypart part, string content) {
			Encoding encoding = part.Parameters.ContainsKey("Charset") ?
				Util.GetEncoding(part.Parameters["Charset"]) : Encoding.ASCII;
			// decode content if it was encoded
			byte[] bytes;
			try {
				switch (part.Encoding) {
					case ContentTransferEncoding.QuotedPrintable:
						bytes = encoding.GetBytes(Util.QPDecode(content, encoding));
						break;
					case ContentTransferEncoding.Base64:
						bytes = Util.Base64Decode(content);
						break;
					default:
						bytes = Encoding.ASCII.GetBytes(content);
						break;
				}
			} catch {
				// If it's not a valid Base64 or quoted-printable encoded string
				// just leave the data as is
				bytes = Encoding.ASCII.GetBytes(content);
			}
	
			// If the MailMessage's Body fields haven't been initialized yet, put it there.
			// Some weird (i.e. spam) mails like to omit content-types so don't check for
			// that here and just assume it's text.
			if (message.Body == string.Empty) {
				message.Body = encoding.GetString(bytes);
				message.BodyEncoding = encoding;
				message.IsBodyHtml = part.Subtype.ToLower() == "html";
				return;
			}

			if (part.Disposition.Type == ContentDispositionType.Attachment)
				message.Attachments.Add(CreateAttachment(part, bytes));
			else
				message.AlternateViews.Add(CreateAlternateView(part, bytes));
		}

		/// <summary>
		/// Creates an instance of the Attachment class used by the MailMessage class
		/// to store mail message attachments.
		/// </summary>
		/// <param name="part">The MIME body part to create the attachment from.</param>
		/// <param name="bytes">An array of bytes composing the content of the
		/// attachment</param>
		/// <returns>An initialized instance of the Attachment class</returns>
		private static Attachment CreateAttachment(Bodypart part, byte[] bytes) {
			MemoryStream stream = new MemoryStream(bytes);
			string name = part.Disposition.Filename ?? Path.GetRandomFileName();
			Attachment attachment = new Attachment(stream, name);
			try {
				attachment.ContentId = ParseMessageId(part.Id);
			} catch {}
			try {
				attachment.ContentType = new System.Net.Mime.ContentType(
					part.Type.ToString().ToLower() + "/" + part.Subtype.ToLower());
			} catch {
				attachment.ContentType = new System.Net.Mime.ContentType();
			}
			return attachment;
		}

		/// <summary>
		/// Creates an instance of the AlternateView class used by the MailMessage class
		/// to store alternate views of the mail message's content.
		/// </summary>
		/// <param name="part">The MIME body part to create the alternate view from.</param>
		/// <param name="bytes">An array of bytes composing the content of the
		/// alternate view</param>
		/// <returns>An initialized instance of the AlternateView class</returns>
		private static AlternateView CreateAlternateView(Bodypart part, byte[] bytes) {
			MemoryStream stream = new MemoryStream(bytes);
			System.Net.Mime.ContentType contentType;
			try {
				contentType = new System.Net.Mime.ContentType(
					part.Type.ToString().ToLower() + "/" + part.Subtype.ToLower());
			} catch {
				contentType = new System.Net.Mime.ContentType();
			}
			AlternateView view = new AlternateView(stream, contentType);
			try {
				view.ContentId = ParseMessageId(part.Id);
			} catch {}
			return view;
		}

		/// <summary>
		/// Parses the body part of a MIME/RFC822 mail message.
		/// </summary>
		/// <param name="body">The body of the mail message.</param>
		/// <param name="header">The header of the mail message whose body
		/// will be parsed.</param>
		/// <returns>An array of initialized MIMEPart instances representing
		/// the body parts of the mail message.</returns>
		private static MIMEPart[] ParseMailBody(string body,
			NameValueCollection header) {
			NameValueCollection contentType = ParseMIMEField(header["Content-Type"]);
			if (contentType["Boundary"] != null) {
				return ParseMIMEParts(new StringReader(body), contentType["Boundary"]);
			} else {
				return new MIMEPart[] {
					new MIMEPart() { body = body,
						header = new NameValueCollection() {
							{ "Content-Type", header["Content-Type"] },
							{ "Content-Id", header["Content-Id"] },
							{ "Content-Transfer-Encoding", header["Content-Transfer-Encoding"] },
							{ "Content-Disposition", header["Content-Disposition"] }
						}
					}
				};
			}
		}

		/// <summary>
		/// Parses the body of a multipart MIME mail message.
		/// </summary>
		/// <param name="reader">An instance of the StringReader class initialized
		/// with a string containing the body of the mail message.</param>
		/// <param name="boundary">The boundary value as is present as part of
		/// the Content-Type header field in multipart mail messages.</param>
		/// <returns>An array of initialized MIMEPart instances representing
		/// the various parts of the MIME mail message.</returns>
		private static MIMEPart[] ParseMIMEParts(StringReader reader, string boundary) {
			List<MIMEPart> list = new List<MIMEPart>();
			string start = "--" + boundary, end = "--" + boundary + "--", line;
			// Skip everything up to the first boundary
			while ((line = reader.ReadLine()) != null) {
				if (line.StartsWith(start))
					break;
			}
			// Read MIME parts delimited by boundary strings
			while (line != null && line.StartsWith(start)) {
				MIMEPart p = new MIMEPart();
				// Read the part header
				StringBuilder header = new StringBuilder();
				while (!String.IsNullOrEmpty(line = reader.ReadLine()))
					header.AppendLine(line);
				p.header = ParseMailHeader(header.ToString());
				// Account for nested multipart content
				NameValueCollection contentType = ParseMIMEField(p.header["Content-Type"]);
				if (contentType["Boundary"] != null)
					list.AddRange(ParseMIMEParts(reader, contentType["boundary"]));
				// Read the part body
				StringBuilder body = new StringBuilder();
				while ((line = reader.ReadLine()) != null) {
					if (line.StartsWith(start))
						break;
					body.AppendLine(line);
				}
				p.body = body.ToString();
				// Add the MIME part to the list unless body is null which means the
				// body contained nested multipart content
				if (!String.IsNullOrEmpty(p.body))
					list.Add(p);
				// If the boundary is actually the end boundary, we're done 
				if (line == null || line.StartsWith(end))
					break;
			}
			return list.ToArray();
		}

		/// <summary>
		/// Glue method to create a bodypart from a MIMEPart instance.
		/// </summary>
		/// <param name="mimePart">The MIMEPart instance to create the
		/// bodypart instance from.</param>
		/// <returns>An initialized instance of the Bodypart class.</returns>
		private static Bodypart BodypartFromMIME(MIMEPart mimePart) {
			NameValueCollection contentType = ParseMIMEField(
				mimePart.header["Content-Type"]);
			Bodypart p = new Bodypart(null);
			Match m = Regex.Match(contentType["value"], "(.+)/(.+)");
			if (m.Success) {
				p.Type = ContentTypeMap.fromString(m.Groups[1].Value);
				p.Subtype = m.Groups[2].Value;
			}
			p.Encoding = ContentTransferEncodingMap.fromString(
				mimePart.header["Content-Transfer-Encoding"]);
			p.Id = mimePart.header["Content-Id"];
			foreach (string k in contentType.AllKeys)
				p.Parameters.Add(k, contentType[k]);
			p.Size = mimePart.body.Length;
			if (mimePart.header["Content-Disposition"] != null) {
				NameValueCollection disposition = ParseMIMEField(
					mimePart.header["Content-Disposition"]);
				p.Disposition.Type = ContentDispositionTypeMap.fromString(
					disposition["value"]);
				p.Disposition.Filename = disposition["Filename"];
				foreach (string k in disposition.AllKeys)
					p.Disposition.Attributes.Add(k, disposition[k]);
			}
			return p;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="SafeQueue.cs"
            Encoding="UTF8"><![CDATA[using System.Collections.Generic;
using System.Threading;

namespace S22.Imap {
	/// <summary>
	/// A thread-safe Queue
	/// </summary>
	internal class SafeQueue<T> {
		private readonly Queue<T> _queue = new Queue<T>();

		/// <summary>
		/// Adds an object to the end of the queue.
		/// </summary>
		/// <param name="item">The object to add to the queue.</param>
		public void Enqueue(T item) {
			lock (_queue) {
				_queue.Enqueue(item);
				if (_queue.Count == 1)
					Monitor.PulseAll(_queue);
			}
		}

		/// <summary>
		/// Removes and returns the object at the beginning of the queue. If
		/// the queue is empty, the method blocks the calling thread until an
		/// object is put into the queue by another thread.
		/// </summary>
		/// <returns>The object that is removed from the beginning
		/// of the queue.</returns>
		public T Dequeue() {
			lock (_queue) {
				while (_queue.Count == 0)
					Monitor.Wait(_queue);
				return _queue.Dequeue();
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="MailboxQuota.cs"
            Encoding="UTF8"><![CDATA[using System;

namespace S22.Imap {
	/// <summary>
	/// Represents an IMAP QUOTA entry for a resource which typically consists of
	/// a resource name, the current usage of the resource, and the resource limit.
	/// </summary>
	internal class MailboxQuota {
		/// <summary>
		/// Initializes a new instance of the MailboxQuota class with the specified
		/// values.
		/// </summary>
		/// <param name="Name">The name of the resource this MailboxQuota instance
		/// describes.</param>
		/// <param name="Usage">The current usage of the resource in units of 1024 
		/// bytes.</param>
		/// <param name="Limit">The limit of the resource in units of 1024 bytes.</param>
		internal MailboxQuota(string Name, uint Usage, uint Limit) {
			this.ResourceName = Name.ToUpperInvariant();
			this.Usage = Convert.ToUInt64(Usage) * 1024;
			this.Limit = Convert.ToUInt64(Limit) * 1024;
		}

		/// <summary>
		/// The name of the resource this MailboxQuota instance describes.
		/// </summary>
		public string ResourceName {
			get;
			private set;
		}

		/// <summary>
		/// The current usage of the resource this MailboxQuota instance describes,
		/// in bytes.
		/// </summary>
		public UInt64 Usage {
			get;
			private set;
		}
		
		/// <summary>
		/// The limit of the resource this MailboxQuota instance describes,
		/// in bytes.
		/// </summary>
		public UInt64 Limit {
			get;
			private set;
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="IImapClient.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Net.Mail;

namespace S22.Imap
{
    public interface IImapClient
    {
        /// <summary>
        /// The default mailbox to operate on, when no specific mailbox name was indicated
        /// to methods operating on mailboxes. This property is initially set to "INBOX".
        /// </summary>
        /// <exception cref="ArgumentNullException">The value specified for a set operation is
        /// null.</exception>
        /// <exception cref="ArgumentException">The value specified for a set operation is equal
        /// to String.Empty ("").</exception>
        /// <remarks>This property is initialized to "INBOX"</remarks>
        string DefaultMailbox { get; set; }

        /// <summary>
        /// Indicates whether the client is authenticated with the server
        /// </summary>
        bool Authed { get; }

        /// <summary>
        /// This event is raised when a new mail message is received by the server.
        /// </summary>
        /// <remarks>To probe a server for IMAP IDLE support, the <see cref="Supports"/>
        /// method can be used, specifying "IDLE" for the capability parameter.
        /// 
        /// Notice that the event handler will be executed on a threadpool thread.
        /// </remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="NewMessage"]/*'/>
        event EventHandler<IdleMessageEventArgs> NewMessage;

        /// <summary>
        /// This event is raised when a message is deleted on the server.
        /// </summary>
        /// <remarks>To probe a server for IMAP IDLE support, the <see cref="Supports"/>
        /// method can be used, specifying "IDLE" for the capability parameter.
        /// 
        /// Notice that the event handler will be executed on a threadpool thread.
        /// </remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="MessageDeleted"]/*'/>
        event EventHandler<IdleMessageEventArgs> MessageDeleted;

        /// <summary>
        /// Attempts to establish an authenticated session with the server using the specified
        /// credentials.
        /// </summary>
        /// <param name="username">The username with which to login in to the IMAP server.</param>
        /// <param name="password">The password with which to log in to the IMAP server.</param>
        /// <param name="method">The requested method of authentication. Can be one of the values
        /// of the AuthMethod enumeration.</param>
        /// <exception cref="InvalidCredentialsException">Thrown if authentication using the
        /// supplied credentials failed.</exception>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="Login"]/*'/>
        void Login(string username, string password, AuthMethod method);

        /// <summary>
        /// Logs an authenticated client out of the server. After the logout sequence has
        /// been completed, the server closes the connection with the client.
        /// </summary>
        /// <exception cref="BadServerResponseException">Thrown if an unexpected response is
        /// received from the server during the logout sequence</exception>
        /// <remarks>Calling Logout in a non-authenticated state has no effect</remarks>
        void Logout();

        /// <summary>
        /// Returns a listing of capabilities that the IMAP server supports. All strings
        /// in the returned array are guaranteed to be upper-case.
        /// </summary>
        /// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
        /// from the server during the request. The message property of the exception contains the
        /// error message returned by the server.</exception>
        /// <returns>A listing of supported capabilities as an array of strings</returns>
        /// <remarks>This is one of the few methods which can be called in a non-authenticated
        /// state.</remarks>
        string[] Capabilities();

        /// <summary>
        /// Returns whether the specified capability is supported by the server.
        /// </summary>
        /// <param name="capability">The capability to probe for (for example "IDLE")</param>
        /// <exception cref="BadServerResponseException">Thrown if an unexpected response is received
        /// from the server during the request. The message property of the exception contains
        /// the error message returned by the server.</exception>
        /// <returns>Returns true if the specified capability is supported by the server, 
        /// otherwise false is returned.</returns>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="ctor-2"]/*'/>
        bool Supports(string capability);

        /// <summary>
        /// Changes the name of a mailbox.
        /// </summary>
        /// <param name="mailbox">The mailbox to rename.</param>
        /// <param name="newName">The new name the mailbox will be renamed to.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mailbox could
        /// not be renamed. The message property of the exception contains the error message
        /// returned by the server.</exception>
        void RenameMailbox(string mailbox, string newName);

        /// <summary>
        /// Permanently removes a mailbox.
        /// </summary>
        /// <param name="mailbox">Name of the mailbox to remove.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mailbox could
        /// not be removed. The message property of the exception contains the error message
        /// returned by the server.</exception>
        void DeleteMailbox(string mailbox);

        /// <summary>
        /// Creates a new mailbox with the given name.
        /// </summary>
        /// <param name="mailbox">Name of the mailbox to create.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mailbox could
        /// not be created. The message property of the exception contains the error message
        /// returned by the server.</exception>
        void CreateMailbox(string mailbox);

        /// <summary>
        /// Retrieves a list of all available and selectable mailboxes on the server.
        /// </summary>
        /// <returns>A list of all available and selectable mailboxes</returns>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if a list of mailboxes
        /// could not be retrieved. The message property of the exception contains the
        /// error message returned by the server.</exception>
        /// <remarks>The mailbox INBOX is a special name reserved to mean "the
        /// primary mailbox for this user on this server"</remarks>
        string[] ListMailboxes();

        /// <summary>
        /// Permanently removes all messages that have the \Deleted flag set from the
        /// specified mailbox.
        /// </summary>
        /// <param name="mailbox">The mailbox to remove all messages from that have the
        /// \Deleted flag set. If this parameter is omitted, the value of the DefaultMailbox
        /// property is used to determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the expunge operation could
        /// not be completed. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <seealso cref="DeleteMessage"/>
        void Expunge(string mailbox = null);

        /// <summary>
        /// Retrieves status information (total number of messages, various attributes
        /// as well as quota information) for the specified mailbox.</summary>
        /// <param name="mailbox">The mailbox to retrieve status information for. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <returns>A MailboxInfo object containing status information for the
        /// mailbox.</returns>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the operation could
        /// not be completed. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <remarks>Not all IMAP servers support the retrieval of quota information. If
        /// it is not possible to retrieve this information, the UsedStorage and FreeStorage
        /// properties of the returned MailboxStatus instance are set to 0.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMailboxInfo"]/*'/>
        MailboxInfo GetMailboxInfo(string mailbox = null);

        /// <summary>
        /// Searches the specified mailbox for messages that match the given
        /// searching criteria.
        /// </summary>
        /// <param name="criteria">A search criteria expression. Only messages
        /// that match this expression will be included in the result set returned
        /// by this method.</param>
        /// <param name="mailbox">The mailbox that will be searched. If this parameter is
        /// omitted, the value of the DefaultMailbox property is used to determine the mailbox
        /// to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the search could
        /// not be completed. The message property of the exception contains the error
        /// message returned by the server.</exception>
        /// <exception cref="NotSupportedException">Thrown if the search values
        /// contain characters beyond the ASCII range and the server does not support
        /// handling such strings.</exception>
        /// <returns>An array of unique identifier (UID) message attributes which
        /// can be used with the GetMessage family of methods to download mail
        /// messages.</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="Search"]/*'/>
        uint[] Search(SearchCondition criteria, string mailbox = null);

        /// <summary>
        /// Retrieves a mail message by its unique identifier message attribute.
        /// </summary>
        /// <param name="uid">The unique identifier of the mail message to retrieve</param>
        /// <param name="seen">Set this to true to set the \Seen flag for this message
        /// on the server.</param>
        /// <param name="mailbox">The mailbox the message will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be fetched. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An initialized instance of the MailMessage class representing the
        /// fetched mail message</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessage-1"]/*'/>
        MailMessage GetMessage(uint uid, bool seen = true, string mailbox = null);

        /// <summary>
        /// Retrieves a mail message by its unique identifier message attribute with the
        /// specified fetch option.
        /// </summary>
        /// <param name="uid">The unique identifier of the mail message to retrieve</param>
        /// <param name="options">A value from the FetchOptions enumeration which allows
        /// for fetching selective parts of a mail message.</param>
        /// <param name="seen">Set this to true to set the \Seen flag for this message
        /// on the server.</param>
        /// <param name="mailbox">The mailbox the message will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be fetched. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An initialized instance of the MailMessage class representing the
        /// fetched mail message</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.
        /// <para>If you need more fine-grained control over which parts of a mail
        /// message to fetch, consider using one of the overloaded GetMessage methods.
        /// </para>
        /// </remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessage-2"]/*'/>
        MailMessage GetMessage(uint uid, FetchOptions options,
                                               bool seen = true, string mailbox = null);

        /// <summary>
        /// Retrieves a mail message by its unique identifier message attribute providing
        /// fine-grained control over which message parts to retrieve.
        /// </summary>
        /// <param name="uid">The unique identifier of the mail message to retrieve</param>
        /// <param name="callback">A delegate which will be invoked for every MIME body
        /// part of the mail message to determine whether it should be fetched from the
        /// server or skipped.</param>
        /// <param name="seen">Set this to true to set the \Seen flag for this message
        /// on the server.</param>
        /// <param name="mailbox">The mailbox the message will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be fetched. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An initialized instance of the MailMessage class representing the
        /// fetched mail message</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessage-3"]/*'/>
        MailMessage GetMessage(uint uid, ExaminePartDelegate callback,
                                               bool seen = true, string mailbox = null);

        /// <summary>
        /// Retrieves a set of mail messages by their unique identifier message attributes.
        /// </summary>
        /// <param name="uids">An array of unique identifiers of the mail messages to
        /// retrieve</param>
        /// <param name="seen">Set this to true to set the \Seen flag for the fetched
        /// messages on the server.</param>
        /// <param name="mailbox">The mailbox the messages will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail messages could
        /// not be fetched. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An array of initialized instances of the MailMessage class representing
        /// the fetched mail messages</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessages-1"]/*'/>
        MailMessage[] GetMessages(uint[] uids, bool seen = true, string mailbox = null);

        /// <summary>
        /// Retrieves a set of mail messages by their unique identifier message attributes
        /// providing fine-grained control over which message parts to retrieve of each
        /// respective message.
        /// </summary>
        /// <param name="uids">An array of unique identifiers of the mail messages to
        /// retrieve</param>
        /// <param name="callback">A delegate which will be invoked for every MIME body
        /// part of a mail message to determine whether it should be fetched from the
        /// server or skipped.</param>
        /// <param name="seen">Set this to true to set the \Seen flag for the fetched
        /// messages on the server.</param>
        /// <param name="mailbox">The mailbox the messages will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail messages could
        /// not be fetched. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An array of initialized instances of the MailMessage class representing
        /// the fetched mail messages</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessages-3"]/*'/>
        MailMessage[] GetMessages(uint[] uids, ExaminePartDelegate callback,
                                                  bool seen = true, string mailbox = null);

        /// <summary>
        /// Retrieves a set of mail messages by their unique identifier message attributes
        /// with the specified fetch option.
        /// </summary>
        /// <param name="uids">An array of unique identifiers of the mail messages to
        /// retrieve</param>
        /// <param name="options">A value from the FetchOptions enumeration which allows
        /// for fetching selective parts of a mail message.</param>
        /// <param name="seen">Set this to true to set the \Seen flag for the fetched
        /// messages on the server.</param>
        /// <param name="mailbox">The mailbox the messages will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail messages could
        /// not be fetched. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An array of initialized instances of the MailMessage class representing
        /// the fetched mail messages</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="GetMessages-2"]/*'/>
        MailMessage[] GetMessages(uint[] uids, FetchOptions options,
                                                  bool seen = true, string mailbox = null);

        /// <summary>
        /// Stores the specified mail message on the IMAP server.
        /// </summary>
        /// <param name="message">The mail message to store on the server.</param>
        /// <param name="seen">Set this to true to set the \Seen flag for the message
        /// on the server.</param>
        /// <param name="mailbox">The mailbox the message will be stored in. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to store the message in.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be stored. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>The unique identifier (UID) of the stored message.</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <seealso cref="StoreMessages"/>
        /// <include file='Examples.xml' path='S22/Imap/ImapClient[@name="StoreMessage"]/*'/>
        uint StoreMessage(MailMessage message, bool seen = false, string mailbox = null);

        /// <summary>
        /// Stores the specified mail messages on the IMAP server.
        /// </summary>
        /// <param name="messages">An array of mail messages to store on the server.</param>
        /// <param name="seen">Set this to true to set the \Seen flag for each message
        /// on the server.</param>
        /// <param name="mailbox">The mailbox the messages will be stored in. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to store the messages in.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail messages could
        /// not be stored. The message property of the exception contains the error message
        /// returned by the server.</exception>
        /// <returns>An array containing the unique identifiers (UID) of the stored
        /// messages.</returns>
        /// <remarks>A unique identifier (UID) is a 32-bit value assigned to each
        /// message which uniquely identifies the message within a mailbox. No two
        /// messages in a mailbox share the the same UID.</remarks>
        /// <seealso cref="StoreMessage"/>
        uint[] StoreMessages(MailMessage[] messages, bool seen = false,
                                             string mailbox = null);

        /// <summary>
        /// Copies a mail message with the specified UID to the specified destination
        /// mailbox.
        /// </summary>
        /// <param name="uid">The UID of the mail message that is to be copied.</param>
        /// <param name="destination">The name of the mailbox to copy the message
        /// into.</param>
        /// <param name="mailbox">The mailbox the message will be copied from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be copied to the specified destination. The message property of the
        /// exception contains the error message returned by the server.</exception>
        /// <seealso cref="MoveMessage"/>
        void CopyMessage(uint uid, string destination, string mailbox = null);

        /// <summary>
        /// Moves a mail message with the specified UID to the specified destination
        /// mailbox.
        /// </summary>
        /// <param name="uid">The UID of the mail message that is to be moved.</param>
        /// <param name="destination">The name of the mailbox to move the message
        /// into.</param>
        /// <param name="mailbox">The mailbox the message will be moved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be moved into the specified destination. The message property of the
        /// exception contains the error message returned by the server.</exception>
        /// <seealso cref="CopyMessage"/>
        /// <seealso cref="DeleteMessage"/>
        void MoveMessage(uint uid, string destination, string mailbox = null);

        /// <summary>
        /// Deletes the mail message with the specified UID.
        /// </summary>
        /// <param name="uid">The UID of the mail message that is to be deleted.</param>
        /// <param name="mailbox">The mailbox the message will be deleted from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message could
        /// not be deleted. The message property of the exception contains the error
        /// message returned by the server.</exception>
        /// <seealso cref="MoveMessage"/>
        void DeleteMessage(uint uid, string mailbox = null);

        /// <summary>
        /// Retrieves the IMAP message flag attributes for a mail message.
        /// </summary>
        /// <param name="uid">The UID of the mail message to retrieve the flag
        /// attributes for.</param>
        /// <param name="mailbox">The mailbox the message will be retrieved from. If this
        /// parameter is omitted, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message flags
        /// could not be retrieved. The message property of the exception contains the error
        /// message returned by the server.</exception>
        /// <returns>A list of IMAP flags set for the message with the matching UID.</returns>
        /// <seealso cref="SetMessageFlags"/>
        /// <seealso cref="AddMessageFlags"/>
        /// <seealso cref="RemoveMessageFlags"/>
        MessageFlag[] GetMessageFlags(uint uid, string mailbox = null);

        /// <summary>
        /// Sets the IMAP message flag attributes for a mail message.
        /// </summary>
        /// <param name="uid">The UID of the mail message to set the flag
        /// attributes for.</param>
        /// <param name="mailbox">The mailbox that contains the mail message. If this
        /// parameter is null, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <param name="flags">One or multiple message flags from the MessageFlag 
        /// enumeration.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message flags
        /// could not be set. The message property of the exception contains the error
        /// message returned by the server.</exception>
        /// <remarks>This method replaces the current flag attributes of the message
        /// with the specified new flags. If you wish to retain the old attributes, use
        /// the <see cref="AddMessageFlags"/> method instead.</remarks>
        /// <seealso cref="GetMessageFlags"/>
        /// <seealso cref="AddMessageFlags"/>
        /// <seealso cref="RemoveMessageFlags"/>
        void SetMessageFlags(uint uid, string mailbox, params MessageFlag[] flags);

        /// <summary>
        /// Adds the specified set of IMAP message flags to the existing flag attributes
        /// of a mail message.
        /// </summary>
        /// <param name="uid">The UID of the mail message to add the flag
        /// attributes to.</param>
        /// <param name="mailbox">The mailbox that contains the mail message. If this
        /// parameter is null, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <param name="flags">One or multiple message flags from the MessageFlag 
        /// enumeration.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message flags
        /// could not be added. The message property of the exception contains the error
        /// message returned by the server.</exception>
        /// <remarks>This method adds the specified set of flags to the existing set of
        /// flag attributes of the message. If you wish to replace the old attributes, use
        /// the <see cref="SetMessageFlags"/> method instead.</remarks>
        /// <seealso cref="GetMessageFlags"/>
        /// <seealso cref="SetMessageFlags"/>
        /// <seealso cref="RemoveMessageFlags"/>
        void AddMessageFlags(uint uid, string mailbox, params MessageFlag[] flags);

        /// <summary>
        /// Removes the specified set of IMAP message flags from the existing flag
        /// attributes of a mail message.
        /// </summary>
        /// <param name="uid">The UID of the mail message to remove the flag
        /// attributes to.</param>
        /// <param name="mailbox">The mailbox that contains the mail message. If this
        /// parameter is null, the value of the DefaultMailbox property is used to
        /// determine the mailbox to operate on.</param>
        /// <param name="flags">One or multiple message flags from the MessageFlag 
        /// enumeration.</param>
        /// <exception cref="NotAuthenticatedException">Thrown if the method was called
        /// in a non-authenticated state, i.e. before logging into the server with
        /// valid credentials.</exception>
        /// <exception cref="BadServerResponseException">Thrown if the mail message flags
        /// could not be removed. The message property of the exception contains the error
        /// message returned by the server.</exception>
        /// <remarks>This method removes the specified set of flags from the existing set of
        /// flag attributes of the message. If you wish to replace the old attributes, use
        /// the <see cref="SetMessageFlags"/> method instead.</remarks>
        /// <seealso cref="GetMessageFlags"/>
        /// <seealso cref="SetMessageFlags"/>
        /// <seealso cref="AddMessageFlags"/>
        void RemoveMessageFlags(uint uid, string mailbox, params MessageFlag[] flags);

        /// <summary>
        /// Releases all resources used by this ImapClient object.
        /// </summary>
        void Dispose();
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_3fdd2b942e254ff7a7c85cd6454b463c.dll">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
Fg11EwYAdgO+DwYATRZ1EwYAvhZ1ExIAERM8HgYAXiF1EwYAfBP+IgYAoRl1EwYAEBq+DxIA9BkC
HRIABCICHRIAzxcCHRIA/BQCHRIALAwCHQYABxZ1EwYAQQF1ExIAXx0CHQYAeBZ1EwYAYxZ1EwYA
TSG+DxIALRmpHRIAUAzkAxIADBWCEhIANxWCEhIAZSPkAwYAzBQhHQYAEwohHQYA+hM+AgYAPSB1
ExIA7BQCHQYARRE+AgYAfBh1EwAAAACrAQAAAAABAAEAAQAQAN8TnQI9AAEAAQAAABAAwhp9G10A
AQADAAABEACgHH0bcQADAAcAAQEAAAQIrhd5AAQACgABIBAARCGuF10ACAAKAAAAEADhC64XXQAV
ACYAASAQAMIVrhddABYALgABAQAAYguuF3kAGgA2AIABEABeF64XXQAeADYAAQEAAOkPrhd5AB4A
NwCAARAAhxeuF10AJQA3AAEBAACNC64XeQAlADgAgAEQAHgXrhddAC0AOAABIBAAHRauF1UALQA5
AAEgEACSFq4XVQAtAD0AASAQAO0VrhdVAC0AQQABAQAAUh2uF3kALQBFAAEAEAC6HK4XmQAyAEUA
oQAAAOIfrhcAADUATAABABAA4x+uF10ANQBuAAEBAAD5DK4X7QBHALAAAQEAAK4Prhd5AEcAtAAB
IBAAOReuF10ATgC0AAAAEACHAq4XXQBVAMQAACAQALoerhddAFgAywCAARAAEBSuF10AWwDSAIAB
EACMGK4XXQBdAN0AAQEAAKIPrhd5AF0A6wAAABAAByGuF10AZADrAAEAEAB4Fa4XXQBmAPAAgAEQ
AJoSrhddAGsAHwEAABAAWBiuF80AawArAQAAEAA4Fq4XVQBrADUBAAAQANgArhddAGsAOQEDIRAA
wQIAAF0AbAA8AQMBAABsGgAAeQByAEMBAyEQAMECAABdAJQAQwERAK0T6gkRAAcM7gkRAFoI8gkG
BkoC9glWgAUU+QlWgHwB+QlWgGkR+QkBAFoGYAIBAJAF/QkBAKYFYAIBACgHAQoBAHwEYAIBAD0G
YAIBAOwFCQoBANYFDQoBAMIGDQoBADIEYAIBACAGEAoBACgFYAIBAAYGYAIBAHUYFAoBAJAFGQoB
ANkGAQoBAHYFYAITAKoXHQoGBkoC9glWgAMXGQpWgDsLGQpWgDIgGQoGBkoC9glWgAMXCQpWgJQB
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
AgBTGQAAAQBFFwAAAgDXIQAAAQC6CQAAAQC6CQAAAgBTGQAAAQBFFwAAAgDXIQAAAQDeIAAAAgDS
AQAAAwAGIAAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAA
AQDoCgAAAgA3CAAAAwAPCAAAAQCSIwAAAQCSIgAAAgC2CgAAAQCSIgAAAQCSIhAQAQCSIhAQAQCS
IgAAAQBSAhAQAgCSIgAAAQAHBBAQAgDVExAQAwCSIgAAAQAHBAAAAgBsHRAQAwDVExAQBACSIgAA
AQAHBAAAAgClERAQAwDVExAQBACSIgAAAQAzGhAQAgDVExAQAwCSIgAAAQAzGgAAAgClERAQAwDV
ExAQBACSIgAAAQAzGgAAAgBsHRAQAwDVExAQBACSIgAAAQC6CRAQAgDVExAQAwCSIgAAAQBSGxAQ
AgDVExAQAwCSIgAAAQAHBAAAAgBnFBAQAwCSIgAAAQAHBAAAAgBnFBAQAwCSIgAAAQAHBBAQAgCS
IgAAAQAHBBAQAgCSIgAAAQAHBAAAAgCSIgAAAwCaHAAAAQAHBAAAAgCSIgAAAwCaHAAAAQAHBAAA
AgCSIgAAAwCaHAAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBS
DwAAAQBSDwAAAQBSDwAAAQDxChAQAgBsIRAQAwACExAQBADwDAAAAQDxCgAAAgBsIQAAAwDoCgAA
BAA3CBAQBQAPCBAQBgACExAQBwDwDAAAAQDxCgAAAgBsIQAAAwACEwAABADwDAAAAQDDDBAQAgC6
DwAAAQDoCgAAAgA3CAAAAwAPCAAAAQDkBwAAAQDkBxAQAgDpHBAQAQDpHAAAAQDrIAAAAQCSIwAA
AQCSIgAAAgC2CgAAAQCSIgAAAQCSIgAAAQCSIhAQAQCSIhAQAQCSIhAQAQCSIhAQAQCSIgAAAQBS
AhAQAgCSIgAAAQAHBBAQAgDVExAQAwCSIgAAAQAHBAAAAgBsHRAQAwDVExAQBACSIgAAAQAHBAAA
AgClERAQAwDVExAQBACSIgAAAQAzGhAQAgDVExAQAwCSIgAAAQAzGgAAAgClERAQAwDVExAQBACS
IgAAAQAzGgAAAgBsHRAQAwDVExAQBACSIgAAAQC6CRAQAgDVExAQAwCSIgAAAQBSGxAQAgDVExAQ
AwCSIgAAAQAHBBAQAgDVExAQAwCSIgAAAQAHBBAQAgCSIgAAAQAHBAAAAgAHGBAQAwDVExAQBACS
IgAAAQAHBBAQAgDVExAQAwCSIhAQAQCSIgAAAQAHBAAAAgBnFBAQAwCSIgAAAQAHBAAAAgBnFBAQ
AwCSIgAAAQAHBBAQAgCSIgAAAQAHBBAQAgCSIgAAAQAHBAAAAgCSIgAAAwCaHAAAAQAHBAAAAgCS
IgAAAwCaHAAAAQAHBAAAAgCSIgAAAwCaHAAAAQDjGAAAAgCRDxAQAQCSIgAAAQCkEwAAAQAFHwAA
AgAPCAAAAQBIIQAAAQBIIQAAAgClEQAAAwAFHwAAAQCSHwAAAQDJCgAAAgCUHAAAAwBJGwAABABD
AwAABQD7AQAABgADCQAABwAjCQAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAA
AQBSDwAAAQDJCgAAAgA9CQAAAwBuHwAAAQBSDwAAAQBSDwAAAQBSDwAAAQBJGwAAAgBDAwAAAwD7
AQAAAQBSDwAAAQBSDwAAAQBSDwAAAQC6CQAAAQCkEwAAAQDuHgAAAQAsHgAAAQCkEwAAAgBuGAAA
AQDQGAAAAgCkEwAAAwBuGBAQBACeHQAAAQDQGAAAAgD3IQAAAQDQGAAAAgCkEwAAAwBuGAAAAQDQ
GAAAAgCkEwAAAQDaIQAAAQDaIQAAAQBuGAAAAQCnBwAAAQClIQAAAQCnBwAAAQDSIwAAAQCkEwAA
AgBuGAAAAQC6CQAAAgBIIQAAAwBVIAAAAQBIIQAAAgAVHAAAAQBIIQAAAgAVHAAAAQDtIgAAAgBu
GAAAAQB1GAAAAgBVIwAAAQAQIQAAAQBSDwAAAQBSDwAAAQDaIQAAAQDaIQAAAQD0DAAAAQDaIQAA
AQDaIQAAAQDaIQAAAQD1CgAAAgDaIQAAAQDaIQAAAQCODwAAAQCODwAAAQD0DAAAAQD0DAAAAQD0
DAAAAQDaIQAAAQDaIQAAAQAzGgAAAQAHBAAAAQAHBAAAAQDaIQAAAQAnGQAAAQAnGQAAAQAnGQAA
AQBSDwAAAQBSDwAAAQBSDwAAAQBSDwAAAQCIFQAAAgBBHwAAAwBPHwAAAQBSDwAAAQDuHgAAAQAc
GgAAAgC3HQAAAQC5IAAAAgDjGAAAAwDPHAAAAQB/GgAAAQBNCAAAAQBSDwAAAgBUEAAAAQBSDwAA
AgBUEAAAAQBSDwAAAQDuHgAAAQDuHgAAAQD1CgAAAQDuHgAAAQCQGgAAAQCEGQAAAQCEGQAAAQC6
CQAAAQC6CQAAAgBTGQAAAQBFFwAAAgDXIQAAAQBwEwAAAQDjGAAAAgBZIQAAAwD0EwAABAAYGgAA
AQDuHgAAAQDuHgAAAQDTFwAAAQDTFwAAAQDpAhUApQAVAFAACQADGgEAEQADGgUAGQADGgEAIQAD
GgoAMQADGhAAOQADGhAAQQADGhAASQADGhAAUQADGhAAWQADGhAAYQADGhAAaQADGhAAcQADGgEA
sQADGgEA2QADGhUA6QADGgEAQQEDGgEAUQIDGgEAUQJ0CBAAUQIDAhAAUQIqCBAAWQLlEEYAiQAD
GhAAYQLaEwEAkQCPE0oAEQIUHkYAkQBWHlAAFADMGV4AHABJIG4AoQBkCkYASQJVEXMAeQL5HHgA
IQIzE4oAUQFKEZAAUQEkA5QASQLwHpwAkQKwHqIAmQL6EEYASQLwHqcAoQIDGq8AwQIDGr0AwQI0
DcQAwQLMDAEAgQADBMoAuQD6EEYASQLwHs8AyQIDGtUA0QJ2I9wAAQKxIeAASQHSDAEAYQLMDAEA
eQA0HuQA2QJ0HuoAqQBDCUYA4QK2GfAAeQADGgEAuQADGgEA6QJNCvkA6QIbIwIBwQADGggB4QAD
GgEAAQOQDBkBJAADGiYBAQEDGgEAAQEcC0cBJADbHk4BLADMGWIBNABJIG4AJABeE3YBNACxIeAA
EQP6EEYAPAADGgEAGQPOEdwAPADcCZEBPABKA5wBoQEDGhAAPACaIqIBSQJZGUYASQKGI60BGQMk
A9wASQLwHsEBSQIDGtQBJAADGgEARAADGiYBRABKA+IBRABeE3YBTAADGiYBTABKA+IBTABeE3YB
VAADGiYBVABKA+IBVABeE3YBqQADGgEAqQADGhAAqQADGh4CMQEDGgEAKQMzCz0CMQPlCUkCKQN1
Dz0COQMDGgEASQL3I2ACQQMDGgEAXAADGgEAaQEDGgEAWQEDGnECWQEpE3cCcQEDGn0CeQEDGoMC
eQH4HxAASQJeEXMASQKTD44CSQINEZMCSQKKE0YAKQJ5H6ICSQJSCKgCUQOuEK4CKQIDEbQCKQIf
AqICKQIMHLoCgQEDGsQAWQMzEcACYQP6EMcCSQKuGUYAUQO/EMcCSQJaH80CZAADGn0CeQIkH9wC
eQKaIvwCaQObGRIDaQN0HxkDMQMUIB4DSQL3HiQDKQKZAaICUQE0DTEDiQEDGgEAUQEAD9wAiQGa
IkwDcQMDGn0CeQNSCFEDUQEJD1oDbAADGgEAeQMgEZkDgQP7HeAAkQF0HaEDiQNeE6cDkQMxD0YA
eQNSCMEBbABKA5wBbACaIqIBdAADGiYBdABKA+IBfAADGgEAdADyIu8DdABeE3YBfABKA5wBfACa
IqIBUQNIAQIEUQM/AQcEmQEDGhAASQL5HHMAGQMTC0YAmQMDGh4ChAADGgEAhABKA5wBhACaIqIB
jAADGgEAjABKA5wBjACaIqIBSQJKEdwAoQP6EEYAAQHsB0cBeQMeEa0BeQMgEYkElAADGiYBlABK
A+IBnAADGgEAlADyIu8DlABeE3YBnABKA5wBnACaIqIBsQMDGhAAuQMDGhAAwQMDGn0CYQEDGt0E
YQHzB+QEYQFTIQEAaQEuEukEyQMDGn0CaQGWA+4EaQFTIQEAYQELFAEAaQHKFwEAXAApD5wBXAAh
D24ApAADGgEAoQPaDAcEpABKA5wBpACaIqIBYQFmIQEAUQHMDAEAWQHMDAEASQKZH0YAUQNrASQF
0QPMGToFAQJJIEAF+QFeE0QFAQEcC0kF+QEDGgEA+QFKA3MFCQL8IXkFCQL6EEQFkQCdI38FrABe
E3YBkQAMH0YAkQALF44FtADMGV4AvABJIG4AkQC4AY4FkQDIAo4FkQDIHqUFxAC/INwAFAC/INwA
kQDkEuAAkQAyELQFKQJ2CkYAkQCuIkYAkQCSHboFeQL5HMAF+QEbHNUFAQEDGhAAKQK1CKICKQKJ
HeUFAQHsB+wFEQK+CkYASQLvI6IAgQD6EEQFxADMGV4AzABJIG4ASQIDGiUGGQMkAy0GIQJ5C0wG
MQJUC0YAMQLCHVIG6QPbHlgG+QPMGToF6QNeE0QFIQIIA0YAUQHTEeAAUQHaEV4GrAADGgEArABK
A+IBkQADGgEAkQASEJMGCQQnC5oGkQAYHxAAkQCqI54GGQO5B0YASQJ/HcQGSQKxB8kG+QFnE3MF
SQINEc8GeQNbG+cGEQTMGToFSQKKE8kG1AADGgEAEQIDGnMF1ABKA5wB1ACaIqIBQQMDGhAA3AAD
GiYB3ABKA+IB3ABeE3YBtABKA5wBkQCYEz4HkQDYGD4HkQCEIY4FJADyIu8DkQC3IhAAkQBDEJMG
kQDzEuQEFABKA5wBxABKA5wBiQEDGsQAGQSkCpoGoQADGlcHIQIWAxAAMQIDGhAAIQKJC18HMQID
GgEAGQIDGnQH5AADGgEA5ADcCZEB5ABKA5wB5ACaIqIB+QHkHrcHJABKA+IB7AADGpwB9AADGgEA
9ABKA5wB9AC/INwASQILFOUH7ABFD+AAyQAXDPcHCQL6EPwHAQHsBwsISQKiIhIIBAEDGn0CeQK4
Eh8ISQJ1D88GDAEMCkoIUQMTD3IIUQMTD3gIUQNIAYwIIQP6EEYAKQLBCKICSQJSCJEISQJGH6oI
oQEDGh4CKQImELYImQEkA9wAmQHOEdwAEQPaDM0IFAEaDwcJHAEpD5wBHAG/INwAaQOzEhkDaQNV
HyUJHAEhD24AHAEDGgEACAAUADwJCAAYAEEJCAAcAEYJAgBNAOEJAgBZAOEJDgBdAAAACABsADwJ
CABwAEEJCAB0AEYJCAB8ADwJCACAAEEJCACEAEYJCACIAEsJCACMAFAJCACQAFUJCACYADwJCACc
AEEJCACgAEYJCACkAEsJCACoAFAJCACsAFUJCACwAFoJCAC4ADwJCAC8AEEJCADAAEYJCADEAEsJ
EgABATwJEgAFATwJEgANATwJAgAVAeEJEgAZATwJCAAgATwJCAAkAUEJAgAlAeEJCAAoAUYJEgAp
ATwJCAAsAUsJCAAwAVAJCAA0AVUJAgA1AeEJEgA5ATwJAgBBAeEJEgBFATwJAgBRAeEJEgBVATwJ
AgBhAeEJEgBlATwJAgBtAeMJEgBxATwJCAB4ATwJAgB5AeMJCAB8AUEJEgB9ATwJCACAAUYJCACE
AUsJCACIAVAJEgCJATwJCACMAVUJEgCVATwJEgCdATwJEgClATwJCADMATwJCADQAUEJCADUAUYJ
CADYAUsJCADcAVAJCADgAVUJCADkAVoJCADoAV8JCADsAWQJCADwAWkJCAD0AW4JCAD4AXMJCAD5
AeUJCAD8AXgJAgD9AeMJCAAAAn0JEgABAjwJCAAEAoIJCAAIAocJCAAMAowJCAAQApEJCAAUApYJ
CAAVAjwJCAAYApsJAgAZAuMJCAAcAqAJEgAdAjwJCAAgAqUJCAAkAqoJCAAoAq8JCAAsArQJCAAw
ArkJCAA0Ar4JEgA1AjwJCAA4AsMJCAA8AsgJCABAAs0JCABEAtIJCABIAtcJCABMAtwJAgBNAuEJ
AgBRAuEJEgBxAjwJEgB1AjwJEgB5AjwJEgB9AjwJEgCFAjwJAgCNAuEJEgCRAjwJAgCdAuEJEgCh
AjwJAgCtAuEJEgCxAjwJAgC5AuEJEgC9AjwJAgDJAuEJEgDNAjwJAgDZAuEJEgDdAjwJAgDlAuMJ
EgDpAjwJAgDxAuMJEgD1AjwJAgD9AuEJEgABAzwJEgAJAzwJAgAVA+EJEgAZAzwJAgAhA+EJEgAl
AzwJEgApAzwJEgA1AzwJEgBBAzwJEgBJAzwJEgBRAzwJEgCBAzwJAgAxBOMJKQB7AKQOLgALAEEJ
LgATAHwOLgAbAIUOLgAjAKQOLgArAK0OLgAzANYOLgA7ANYOLgBDANYOLgBLAK0OLgBTANwOLgBb
ANYOLgBjAPMOQwBrAEEJSQB7AKQOYQCDAEEJYwBzAEEJAQGDAEEJIQGDAEEJQQGDAEEJYAGDAEEJ
YQGDAEEJgAGDAEEJgQGDAEEJoAGDAEEJoQGDAEEJwAGDAEEJwQGDAEEJ4AGDAEEJ4QGDAEEJAAKD
AEEJAQKDAEEJIAKDAEEJIQKDAEEJQAKDAEEJQQKDAEEJYAKDAEEJYQKDAEEJgAKDAEEJgQKDAEEJ
oAKDAEEJwAKDAEEJwQKDAEEJ4AKDAEEJ4QKDAEEJAAODAEEJAQODAEEJIAODAEEJQAODAEEJYAOD
AEEJYwMLAEEJgAODAEEJgwMLAEEJoAODAEEJwAODAEEJ4AODAEEJAASDAEEJAwQLAEEJIASDAEEJ
QASDAEEJYASDAEEJgASDAEEJgwSDAEEJwwSDAEEJ4AWDAEEJAAaDAEEJIAaDAEEJQAaDAEEJQQaD
AEEJYAaDAEEJYQaDAEEJgAaDAEEJgQaDAEEJwQeDAEEJ4QeDAEEJwAiDAEEJwQiDAEEJ4AiDAEEJ
AAmDAEEJIAmDAEEJQAmDAEEJYAmDAEEJwQmDAEEJ4AmDAEEJ4QmDAEEJAAqDAEEJAQqDAEEJIAqD
AEEJIQqDAEEJQAqDAEEJQQqDAEEJYQqDAEEJgQqDAEEJoQqDAEEJwQqDAEEJ4QqDAEEJAQuDAEEJ
IQuDAEEJQQuDAEEJgQyDAEEJoQyDAEEJwQyDAEEJ4QyDAEEJAQ2DAEEJIQ2DAEEJhA2LAEEJwA2D
AEEJ4A2DAEEJ5A2LAEEJAA6DAEEJIA6DAEEJRA6LAEEJoA6DAEEJwA6DAEEJ4BWDAEEJwBaDAEEJ
4BaDAEEJABeDAEEJIBeDAEEJQBeDAEEJYBeDAEEJgBeDAEEJoBeDAEEJwBeDAEEJ4BeDAEEJABiD
AEEJIBiDAEEJQBiDAEEJYBiDAEEJoBiDAEEJwBiDAEEJ4BiDAEEJABmDAEEJIBmDAEEJQBmDAEEJ
gBmDAEEJoBmDAEEJwBmDAEEJ4BmDAEEJABqDAEEJIBqDAEEJQBoLAEEJoBoLAEEJ5BqLAEEJRBuL
AEEJpBuLAEEJoBwLAEEJYB2DAEEJgB2DAEEJoB2DAEEJwB2DAEEJgCKDAEEJoCKDAEEJwCKDAEEJ
4CKDAEEJACODAEEJICODAEEJQCODAEEJYCODAEEJ4CMLAEEJACQLAEEJICQLAEEJQCQLAEEJZCeL
AEEJIwAQATEBfQGoAbMByAHMAeoB9gEKAiUCagKYAgoDKgM5A0EDXwNsA3YDfQOuA8ID9QMMBC4E
PwRVBF8EbgR9BJQEoATPBPUE+QQGBSkFTwXbBfMF+AUZBjUGZgZ0BoAGpQa3BtUG7wYJBw8HJgdF
B08HZgd+B4QHpAfFB9EHNwhRCF4IaQh9CJcIsAi9CMQI0gjrCPQIGAkUAAEAFQADAAAAowkGAAAA
vAMGAAAAeCAGAAAApiAGAAAAowkGAAAAvAMGAAMAAQAEAAMABgAEAAgAEQATABQAFAAXABUAGQAY
ABwAGQAjABoAJgAeACkAHwArAAAA7hgODgAAJAwTDgAAfR8YDgAA/BcdDgAAoAshDgAAtQsdDgAA
1R0mDgAAIQMdDgAA5BYdDgAASxAvDgAAiQ80DgAAuhs0DgAAkAEdDgAAyRU4DgAA0wkdDgAAXhQd
DgAAoAs9DgAAARwmDgAA3wodDgAA3iBCDgAA0gFCDgAABiBGDgAAdCIdDgAAbwNLDgAAjh5LDgAA
dCIdDgAAbwNLDgAAyQodDgAAlBxPDgAASRtVDgAAQwNVDgAA+wFCDgAAAwlZDgAAIwlZDgAAlwod
DgAAPQlZDgAAbh9ZDgAA+wFCDgAASRtVDgAAQwNVDgAAbhhdDgAA7SIdDgAATA9jDgAAoQdnDgAA
Rx1yDgAA6xkdDggATwACABAAUAACAAIABAADAAgAUQAEABAAUgAEAAIABQAFAAEABgAFAAgAbgAG
ABAAbwAGAAIABwAHAAgAcAAIABAAcQAIAAIACwAJAAEADAAJAAgAdwAKABAAeAAKAAIADQALAAEA
DgALAAgAeQAMABAAegAMAAIADwANAAEAEAANAAIAEQAPAAEAEgAPAAIAEwARAAEAFAARAAIAFQAT
AAEAFgATAAIAFwAVAAEAGAAVAAIAGQAXAAEAGgAXAAIAGwAZAAEAHAAZAAIAHQAbAAEAHgAbAAIA
HwAdAAEAIAAdAAIAIQAfAAEAIgAfAAIAIwAhAAEAJAAhAAIALwAjAAEAMAAjAAIAMQAlAAEAMgAl
AAIAMwAnAAEANAAnAAIARgApAAEARwApAAIASAArAAEASQArAAIASgAtAAEASwAtAAIATAAvAAEA
TQAvAAIATgAxAAIAcgAzAAIAcwA1AAEAdAA1AAIAdQA3AAEAdgA3AAIAtgA5AAEAtwA5AAIAuAA7
AAEAuQA7AAIAugA9AAEAuwA9AAIAvAA/AAEAvQA/AAIAvgBBAAEAvwBBAAIAwABDAAEAwQBDAAIA
wgBFAAEAwwBFAAIAxQBHAAEAxgBHAAIAxwBJAAEAyABJAAIAyQBLAAEAygBLAAIAzABNAAEAzQBN
AAIAzgBPAAEAzwBPAAIA0ABRAAEA0QBRAAIA6wBTAAEA7ABTAAIA7QBVAAEA7gBVAAIAFAFXAAEA
FQFXAAIAFgFZAAEAFwFZAAIAGAFbAAEAGQFbAAIAGgFdAAEAGwFdABsAVgBnAB8BWgFuAYkB2gEC
AhYCYwLUApID3wPnAycETQS/BMcEHAWFBZQFnQWrBREGAAcdB5wHvAfJBwQIFwhCCP8IEAkEgAAA
AQAAAMocqncAAAAAAACdAgAABAAAAAAAAAAAAAAAKgmUAgAAAAANAAAAAAAAAAAAAAAzCd8RAAAA
AAQAAAAAAAAAAAAAACoJWwIAAAAABAAAAAAAAAAAAAAAKgl1EwAAAAAEAAAAAAAAAAAAAAAqCccL
AAAAAAAAAAABAAAAzBoAACQAFQAlAB8AJgAgAAAAAABGAEgCAAAAAEUCSAJBAIYAxQBWAv8A9wIB
AYYARAIBBckBhgBbAvIHWwIHCGkCMwgCAJkAAAAAAAA8PjlfXzQwXzAAPExvZ2luPmJfXzQwXzAA
PD45X182MF8wADxHZXRNZXNzYWdlPmJfXzYwXzAAPD45X18xXzAAPElzQVNDSUk+Yl9fMV8wADxH
ZXRSZXNwb25zZT5iX180NV8wADw+OV9fNDdfMAA8Q2FwYWJpbGl0aWVzPmJfXzQ3XzAAPD45X18z
OF8wADxDb25uZWN0PmJfXzM4XzAAPD45X182MF8xADxHZXRNZXNzYWdlPmJfXzYwXzEATnVsbGFi
bGVgMQBJRW51bWVyYWJsZWAxAFNhZmVRdWV1ZWAxAENvbGxlY3Rpb25gMQBFdmVudEhhbmRsZXJg
MQBJRXF1YWxpdHlDb21wYXJlcmAxAElFbnVtZXJhdG9yYDEATGlzdGAxAEZyb21NSU1FODIyAFRv
TUlNRTgyMgBUb1VJbnQzMgBUb0ludDMyAEZ1bmNgMgBEaWN0aW9uYXJ5YDIAQmFzZTY0AFRvVUlu
dDY0AEhNQUNNRDUAQ1JBTU1ENQBnZXRfTWQ1AHNldF9NZDUAQml0NwBnZXRfVVRGOABCaXQ4ADw+
OQA8TW9kdWxlPgBCQ0MAZ2V0X0NDAGdldF9NZXNzYWdlVUlEAHNldF9NZXNzYWdlVUlEAEdldEhp
Z2hlc3RVSUQAZ2V0X05leHRVSUQAc2V0X05leHRVSUQAc2V0X1VzZXJJRABCb2R5cGFydEZyb21N
SU1FAGdldF9BU0NJSQBJc0FTQ0lJAElzUmVzcG9uc2VPSwBTeXN0ZW0uSU8AVAB2YWx1ZV9fAGNy
aXRlcmlhAFN5c3RlbS5EYXRhAEdldE1lc3NhZ2VEYXRhAEdldERhdGEAR2V0UXVvdGEATWFpbGJv
eFF1b3RhAG1zY29ybGliAFNUXzNmZGQyYjk0MmUyNTRmZjdhN2M4NWNkNjQ1NGI0NjNjADw+YwBD
YwBnZXRfQmNjAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAGdldF9JZABzZXRfSWQAUGFyc2VN
ZXNzYWdlSWQAZ2V0X0NvbnRlbnRJZABzZXRfQ29udGVudElkAFJlYWQAaWRsZVRocmVhZABnZXRf
VW5yZWFkAHNldF9VbnJlYWQAQWRkAEZsYWdnZWQAVW5mbGFnZ2VkAGdldF9BdXRoZWQAc2V0X0F1
dGhlZABJbnRlcmxvY2tlZABBbnN3ZXJlZABVbmFuc3dlcmVkAGFkZF9FbGFwc2VkAGFkZF9NZXNz
YWdlRGVsZXRlZAByZW1vdmVfTWVzc2FnZURlbGV0ZWQAVW5kZWxldGVkAEFkZE5lc3RlZE1peGVk
AFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZABOZXdHdWlkAE9sZABQYXJzZU1JTUVGaWVs
ZABnZXRfRmllbGQAc2V0X0ZpZWxkADxNZDU+a19fQmFja2luZ0ZpZWxkADxNZXNzYWdlVUlEPmtf
X0JhY2tpbmdGaWVsZAA8TmV4dFVJRD5rX19CYWNraW5nRmllbGQAPElkPmtfX0JhY2tpbmdGaWVs
ZAA8VW5yZWFkPmtfX0JhY2tpbmdGaWVsZAA8QXV0aGVkPmtfX0JhY2tpbmdGaWVsZAA8RmllbGQ+
a19fQmFja2luZ0ZpZWxkADxVc2VkU3RvcmFnZT5rX19CYWNraW5nRmllbGQAPEZyZWVTdG9yYWdl
PmtfX0JhY2tpbmdGaWVsZAA8VXNhZ2U+a19fQmFja2luZ0ZpZWxkADxMYW5ndWFnZT5rX19CYWNr
aW5nRmllbGQAPE5hbWU+a19fQmFja2luZ0ZpZWxkADxSZXNvdXJjZU5hbWU+a19fQmFja2luZ0Zp
ZWxkADxGaWxlbmFtZT5rX19CYWNraW5nRmllbGQAPFR5cGU+a19fQmFja2luZ0ZpZWxkADxTdWJ0
eXBlPmtfX0JhY2tpbmdGaWVsZAA8VmFsdWU+a19fQmFja2luZ0ZpZWxkADxTaXplPmtfX0JhY2tp
bmdGaWVsZAA8RW5jb2Rpbmc+a19fQmFja2luZ0ZpZWxkADxMb2NhdGlvbj5rX19CYWNraW5nRmll
bGQAPERpc3Bvc2l0aW9uPmtfX0JhY2tpbmdGaWVsZAA8RGVzY3JpcHRpb24+a19fQmFja2luZ0Zp
ZWxkADxQYXJ0TnVtYmVyPmtfX0JhY2tpbmdGaWVsZAA8aGVhZGVyPmtfX0JhY2tpbmdGaWVsZAA8
T3BlcmF0b3I+a19fQmFja2luZ0ZpZWxkADxNZXNzYWdlcz5rX19CYWNraW5nRmllbGQAPExpbmVz
PmtfX0JhY2tpbmdGaWVsZAA8QXR0cmlidXRlcz5rX19CYWNraW5nRmllbGQAPEZsYWdzPmtfX0Jh
Y2tpbmdGaWVsZAA8Q29uZGl0aW9ucz5rX19CYWNraW5nRmllbGQAPFBhcmFtZXRlcnM+a19fQmFj
a2luZ0ZpZWxkADxMaW1pdD5rX19CYWNraW5nRmllbGQAPENsaWVudD5rX19CYWNraW5nRmllbGQA
PE1lc3NhZ2VDb3VudD5rX19CYWNraW5nRmllbGQAPGJvZHk+a19fQmFja2luZ0ZpZWxkAGZpZWxk
AEFuZABUcmltRW5kAFJlYWRUb0VuZABEYkNvbW1hbmQAU2VuZENvbW1hbmQAU3FsQ29tbWFuZABj
b21tYW5kAEFwcGVuZABzZXRfSXNCYWNrZ3JvdW5kAEF1dGhNZXRob2QAbWV0aG9kAFJlYWRXb3Jk
AERlY29kZVdvcmQAc2V0X1Bhc3N3b3JkAHBhc3N3b3JkAEtleXdvcmQAVW5rZXl3b3JkAFJlcGxh
Y2UAZGVmYXVsdEluc3RhbmNlAFNlbnRTaW5jZQBzZXRfRGF0YVNvdXJjZQBGaWxlTW9kZQBCYXNl
NjREZWNvZGUAVVRGN0RlY29kZQBRUERlY29kZQBRRGVjb2RlAGdldF9Vbmljb2RlAGdldF9CaWdF
bmRpYW5Vbmljb2RlAFVURjdFbmNvZGUAUUVuY29kZQBJbWFnZQBnZXRfVXNlZFN0b3JhZ2UAc2V0
X1VzZWRTdG9yYWdlAGdldF9GcmVlU3RvcmFnZQBzZXRfRnJlZVN0b3JhZ2UAZ2V0X1VzYWdlAHNl
dF9Vc2FnZQBnZXRfTWVzc2FnZQBTdG9yZU1lc3NhZ2UARGVsZXRlTWVzc2FnZQBNb3ZlTWVzc2Fn
ZQBNYWlsTWVzc2FnZQBHZXRNZXNzYWdlAGFkZF9OZXdNZXNzYWdlAHJlbW92ZV9OZXdNZXNzYWdl
AENvcHlNZXNzYWdlAG1lc3NhZ2UAZ2V0X0xhbmd1YWdlAHNldF9MYW5ndWFnZQBBZGRSYW5nZQBD
b21wYXJlRXhjaGFuZ2UARXhwdW5nZQBFbmRJbnZva2UAQmVnaW5JbnZva2UASUVudW1lcmFibGUA
SURpc3Bvc2FibGUAUXVvdGVkUHJpbnRhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9t
SGFuZGxlAEZpbGUAZ2V0X05hbWUAc2V0X05hbWUAZ2V0X1dlYk5hbWUAZ2V0X1Jlc291cmNlTmFt
ZQBzZXRfUmVzb3VyY2VOYW1lAEdldFJhbmRvbUZpbGVOYW1lAG5ld05hbWUAZ2V0X0Rpc3BsYXlO
YW1lAGdldF9GaWxlbmFtZQBzZXRfRmlsZW5hbWUAdXNlcm5hbWUAaG9zdG5hbWUAU3lzdGVtLk5l
dC5NaW1lAERhdGVUaW1lAFJlYWRMaW5lAEFwcGVuZExpbmUAZ2V0X05ld0xpbmUAQ29tYmluZQBJ
bmxpbmUAZ2V0X1R5cGUAc2V0X1R5cGUAZ2V0X01lZGlhVHlwZQBDb250ZW50RGlzcG9zaXRpb25U
eXBlAGdldF9Db250ZW50VHlwZQBzZXRfQ29udGVudFR5cGUAY29udGVudFR5cGUAZ2V0X1N1YnR5
cGUAc2V0X1N1YnR5cGUARmlsZVNoYXJlAFN5c3RlbS5Db3JlAFNlbnRCZWZvcmUAR2V0Qm9keXN0
cnVjdHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAZ2V0X0ludmFy
aWFudEN1bHR1cmUAQ2FwdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UATmFtZU9iamVj
dENvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEF0dGFjaG1lbnRCYXNlAGdl
dF9PcmRpbmFsSWdub3JlQ2FzZQBSYWlzZQBTZW5kQ29tbWFuZEdldFJlc3BvbnNlAHJlc3BvbnNl
AENsb3NlAERpc3Bvc2UAUGFyc2UAWDUwOUNlcnRpZmljYXRlAHZhbGlkYXRlAEV4YW1pbmVQYXJ0
RGVsZWdhdGUATXVsdGljYXN0RGVsZWdhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAV3JpdGUAUXVv
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRp
dGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBFeHRlbnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRl
AEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJp
YnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUA
U1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFBhcmFtQXJyYXlBdHRyaWJ1dGUAQXNz
ZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFJlYWRC
eXRlAFdyaXRlQnl0ZQBUb0J5dGUAX3F1ZXVlAERlcXVldWUARW5xdWV1ZQBnZXRfVmFsdWUAc2V0
X1ZhbHVlAGdldF9IYXNWYWx1ZQB2YWx1ZQBBcmNoaXZlAEFkZE5lc3RlZEFsdGVybmF0aXZlAFJl
bW92ZQBnZXRfU2l6ZQBzZXRfU2l6ZQBzaXplAEluZGV4T2YAR2V0VGFnAE1lc3NhZ2VGbGFnAE1h
aWxib3hGbGFnAHRhZwBTeXN0ZW0uVGhyZWFkaW5nAGdldF9FbmNvZGluZwBzZXRfRW5jb2RpbmcA
Q29udGVudFRyYW5zZmVyRW5jb2RpbmcAdHJhbnNmZXJFbmNvZGluZwBzZXRfU3ViamVjdEVuY29k
aW5nAEdldEVuY29kaW5nAGdldF9Cb2R5RW5jb2RpbmcAc2V0X0JvZHlFbmNvZGluZwBlbmNvZGlu
ZwBSZXN1bWVJZGxpbmcAUGF1c2VJZGxpbmcAU3RvcElkbGluZwBTdGFydElkbGluZwBpZGxpbmcA
U3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBGcm9tQmFzZTY0U3RyaW5nAFRvQmFzZTY0U3RyaW5n
AFF1b3RlU3RyaW5nAGZyb21TdHJpbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAVG9TdHJpbmcAR2V0
U3RyaW5nAFN1YnN0cmluZwBTZWFyY2gASXNNYXRjaABpZGxlRGlzcGF0Y2gAQ29tcHV0ZUhhc2gA
VHJhc2gAUGF0aABnZXRfTGVuZ3RoAEVuZHNXaXRoAFN0YXJ0c1dpdGgAU2FzbE9BdXRoAEFzeW5j
Q2FsbGJhY2sAUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAY2FsbGJhY2sAcmVh
ZExvY2sAc2VxdWVuY2VMb2NrAHdyaXRlTG9jawBQZWVrAGdldF9DYW5TZWVrAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRU
YXNrAE5vcm1hbABzZXRfSW50ZXJ2YWwAU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsAFNj
cmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTeXN0ZW0uTmV0Lk1haWwAQWxs
TWFpbABVdGlsAFJlYWRVbnRpbABTa2lwVW50aWwAUHVsc2VBbGwAU1RfM2ZkZDJiOTQyZTI1NGZm
N2E3Yzg1Y2Q2NDU0YjQ2M2MuZGxsAGdldF9Jc0JvZHlIdG1sAHNldF9Jc0JvZHlIdG1sAHNzbABG
aWxlU3RyZWFtAE5ldHdvcmtTdHJlYW0AU3NsU3RyZWFtAEdldFN0cmVhbQBnZXRfQ29udGVudFN0
cmVhbQBNZW1vcnlTdHJlYW0Ac3RyZWFtAFNwYW0AZ2V0X0l0ZW0Ac2V0X0l0ZW0AaXRlbQBTeXN0
ZW0ASGFzaEFsZ29yaXRobQBUcmltAGdldF9Gcm9tAHNldF9Gcm9tAEVudW0AU2VudE9uAHJlc291
cmNlTWFuAEdyZWF0ZXJUaGFuAExlc3NUaGFuAFNlZW4AVW5zZWVuAE9wZW4AU2NyaXB0TWFpbgBY
NTA5Q2hhaW4AY2hhaW4AU2Vla09yaWdpbgBMb2dpbgBKb2luAE1haWxNZXNzYWdlRXh0ZW5zaW9u
AFNraXBQYXJlbnRoZXNpemVkRXhwcmVzc2lvbgBBcHBsaWNhdGlvbgBnZXRfTG9jYXRpb24Ac2V0
X0xvY2F0aW9uAGRlc3RpbmF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxp
emF0aW9uAFN5c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ASUNv
bGxlY3Rpb24ATmFtZVZhbHVlQ29sbGVjdGlvbgBNYXRjaENvbGxlY3Rpb24AR3JvdXBDb2xsZWN0
aW9uAE1haWxBZGRyZXNzQ29sbGVjdGlvbgBBdHRhY2htZW50Q29sbGVjdGlvbgBBbHRlcm5hdGVW
aWV3Q29sbGVjdGlvbgBLZXlDb2xsZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAFNl
YXJjaENvbmRpdGlvbgBjb25kaXRpb24AZ2V0X0Rpc3Bvc2l0aW9uAHNldF9EaXNwb3NpdGlvbgBS
ZWFkRGlzcG9zaXRpb24AQ29udGVudERpc3Bvc2l0aW9uAGRpc3Bvc2l0aW9uAElPRXhjZXB0aW9u
AE5vdEF1dGhlbnRpY2F0ZWRFeGNlcHRpb24ATm90U3VwcG9ydGVkRXhjZXB0aW9uAEJhZFNlcnZl
clJlc3BvbnNlRXhjZXB0aW9uAEVuZE9mU3RyaW5nRXhjZXB0aW9uAEFyZ3VtZW50TnVsbEV4Y2Vw
dGlvbgBBcHBsaWNhdGlvbkV4Y2VwdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uAEludmFs
aWRDcmVkZW50aWFsc0V4Y2VwdGlvbgBGb3JtYXRFeGNlcHRpb24AQXJndW1lbnRFeGNlcHRpb24A
Z2V0X0Rlc2NyaXB0aW9uAHNldF9EZXNjcmlwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AVW5rbm93
bgBnZXRfVG8AVmlkZW8AQ3VsdHVyZUluZm8AU2VyaWFsaXphdGlvbkluZm8AR2V0TWFpbGJveElu
Zm8AaW5mbwBBdWRpbwBJbXBvcnRhbmNlTWFwAENvbnRlbnREaXNwb3NpdGlvblR5cGVNYXAAQ29u
dGVudFR5cGVNYXAAQ29udGVudFRyYW5zZmVyRW5jb2RpbmdNYXAAUHJpb3JpdHlNYXAAUzIyLklt
YXAASWRsZUxvb3AASXNzdWVOb29wAFN0b3AAR3JvdXAAU3lzdGVtLkxpbnEAT3IAQ2hhcgBnZXRf
UGFydE51bWJlcgBzZXRfUGFydE51bWJlcgBwYXJ0TnVtYmVyAEJ1aWxkSGVhZGVyAFBhcnNlTWFp
bEhlYWRlcgBHZXRNYWlsSGVhZGVyAEZyb21IZWFkZXIAU3RyaW5nUmVhZGVyAFRleHRSZWFkZXIA
Z2V0X2hlYWRlcgBzZXRfaGVhZGVyAHJlYWRlcgBJRm9ybWF0UHJvdmlkZXIATWVzc2FnZUJ1aWxk
ZXIARGJDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBTcWxDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBi
dWlsZGVyAHNldF9TZW5kZXIAc2VuZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAUmVhZEludGVnZXIA
TGFyZ2VyAEV2ZW50RGlzcGF0Y2hlcgBPdGhlcgBvdGhlcgBFbGFwc2VkRXZlbnRIYW5kbGVyAFNt
YWxsZXIAbm9vcFRpbWVyAGlubmVyAFRvVXBwZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBTdHJpbmdD
b21wYXJlcgBjaGFyYWN0ZXIAQmluYXJ5V3JpdGVyAEVudGVyAEJpdENvbnZlcnRlcgBUb0xvd2Vy
AEZpcmVFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAGdldF9PcGVyYXRvcgBzZXRfT3Bl
cmF0b3IATWF0Y2hFdmFsdWF0b3IALmN0b3IALmNjdG9yAE1vbml0b3IAZXJyAHN0cgBTeXN0ZW0u
RGlhZ25vc3RpY3MAdWlkcwBQYXJzZU1lc3NhZ2U4MjJGaWVsZHMAUGFyc2VPcHRpb25hbEZpZWxk
cwBTZXRBZGRyZXNzRmllbGRzAERlY29kZVdvcmRzAHdvcmRzAFNraXBTcGFjZXMAc2tpcFNwYWNl
cwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfM2Zk
ZDJiOTQyZTI1NGZmN2E3Yzg1Y2Q2NDU0YjQ2M2MuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3Vy
Y2VzAERlYnVnZ2luZ01vZGVzAGdldF9NZXNzYWdlcwBzZXRfTWVzc2FnZXMAU3RvcmVNZXNzYWdl
cwBHZXRNZXNzYWdlcwBtZXNzYWdlcwBNYXRjaGVzAENhcGFiaWxpdGllcwBjYXBhYmlsaXRpZXMA
U1RfM2ZkZDJiOTQyZTI1NGZmN2E3Yzg1Y2Q2NDU0YjQ2M2MuUHJvcGVydGllcwBnZXRfTGluZXMA
c2V0X0xpbmVzAFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcwBn
ZXRfQXR0cmlidXRlcwBzZXRfQXR0cmlidXRlcwBHZXRCeXRlcwBieXRlcwBHZXRWYWx1ZXMATGlz
dE1haWxib3hlcwBnZXRfRmxhZ3MAc2V0X0ZsYWdzAEFkZE1lc3NhZ2VGbGFncwBSZW1vdmVNZXNz
YWdlRmxhZ3MAR2V0TWVzc2FnZUZsYWdzAFNldE1lc3NhZ2VGbGFncwBHZXRNYWlsYm94RmxhZ3MA
ZmxhZ3MAU2V0dGluZ3MARWxhcHNlZEV2ZW50QXJncwBJZGxlTWVzc2FnZUV2ZW50QXJncwBhcmdz
AHBhcmVudGhlc2lzAFRvQ2h1bmtzAHJlc29sdmVMaXRlcmFscwBDb250YWlucwBTeXN0ZW0uVGV4
dC5SZWd1bGFyRXhwcmVzc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25kaXRpb25zAHNl
dF9Db25kaXRpb25zAEZldGNoT3B0aW9ucwBSZWdleE9wdGlvbnMAb3B0aW9ucwBnZXRfR3JvdXBz
AGdldF9DaGFycwBHZXRDaGFycwBnZXRfSGVhZGVycwBhZGRIZWFkZXJzAFN5c3RlbS5UaW1lcnMA
Y2hhcmFjdGVycwBnZXRfUGFyYW1ldGVycwBzZXRfUGFyYW1ldGVycwBTc2xQb2xpY3lFcnJvcnMA
RmlsZUFjY2VzcwBnZXRfU3VjY2VzcwBUbzgyMkFkZHJlc3MAZ2V0X0FkZHJlc3MATWFpbEFkZHJl
c3MAYWRkcmVzcwBnZXRfRHRzAFN5c3RlbS5OZXQuU29ja2V0cwBEcmFmdHMAZ2V0X0F0dGFjaG1l
bnRzAE5vQXR0YWNobWVudHMAZ2V0X0V2ZW50cwBpZGxlRXZlbnRzAGdldF9oYXNFdmVudHMAUGFy
c2VNSU1FUGFydHMAU3VwcG9ydHMARXhpc3RzAEdldE1haWxib3hTdGF0dXMAZ2V0X0FsdGVybmF0
ZVZpZXdzAGdldF9LZXlzAGdldF9BbGxLZXlzAENvbmNhdABGb3JtYXQAT2JqZWN0AG9iamVjdABn
ZXRfU3ViamVjdABzZXRfU3ViamVjdABTZWxlY3QAQ29ubmVjdABEcmFmdABVbmRyYWZ0AGxlZnQA
UGFkUmlnaHQAcmlnaHQAV2FpdABTcGxpdABnZXRfTGltaXQAc2V0X0xpbWl0AEV4aXQAZ2V0X0Rl
ZmF1bHQASUFzeW5jUmVzdWx0AHJlc3VsdABUb1VwcGVySW52YXJpYW50AFNlbnQAUmVjZW50AGdl
dF9DbGllbnQAc2V0X0NsaWVudABTeXN0ZW0uRGF0YS5TcWxDbGllbnQASUltYXBDbGllbnQAVGNw
Q2xpZW50AEF1dGhlbnRpY2F0ZUFzQ2xpZW50AGNsaWVudABJbmNyZW1lbnQAQWRkQXR0YWNobWVu
dABDcmVhdGVBdHRhY2htZW50AEVudmlyb25tZW50AGdldF9DdXJyZW50AGNvbnRlbnQAYWRkX25l
d01lc3NhZ2VFdmVudAByZW1vdmVfbmV3TWVzc2FnZUV2ZW50AGFkZF9tZXNzYWdlRGVsZXRlRXZl
bnQAcmVtb3ZlX21lc3NhZ2VEZWxldGVFdmVudABldmVudABnZXRfQ291bnQAZ2V0X01lc3NhZ2VD
b3VudABzZXRfTWVzc2FnZUNvdW50AGJ5dGVDb3VudABwYXVzZVJlZkNvdW50AE5vdABNSU1FUGFy
dABtaW1lUGFydABTa2lwTXVsdGlwYXJ0AEFkZEJvZHlwYXJ0AFBhcnNlQm9keXBhcnQAR2V0Qm9k
eXBhcnQAVGhyZWFkU3RhcnQAY2VydABDb252ZXJ0AEFib3J0AHBvcnQAUmVhZExpc3QAUGFyc2VM
aXN0AGdldF9SZXBseVRvTGlzdABQYXJzZUFkZHJlc3NMaXN0AGxpc3QATG9nb3V0AE1vdmVOZXh0
AFN5c3RlbS5UZXh0AFN0cmVhbWluZ0NvbnRleHQAY29udGV4dABOZXcAQ3JlYXRlQWx0ZXJuYXRl
VmlldwB2aWV3AGdldF9Ob3cAUmVnZXgAbmVzdFByZWZpeABzZWxlY3RlZE1haWxib3gAUmVuYW1l
TWFpbGJveABDcmVhdGVNYWlsYm94AERlbGV0ZU1haWxib3gAU2VsZWN0TWFpbGJveABnZXRfRGVm
YXVsdE1haWxib3gAc2V0X0RlZmF1bHRNYWlsYm94AGRlZmF1bHRNYWlsYm94AG1haWxib3gAVG9B
cnJheQBUb0NoYXJBcnJheQBnZXRfQm9keQBzZXRfQm9keQBBZGRCb2R5AEJ1aWxkQm9keQBQYXJz
ZU1haWxCb2R5AGdldF9ib2R5AHNldF9ib2R5AENvbnRhaW5zS2V5AFN5c3RlbS5TZWN1cml0eS5D
cnlwdG9ncmFwaHkAZ2V0X0Fzc2VtYmx5AEhlYWRlcnNPbmx5AFRleHRPbmx5AEdlbmVyYXRlQ29u
dGVudEJvdW5kYXJ5AGJvdW5kYXJ5AEJpbmFyeQBTdHJpbmdEaWN0aW9uYXJ5AEV4ZWN1dGVOb25R
dWVyeQBvcF9FcXVhbGl0eQBjYXBhYmlsaXR5AGdldF9Qcmlvcml0eQBzZXRfUHJpb3JpdHkAUGFy
c2VQcmlvcml0eQBNYWlsUHJpb3JpdHkAcHJpb3JpdHkAU3lzdGVtLk5ldC5TZWN1cml0eQBJc051
bGxPckVtcHR5AAAAAAABAD1hAG4AZAByAGUAeQBkAHIAdQB6AGgAaQBuAGkAbgBAAGUAbAB0AHIA
YQBuAHMAcABsAHUAcwAuAHIAdQAAFTEAMAAuADEAMAAuADAALgAyADgAAA9wAGgAcAB1AHMAZQBy
AAARZwBuAFEAQwBVAEUAbABVAACAmUkATgBTAEUAUgBUACAAWwBhAHUAdABvAG0AYQB0AGkAbwBu
AF0ALgBbAGQAYgBvAF0ALgBbAHIAZQBxAHUAZQBzAHQAXwBsAGkAcwB0AF0AKABbAGcAdQBpAGQA
XQAsAFsAZgBpAGwAZQBfAG4AYQBtAGUAXQAsAFsAZQBtAGEAaQBsAF0AKQAgAFYAQQBMAFUARQBT
ACAAABUxADAALgAxADAALgAwAC4ANQAwAAA1ZABlAGMAbABhAHIAYQB0AGkAbwBuAEAAZQBsAHQA
cgBhAG4AcwBwAGwAdQBzAC4AcgB1AAARSgBuAEsAdgBiAEUAZwBzAAALSQBOAEIATwBYAAALLgB4
AGwAcwB4AAA7XABcADEAMAAuADEAMAAuADAALgAyADgAXABhAGwAdABhAFwAUgBvAGIAbwB0AFwA
VABlAG0AcABcAAADKAAAAykAAAUoACcAAQcnACwAJwABBScAKQABC0UAUgBSAE8AUgAAcVMAVABf
ADMAZgBkAGQAMgBiADkANAAyAGUAMgA1ADQAZgBmADcAYQA3AGMAOAA1AGMAZAA2ADQANQA0AGIA
NAA2ADMAYwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAG1AAYQBy
AHQAIABOAHUAbQBiAGUAcgA6ACAAAA1UAHkAcABlADoAIAAAE1MAdQBiAHQAeQBwAGUAOgAgAAAX
UABhAHIAYQBtAGUAdABlAHIAcwBbAAAHXQA6ACAAAAlJAGQAOgAgAAAbRABlAHMAYwByAGkAcAB0
AGkAbwBuADoAIAAAFUUAbgBjAG8AZABpAG4AZwA6ACAAAA1TAGkAegBlADoAIAAAD0wAaQBuAGUA
cwA6ACAAAAtNAGQANQA6ACAAABtEAGkAcwBwAG8AcwBpAHQAaQBvAG4AOgAgAAAZRABpAHMAcABv
AHMAaQB0AGkAbwBuAFsAABVMAGEAbgBnAHUAYQBnAGUAOgAgAAAVTABvAGMAYQB0AGkAbwBuADoA
IAAAAzEAAA1SAEYAQwA4ADIAMgAAAy4AAAdOAEkATAAADUkAbgBsAGkAbgBlAAAVQQB0AHQAYQBj
AGgAbQBlAG4AdAAACTcAQgBpAHQAAAk4AEIAaQB0AAANQgBpAG4AYQByAHkAACFRAHUAbwB0AGUA
ZAAtAFAAcgBpAG4AdABhAGIAbABlAAENQgBhAHMAZQA2ADQAAAlUAGUAeAB0AAALSQBtAGEAZwBl
AAALQQB1AGQAaQBvAAALVgBpAGQAZQBvAAAXQQBwAHAAbABpAGMAYQB0AGkAbwBuAAAPTQBlAHMA
cwBhAGcAZQAAC08AdABoAGUAcgAABU8ASwAADUwATwBHAEkATgAgAAADIAAAK0EAVQBUAEgARQBO
AFQASQBDAEEAVABFACAAQwBSAEEATQAtAE0ARAA1AAEFKwAgAAADLQABKUEAVQBUAEgARQBOAFQA
SQBDAEEAVABFACAAWABPAEEAVQBUAEgAIAAAGSoAIABDAEEAUABBAEIASQBMAEkAVABZAAANTABP
AEcATwBVAFQAAAsqACAAQgBZAEUAABV4AG0AewAwADoAMAAwADAAfQAgAAAFDQAKAAARewAoAFwA
ZAArACkAfQAkAAAVQwBBAFAAQQBCAEkATABJAFQAWQAAGyoAIABDAEEAUABBAEIASQBMAEkAVABZ
ACAAAA9SAEUATgBBAE0ARQAgAAAPRABFAEwARQBUAEUAIAAAD0MAUgBFAEEAVABFACAAAA9TAEUA
TABFAEMAVAAgAAADKgAAF0wASQBTAFQAIAAiACIAIAAiACoAIgAAR1wAKgAgAEwASQBTAFQAIABc
ACgAKAAuACoAKQBcACkAXABzACsAIgAoAFsAXgAiAF0AKwApACIAXABzACsAKAAuACsAKQAAE1wA
bgBvAHMAZQBsAGUAYwB0AAARXgAiACgALgArACkAIgAkAAAFJAAxAAAPRQBYAFAAVQBOAEcARQAA
C1EAVQBPAFQAQQAAD1MAVABPAFIAQQBHAEUAAAlcAEEAbABsAAARXABBAGwAbABNAGEAaQBsAAAR
XABBAHIAYwBoAGkAdgBlAAAPXABEAHIAYQBmAHQAcwAAC1wASgB1AG4AawAAC1wAUwBwAGEAbQAA
DVwAVAByAGEAcwBoAAARXABSAHUAYgBiAGkAcwBoAAALXABTAGUAbgB0AAAVXABTAGUAbgB0AEkA
dABlAG0AcwAAC1gATABJAFMAVAAACUwASQBTAFQAAAkgACIAIgAgAABLXAAqACAAWAA/AEwASQBT
AFQAIABcACgAKAAuACoAKQBcACkAXABzACsAIgAoAFsAXgAiAF0AKwApACIAXABzACsAKAAuACsA
KQAAD1MAVABBAFQAVQBTACAAADUgACgATQBFAFMAUwBBAEcARQBTACAAVQBOAFMARQBFAE4AIABV
AEkARABOAEUAWABUACkAADNcACoAIABTAFQAQQBUAFUAUwAuACoATQBFAFMAUwBBAEcARQBTACAA
KABcAGQAKwApAAAvXAAqACAAUwBUAEEAVABVAFMALgAqAFUATgBTAEUARQBOACAAKABcAGQAKwAp
AAAxXAAqACAAUwBUAEEAVABVAFMALgAqAFUASQBEAE4ARQBYAFQAIAAoAFwAZAArACkAABdVAEkA
RAAgAFMARQBBAFIAQwBIACAAAB1DAEgAQQBSAFMARQBUACAAVQBUAEYALQA4ACAAAQMrAABpUABs
AGUAYQBzAGUAIAByAGUAcwB0AHIAaQBjAHQAIAB5AG8AdQByACAAcwBlAGEAcgBjAGgAIAB0AG8A
IABBAFMAQwBJAEkALQBvAG4AbAB5ACAAYwBoAGEAcgBhAGMAdABlAHIAcwABH14AXAAqACAAUwBF
AEEAUgBDAEgAIAAoAC4AKwApAABTUwBlAHIAdgBlAHIAIAByAGUAdAB1AHIAbgBlAGQAIABlAHIA
cgBvAG4AZQBvAHUAcwAgAGIAbwBkAHkAIABzAHQAcgB1AGMAdAB1AHIAZQA6AAAPQQBQAFAARQBO
AEQAIAAAESAAKABcAFMAZQBlAG4AKQAABSAAewAAA30AABVVAEkARAAgAEYARQBUAEMASAAgAAAN
IAAoAEIATwBEAFkAAAsuAFAARQBFAEsAABNbAEgARQBBAEQARQBSAF0AKQAAL1wAKgAgAFwAZAAr
ACAARgBFAFQAQwBIACAALgAqACAAewAoAFwAZAArACkAfQAADVwAKQBcAHMAKgAkAAAhIAAoAEIA
TwBEAFkAUwBUAFIAVQBDAFQAVQBSAEUAKQAASUYARQBUAEMASAAgAFwAKAAuACoAQgBPAEQAWQBT
AFQAUgBVAEMAVABVAFIARQAgAFwAKAAoAC4AKgApAFwAKQAuACoAXAApAAADWwAABV0AKQAAB1sA
XQApAAAVIAAoAFUASQBEAE4ARQBYAFQAKQAAE1UASQBEACAAQwBPAFAAWQAgAAAVVQBJAEQAIABT
AFQATwBSAEUAIAAAPyAAKwBGAEwAQQBHAFMALgBTAEkATABFAE4AVAAgACgAXABEAGUAbABlAHQA
ZQBkACAAXABTAGUAZQBuACkAAAtcAFMAZQBlAG4AABNcAEEAbgBzAHcAZQByAGUAZAAAEVwARgBs
AGEAZwBnAGUAZAAAEVwARABlAGwAZQB0AGUAZAAADVwARAByAGEAZgB0AAAPXABSAGUAYwBlAG4A
dAAAESAAKABGAEwAQQBHAFMAKQAAK0YATABBAEcAUwAgAFwAKAAoAFsAXAB3AFwAcwBcAFwAXQAq
ACkAXAApAAADXAAAHyAARgBMAEEARwBTAC4AUwBJAEwARQBOAFQAIAAoAAAhIAArAEYATABBAEcA
UwAuAFMASQBMAEUATgBUACAAKAAAISAALQBGAEwAQQBHAFMALgBTAEkATABFAE4AVAAgACgAAQlJ
AEQATABFAABlVABoAGUAIABzAGUAcgB2AGUAcgAgAGQAbwBlAHMAIABuAG8AdAAgAHMAdQBwAHAA
bwByAHQAIAB0AGgAZQAgAEkATQBBAFAANAAgAEkARABMAEUAIABjAG8AbQBtAGEAbgBkAAAtaQBk
AGwAZQBUAGgAcgBlAGEAZAAgAGkAcwAgAG4AbwB0ACAAbgB1AGwAbAAACUQATwBOAEUAAA9PAEsA
IABJAEQATABFAAAlXAAqAFwAcwArACgAXABkACsAKQBcAHMAKwAoAFwAdwArACkAAA1FAFgASQBT
AFQAUwAACU4ATwBPAFAAAG1UAGgAaQBzACAAcwBlAHIAdgBlAHIAIABkAG8AZQBzACAAbgBvAHQA
IABzAHUAcABwAG8AcgB0ACAAdABoAGUAIABJAE0AQQBQADQAIABRAFUATwBUAEEAIABlAHgAdABl
AG4AcwBpAG8AbgAAG0cARQBUAFEAVQBPAFQAQQBSAE8ATwBUACAAAFVcACoAIABRAFUATwBUAEEA
IAAiACgAXAB3ACoAKQAiACAAXAAoACgAXAB3ACsAKQBcAHMAKwAoAFwAZAArACkAXABzACsAKABc
AGQAKwApAFwAKQAAAyIAAAU6ACAAABlNAEkATQBFAC0AVgBlAHIAcwBpAG8AbgABCUQAYQB0AGUA
AA9TAHUAYgBqAGUAYwB0AAAJRgByAG8AbQAABVQAbwAABUMAYwAAB0IAYwBjAAAZQwBvAG4AdABl
AG4AdAAtAFQAeQBwAGUAATNDAG8AbgB0AGUAbgB0AC0AVAByAGEAbgBzAGYAZQByAC0ARQBuAGMA
bwBkAGkAbgBnAAERUAByAGkAbwByAGkAdAB5AAARUgBlAHAAbAB5AC0AVABvAAEVWAAtAFAAcgBp
AG8AcgBpAHQAeQABFUkAbQBwAG8AcgB0AGEAbgBjAGUAAA1TAGUAbgBkAGUAcgAAFU0AZQBzAHMA
YQBnAGUALQBJAGQAAQcxAC4AMAAAA1IAAEVUAGgAZQAgAEYAcgBvAG0AIABwAHIAbwBwAGUAcgB0
AHkAIABtAHUAcwB0ACAAbgBvAHQAIABiAGUAIABuAHUAbABsAAAVdABlAHgAdAAvAHAAbABhAGkA
bgAAE3QAZQB4AHQALwBoAHQAbQBsAAAVOwAgAGMAaABhAHIAcwBlAHQAPQAADWIAYQBzAGUANgA0
AAAfbQB1AGwAdABpAHAAYQByAHQALwBtAGkAeABlAGQAACttAHUAbAB0AGkAcABhAHIAdAAvAGEA
bAB0AGUAcgBuAGEAdABpAHYAZQAAFzsAIABiAG8AdQBuAGQAYQByAHkAPQAAFT0APwBVAFQARgAt
ADgAPwBRAD8AAQ89AHsAMAA6AFgAMgB9AAAFPwA9AAAFIAA8AAADPgAAA04AABFiAG8AdQBuAGQA
YQByAHkAAB1iAG8AdQBuAGQAYQByAHkAPQAoAFwAdwArACkAAAUtAC0AAR1DAG8AbgB0AGUAbgB0
AC0AVAB5AHAAZQA6ACAAAUNDAG8AbgB0AGUAbgB0AC0AVAByAGEAbgBzAGYAZQByAC0ARQBuAGMA
bwBkAGkAbgBnADoAIABiAGEAcwBlADYANAABBTsAIAAAAz0AABtDAG8AbgB0AGUAbgB0AC0ASQBk
ADoAIAA8AAE/QwBvAG4AdABlAG4AdAAtAEQAaQBzAHAAbwBzAGkAdABpAG8AbgA6ACAAYQB0AHQA
YQBjAGgAbQBlAG4AdAABXUMAbwBuAHQAZQBuAHQALQBUAHkAcABlADoAIABtAHUAbAB0AGkAcABh
AHIAdAAvAGEAbAB0AGUAcgBuAGEAdABpAHYAZQA7ACAAYgBvAHUAbgBkAGEAcgB5AD0AAVFDAG8A
bgB0AGUAbgB0AC0AVAB5AHAAZQA6ACAAbQB1AGwAdABpAHAAYQByAHQALwBtAGkAeABlAGQAOwAg
AGIAbwB1AG4AZABhAHIAeQA9AAEVbgBvAG4ALQB1AHIAZwBlAG4AdAABDW4AbwByAG0AYQBsAAAN
dQByAGcAZQBuAHQAAAdsAG8AdwAACWgAaQBnAGgAACk9AFwAPwAoAFsAQQAtAFoAYQAtAHoAMAAt
ADkAXAAtAF8AXQArACkAAS8oAFsAXAB3AFwALQBdACsAKQBcAHMAKgA9AFwAcwAqACgAWwBeADsA
XQArACkAARdeAFwAcwAqACgAWwBeADsAXQArACkAAAt2AGEAbAB1AGUAAGUoAC4AKgApAFwAcwAq
ADwAPwAoAFsAQQAtAFoAMAAtADkALgBfACUALQBdACsAQABbAEEALQBaADAALQA5AC4ALQBdACsA
XAAuAFsAQQAtAFoAXQB7ADIALAA0AH0AKQA+AD8AAQ08ACgALgArACkAPgAAb1QAaABlACAAZgBp
AGUAbABkACAAZABvAGUAcwAgAG4AbwB0ACAAYwBvAG4AdABhAGkAbgAgAGEAIAB2AGEAbABpAGQA
IABtAGUAcwBzAGEAZwBlACAAaQBkAGUAbgB0AGkAZgBpAGUAcgA6ACAAABFSAGUAcABsAHkALQB0
AG8AAQ9DAGgAYQByAHMAZQB0AAAJaAB0AG0AbAAAAy8AABFCAG8AdQBuAGQAYQByAHkAABVDAG8A
bgB0AGUAbgB0AC0ASQBkAAEnQwBvAG4AdABlAG4AdAAtAEQAaQBzAHAAbwBzAGkAdABpAG8AbgAB
EygALgArACkALwAoAC4AKwApAAARRgBpAGwAZQBuAGEAbQBlAAAFOgAqAAAFMQA6AAAHTgBPAFQA
AAVPAFIAAAUgACgAAAcpACAAKAAAA3sAABdkAGQALQBNAE0ATQAtAHkAeQB5AHkAAQMsAAAFXABc
AAADDQAABVwAcgAAAwoAAAVcAG4AAAVcACIAAE8oAD0AXAA/AFsAQQAtAFoAYQAtAHoAMAAtADkA
XAAtAF8AXQArAFwAPwBbAEIAYgBRAHEAXQBcAD8AWwBeAFwAPwBdACsAXAA/AD0AKQABTz0AXAA/
ACgAWwBBAC0AWgBhAC0AegAwAC0AOQBcAC0AXwBdACsAKQBcAD8AKABbAEIAYgBRAHEAXQApAFwA
PwAoAC4AKwApAFwAPwA9AAEDUQAAA0IAAFNFAG4AYwBvAGQAaQBuAGcAIABuAG8AdAAgAHIAZQBj
AG8AZwBuAGkAegBlAGQAIABpAG4AIABlAG4AYwBvAGQAZQBkACAAdwBvAHIAZAA6ACAAAEt2AGEA
bAB1AGUAIABpAHMAIABuAG8AdAAgAGEAIAB2AGEAbABpAGQAIABRAC0AZQBuAGMAbwBkAGUAZAAg
AHMAdAByAGkAbgBnAAFpdgBhAGwAdQBlACAAaQBzACAAbgBvAHQAIABhACAAdgBhAGwAaQBkACAA
cQB1AG8AdABlAGQALQBwAHIAaQBuAHQAYQBiAGwAZQAgAGUAbgBjAG8AZABlAGQAIABzAHQAcgBp
AG4AZwABBSYALQABAyYAAFtUAGgAZQAgAGkAbgBwAHUAdAAgAHMAdAByAGkAbgBnACAAaQBzACAA
bgBvAHQAIABpAG4AIAB0AGgAZQAgAGMAbwByAHIAZQBjAHQAIABGAG8AcgBtAGEAdAAAKyIAKABb
AF4AIgBdACsAKQAiAFwAcwArACIAKABbAF4AIgBdACsAKQAiAAAzrSkMQfMvTrIpr6R6o6oEAAMg
AAEEIAEBCAUgAQERFQQgAQEOBSABARFpBxUSgJ0BEkwiBxERQRJFDg4IDh0ODhJUHQkdEkkIFRJN
ARJRElEdBQ4SVQMgAA4FIAASgQkFIAASgTUHFRKBOQESUQggABUSTQETAAYVEk0BElEEIAATAAQg
AQIODRABAgIVEoFBAR4AHgADCgEOBSAAEoCpAyAACgcgAwgdBQgIBQACDg4OBAABAg4HAAQODg4O
Dg0gBAEOEYFVEYFZEYFdBiABARKAqQUgAQEdBQQAABFBBQABDh0OBiACAQ4SRQMgAAgDIAACBSAA
EoFtBSAAEoFxCCAFAggODg4ICAABEoF1EYF5BSAAEoF9ByACAQ4SgX0IBwYODg4ODgoFAAASgYEG
FRJ9Ag4OCiABARUSgYUBEwAVBwgSgIERNBURgIkCDg4OESwKESQOBiABEoCBDgsgABUSgIUCEwAT
AQcVEoCFAg4OCyAAFRGAiQITABMBBxURgIkCDg4GIAETARMACwcCEhwVEoCNARIYBxUSgI0BEhgK
IAEBFRKBQQETAAUgAQETAAUgAB0TAAQHARIYBQACAg4ODQcEFRKAjQESGAgOEhgGAAMODg4OAwcB
CAcHBAgCHQMDBSABAR0DBxUSfQIOESQHIAIBEwATAQsHAhUSfQIOESQRJAsHAhUSfQIOESwRLAcV
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
AAESgP0SSQQAAQ4OBgABDhKBCQgAAg4SSRKA/QwABAESgIESSRKA/QIJAAIBEoCBEoERCwADARKA
gRJJEoD9CAACARKAgRJJBQABEkkOBgABEoD9DgcAAR0SgQkOBgABEYD5DggAAgESSRKA/QgAAwES
SRIYDggAAhJREhgdBQkAAhKBDRIYHQUJAAIdEngOEoD9CQACHRJ4EoDNDgYAARIYEngGIAEBEoD9
BAAAEnwFAAESfA4HAAESfBGBBQYAAhJ8Dg4FAAESfAoGAAESfB0JBQABEnwJBiABEnwSfAQgAQEc
CiAAFRGBHQERgJQLIAEBFRGBHQERgJQJIAAVEoCNARJ8CiABARUSgI0BEnwJAAMSfA4SfBJ8BgAC
HQ4OCA4QAQMBFRKAnQEeABweAAcAAg4OEoEVBCABCAIEIAEBAwQgAQ4DDSAEAhwSgOESgOURgOkE
IAECAwQIABJhBAgAEmUECAASEAMoAA4EKAARNAgoABUSfQIODgQoABEsAygACgQoABIgBCgAESQD
KAAJBCgAElQDKAACBSgAHRFcAygACAMoAAsFKAASgP0DKAAcCigAFRGBHQERgJQJKAAVEoCNARJ8
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF8z
ZmRkMmI5NDJlMjU0ZmY3YTdjODVjZDY0NTRiNDYzYwAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAy
MDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNl
cy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0
cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVu
dGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADcAQEAAAAAAAAAAAD2AQEAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA6AEBAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRs
bAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAA
AAAAAAEAAAAAAEgAAABYIAEAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBf
AEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAKp3yhwAAAEAqnfKHD8AAAAAAAAABAAAAAIAAAAAAAAA
AAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBs
AGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYD
AAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBD
AG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBUAF8AMwBmAGQAZAAyAGIAOQA0ADIAZQAyADUANABmAGYANwBhADcAYwA4
ADUAYwBkADYANAA1ADQAYgA0ADYAMwBjAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADcAMwA3ADAALgAzADAANgAzADQAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AMwBmAGQAZAAyAGIAOQA0ADIAZQAyADUANABmAGYANwBhADcAYwA4ADUA
YwBkADYANAA1ADQAYgA0ADYAMwBjAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUA
ZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABG
AGkAbABlAG4AYQBtAGUAAABTAFQAXwAzAGYAZABkADIAYgA5ADQAMgBlADIANQA0AGYAZgA3AGEA
NwBjADgANQBjAGQANgA0ADUANABiADQANgAzAGMALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBj
AHQATgBhAG0AZQAAAAAAUwBUAF8AMwBmAGQAZAAyAGIAOQA0ADIAZQAyADUANABmAGYANwBhADcA
YwA4ADUAYwBkADYANAA1ADQAYgA0ADYAMwBjAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADMANwAwAC4AMwAwADYAMwA0AAAAAABGAA8AAQBBAHMAcwBlAG0A
YgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADMANwAwAC4AMwAwADYAMwA0AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
DAAAAAgyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\EOJ"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Задача &quot;Скрипт&quot;"
      DTS:Disabled="True"
      DTS:DTSID="{64403057-6a27-4bf3-a069-aa1edf87075e}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="EOJ"
      DTS:ThreadHint="5">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_fb980a0d08fa42168953101daab35c13"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_762886c2d06b40b6888773b5641adf4b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_762886c2d06b40b6888773b5641adf4b")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion

using System.IO;
#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion
namespace ST_762886c2d06b40b6888773b5641adf4b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            using (StreamWriter writer = new StreamWriter(@"C:\Users\andreydruzhinin\Desktop\IN\eoj.txt"))
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_fb980a0d08fa42168953101daab35c13.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{F18C04C3-47F8-4514-A144-402FB29D5983}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_762886c2d06b40b6888773b5641adf4b</RootNamespace><AssemblyName>ST_fb980a0d08fa42168953101daab35c13</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile></TargetFrameworkProfile></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST130</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_762886c2d06b40b6888773b5641adf4b</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_762886c2d06b40b6888773b5641adf4b</msb:DisplayName>
		<msb:ProjectId>{D2CE9827-BB56-432C-B3FB-F5DF755A0660}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_fb980a0d08fa42168953101daab35c13.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_762886c2d06b40b6888773b5641adf4b.Properties.Settings.get_Default():ST_762886c2d06b40b6888773b5641adf4b.Properties.Sett" +
    "ings")]

namespace ST_762886c2d06b40b6888773b5641adf4b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_762886c2d06b40b6888773b5641adf4b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_762886c2d06b40b6888773b5641adf4b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_762886c2d06b40b6888773b5641adf4b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_762886c2d06b40b6888773b5641adf4b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_762886c2d06b40b6888773b5641adf4b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_762886c2d06b40b6888773b5641adf4b.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAN7TVF4AAAAAAAAAAOAAIiALATAAAA4AAAAIAAAAAAAASi0A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPgsAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAUA0AAAAgAAAADgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAQAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAFgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAs
LQAAAAAAAEgAAAACAAUA+CAAAEgLAAABAAAAAAAAAEAsAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswAgAkAAAAAQAAEXIBAABwcxAAAAoKAigRAAAKFm8SAAAK
3goGLAYGbxMAAArcKgEQAAACAAsADhkACgAAAAAeAigUAAAKKh4CKBUAAAoqrn4BAAAELR5yWQAA
cNADAAACKBYAAApvFwAACnMYAAAKgAEAAAR+AQAABCoafgIAAAQqHgKAAgAABCoafgMAAAQqHgIo
GQAACioucwgAAAaAAwAABCoAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAJwD
AAAjfgAACAQAABQFAAAjU3RyaW5ncwAAAAAcCQAAzAAAACNVUwDoCQAAEAAAACNHVUlEAAAA+AkA
AFABAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAdAAAABQAAAAYAAAAJAAAA
AQAAABkAAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAAAwAAAAEAAAABAAAAAAA4AwEAAAAA
AAYA+wEMBAYAigIMBAYARwH5Aw8AgAQAAAYAdAGtAwYA3gGtAwYAvwGtAwYAcQKtAwYAGwKtAwYA
NAKtAwYAiwGtAwYApgGuAgoATwLnAgoAvgDnAgYA3wMKAAYAZwNgAwYAKgH5AwYA5QRgAwYAzwMs
BAYAvwOYAw4A+gAiAw4AWwEiAw4A2gCDAwYADwEMBAoAEAPnAgYAWQBgAwYAiQBgAwYAZQBgAwYA
CwWtAwAAAAABAAAAAAABAAEAAQAQAHgDHAA5AAEAAQAAABAAMwSPBEkAAQADAAABEAC+BI8EXQAD
AAcAAwEAANcEAABBAAQACgARAGwDVAARAK4AWAARAEkAXAAGBhQAYABWgMcEYwBWgI4AYwBQIAAA
AACGAH4DBgABAJAgAAAAAIYY7AMGAAEAmCAAAAAAgxjsAwYAAQCgIAAAAACTCMsDZwABAMwgAAAA
AJMIlgBsAAEA0yAAAAAAkwiiAHEAAQDbIAAAAACWCOwEdwACAOIgAAAAAIYY7AMGAAIA6iAAAAAA
kRjyA3wAAgAAAAEAqAIJAOwDAQARAOwDBgAZAOwDCgApAOwDEAAxAOwDEAA5AOwDEABBAOwDEABJ
AOwDEABRAOwDEABZAOwDEABhAOwDEABpAOwDBgCJAOwDBgCxAOwDFQDBAOwDBgB5AOwDEABxAM8E
IADJAPgEAQDRAPIABgBxAOwDBgCRAOwDBgDZAHcAJQDZAAcFLACZAOwDMQC5AOwDBgAIABQASgAI
ABgATwApAHMAtwAuAAsAjwAuABMAmAAuABsAtwAuACMAwAAuACsA6QAuADMA6QAuADsA6QAuAEMA
wAAuAEsA7wAuAFMA6QAuAFsABgFDAGMATwBJAHMAtwBhAHsATwBjAGsATwAbAAMAAQAEAAMAAADP
A4AAAAC2AIUAAADwBIoAAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAADAHEdNAAAAAAAA
HAAAAAQAAAAAAAAAAAAAADgAQAAAAAAADQAAAAAAAAAAAAAAQQDIAgAAAAAEAAAAAAAAAAAAAAA4
AGADAAAAAAAAAAABAAAAPQQAAAUAAgAAAAA8TW9kdWxlPgBTeXN0ZW0uSU8AdmFsdWVfXwBTVF83
NjI4ODZjMmQwNmI0MGI2ODg4NzczYjU2NDFhZGY0YgBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UA
SURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAVHlwZQBGYWls
dXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRP
YmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JCcm93
c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRU
YXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNv
bXBhdGliaWxpdHlBdHRyaWJ1dGUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBNaWNy
b3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3Mu
U2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfNzYy
ODg2YzJkMDZiNDBiNjg4ODc3M2I1NjQxYWRmNGIuZGxsAFN5c3RlbQBFbnVtAHJlc291cmNlTWFu
AFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lz
dGVtLlJlZmxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBTdHJlYW1Xcml0
ZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxl
clNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfNzYyODg2YzJkMDZiNDBiNjg4ODc3M2I1NjQx
YWRmNGIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzc2
Mjg4NmMyZDA2YjQwYjY4ODg3NzNiNTY0MWFkZjRiLlByb3BlcnRpZXMAU2V0dGluZ3MAU3VjY2Vz
cwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0
AGdldF9Bc3NlbWJseQAAV0MAOgBcAFUAcwBlAHIAcwBcAGEAbgBkAHIAZQB5AGQAcgB1AHoAaABp
AG4AaQBuAFwARABlAHMAawB0AG8AcABcAEkATgBcAGUAbwBqAC4AdAB4AHQAAHFTAFQAXwA3ADYA
MgA4ADgANgBjADIAZAAwADYAYgA0ADAAYgA2ADgAOAA4ADcANwAzAGIANQA2ADQAMQBhAGQAZgA0
AGIALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAABH2SZ6exe5Qruo
tXifQpwRAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFVBAcBEj0EIAASZQYAARJtEXEEIAASdQYg
AgEOEnUIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAwYSTQMGElEDBhIQAgYIAwYRFAQAABJN
BAAAElEFAAEBElEEAAASEAMAAAEECAASTQQIABJRBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBO
b25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzc2Mjg4NmMyZDA2YjQwYjY4ODg3NzNi
NTY0MWFkZjRiAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAEcBABouTkVURnJhbWV3b3Jr
LFZlcnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAAA
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAACAtAAAAAAAAAAAAADotAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsLQAA
AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAA
AAAASAAAAFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYA
TwAAAAAAvQTv/gAAAQAAAAEAR03AHAAAAQBHTcAcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAA
AEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkA
bwBuAAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAw
ADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAA
YQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBu
AAAAAABTAFQAXwA3ADYAMgA4ADgANgBjADIAZAAwADYAYgA0ADAAYgA2ADgAOAA4ADcANwAzAGIA
NQA2ADQAMQBhAGQAZgA0AGIAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw
AC4ANwAzADYAMAAuADEAOQA3ADgAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUA
AABTAFQAXwA3ADYAMgA4ADgANgBjADIAZAAwADYAYgA0ADAAYgA2ADgAOAA4ADcANwAzAGIANQA2
ADQAMQBhAGQAZgA0AGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgA
dAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABU
AHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAVABfADcANgAyADgAOAA2AGMAMgBkADAANgBiADQAMABiADYAOAA4ADgANwA3
ADMAYgA1ADYANAAxAGEAZABmADQAYgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAFQAXwA3ADYAMgA4ADgANgBjADIAZAAwADYAYgA0ADAAYgA2ADgAOAA4ADcANwAz
AGIANQA2ADQAMQBhAGQAZgA0AGIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADcAMwA2ADAALgAxADkANwA4ADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAg
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA2ADAALgAxADkANwA4ADMAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAMAAAATD0A
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Process files"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Контейнер &quot;Цикл по каждому элементу&quot;"
      DTS:DTSID="{413E269B-71A5-4EDD-A85D-2301D943113B}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="0"
      DTS:ObjectName="Process files">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{037A88EC-4E77-413B-8025-83A79F845FCF}"
        DTS:ObjectName="{037A88EC-4E77-413B-8025-83A79F845FCF}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::requesttable" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{6F183ED0-5AC0-49B9-87B5-F41559C0C7B3}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="emptycoderows">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Process files\Add data Alta"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{1647DD1C-3A6C-404D-9B12-E2C54C305969}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Add data Alta"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
              SQLTask:SqlStatementSource="DECLARE @guid nvarchar(500) = ?;&#xA;&#xA;UPDATE rc&#xA;SET    [ref_hs_code] = oa_ext.hs_code&#xA;      ,[ref_hs_code_add] = oa_ext.hs_addcode&#xA;      ,[ref_common_des]= oa_ext.common_des&#xA;      ,[ref_tovg_des]= oa_ext.tovg_des&#xA;      ,[ref_sert_num]= oa_ext.sert_num&#xA;      ,[ref_sert_from]= oa_ext.sert_from&#xA;      ,[ref_sert_to]= oa_ext.sert_to&#xA;      ,[ref_sgr_num]= oa_ext.sgr_num&#xA;      ,[ref_sgr_from]= oa_ext.sgr_from&#x9;&#xA;&#x9;  ,[ref_sgr_to]= oa_ext.sgr_to&#xA;FROM [automation].[dbo].[request_contents] rc&#xA;OUTER APPLY ( &#xA;SELECT TOP (1) &#xA;      [G_31] common_des&#xA;      ,[G_33_1] hs_code&#xA;      ,[G_33_2] hs_addcode     &#xA;      ,[G31_1] tovg_des  &#xA;      ,[sert_num] sert_num&#xA;      ,[sert_begin] sert_from&#xA;      ,[sert_end] sert_to&#xA;      ,[sgr_num] sgr_num&#xA;      ,[sgr_begin] sgr_from&#xA;      ,[sgr_end] sgr_to&#xA;FROM [automation].[dbo].[new_ref] old&#xA;WHERE &#xA;old.[vat] = rc.VAT&#xA;AND old.[contract_num] = rc.contract_num &#xA;AND old.[contract_date] = rc.contract_date&#xA;AND (old.[G31_15] = rc.article OR old.[G31_15_MOD] = rc.model)&#xA;ORDER BY [release_date] DESC, [release_time] DESC&#xA;) AS oa_ext&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET    [auto_hs_code] = oa_ext.hs_code&#xA;      ,[auto_hs_code_add] = oa_ext.hs_code_add&#xA;      ,[auto_common_des]= oa_ext.common_des&#xA;      ,[auto_tovg_des]= oa_ext.tovg_des&#xA;      ,[auto_sert_num]= oa_ext.sert_num&#xA;      ,[auto_sert_from]= oa_ext.sert_from&#xA;      ,[auto_sert_to]= oa_ext.sert_to&#xA;      ,[auto_sgr_num]= oa_ext.sgr_num&#xA;      ,[auto_sgr_from]= oa_ext.sgr_from&#xA;      ,[auto_sgr_to]= oa_ext.sgr_to&#x9;  &#xA;&#x9;  ,[country_code_let] = oa_country.code_name&#xA;&#x9;  ,[country_code_num] = oa_country.code_num&#xA;&#x9;  ,[unit_code_num] = oa_units.code&#x9;&#xA;&#x9;  ,[transport_doc] = oa_else.transport_doc&#x9; &#xA;&#x9;  ,[ref_regnum] = oa_ext.DocNum&#xA;&#x9;  ,[ref_G32] = oa_ext.G32&#xA;&#x9;  ,[decl_hs_code] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_hscode&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.hs_code&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_hs_code&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;&#x9;  ,[decl_hs_code_add] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_addcode&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.hs_code_add&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_hs_code_add&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_common_des] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_des_common&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.common_des&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_common_des&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_tovg_des] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_des_tovg&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.tovg_des&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_tovg_des&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_sert_num] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_sert_num&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.sert_num&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_sert_num&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_sert_from] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_sert_from&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.sert_from&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_sert_from&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_sert_to] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_sert_to&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.sert_to&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_sert_to&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_sgr_num] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_sgr_num&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.sgr_num&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_sgr_num&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_sgr_from] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_sgr_from&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.sgr_from&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_sgr_from&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;      ,[decl_sgr_to] = CASE &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') &lt;&gt; '' THEN rc.man_sgr_to&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') &lt;&gt; '' THEN oa_ext.sgr_to&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN COALESCE(rc.man_hscode, '') = '' AND COALESCE(oa_ext.hs_code, '') = '' AND COALESCE(rc.ref_hs_code, '') &lt;&gt; '' THEN rc.ref_sgr_to&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE NULL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xA;FROM [automation].[dbo].[request_contents] rc&#xA;OUTER APPLY ( &#xA;SELECT TOP (1) &#xA;t.G33 hs_code,&#xA;t.G333 hs_code_add,&#xA;dd.text1 common_des,&#xA;dt.text1 tovg_des,&#xA;dp_sert.num sert_num,&#xA;dp_sert.G443 sert_from,&#xA;dp_sert.G447 sert_to,&#xA;dp_sgr.num sgr_num,&#xA;dp_sgr.G443 sgr_from,&#xA;dp_sgr.G447 sgr_to,&#xA;t.DocNum,&#xA;t.G32&#xA;FROM [Docs2SQL].[dbo].[DBRHEAD] h&#xA;JOIN [Docs2SQL].[dbo].[DBRTECHD] td ON h.DocNum = td.DocNum AND td.G441 = '03011' AND td.G32 = '1' &#xA;JOIN [automation].[dbo].[DBRTOVAR] t ON h.DocNum = t.DocNum&#xA;JOIN [automation].[dbo].[DBRDINFO_DES] dd ON t.DocNum = dd.DocNum AND t.G32 = dd.G32&#xA;JOIN [automation].[dbo].[DBRTOVG] tovg ON t.DocNum = tovg.docnum AND t.G32 = tovg.G32 &#xA;JOIN [automation].[dbo].[DBRDINFO_TOVG] dt ON tovg.DocNum = dt.DocNum AND tovg.G32 = dt.G32 AND tovg.G32G = dt.G32G&#xA;LEFT JOIN [automation].[dbo].[DBRTECHD_PARSE] dp_sert ON dp_sert.G441 = '01191' AND tovg.DocNum = dp_sert.DocNum AND tovg.G32 = dp_sert.g32&#xA;LEFT JOIN [automation].[dbo].[DBRTECHD_PARSE] dp_sgr ON dp_sgr.G441 = '01206' AND tovg.DocNum = dp_sgr.DocNum AND tovg.G32 = dp_sgr.g32&#xA;WHERE &#xA;h.[G141] = rc.VAT&#xA;AND td.G442 = rc.contract_num &#xA;AND td.G443 = rc.contract_date&#xA;AND (tovg.G31_15 = rc.article OR tovg.G31_15_MOD = rc.model)&#xA;ORDER BY h.GD1 DESC, h.GD11 DESC&#xA;) AS oa_ext&#xA;OUTER APPLY ( &#xA;SELECT TOP (1) &#xA;r.[code_name], r.[code_num]&#xA;FROM [automation].[dbo].[ref_countries] r&#xA;WHERE r.[description] = rc.country&#xA;) AS oa_country&#xA;OUTER APPLY ( &#xA;SELECT TOP (1) &#xA;r.code&#xA;FROM [automation].[dbo].[ref_measurement_units] r&#xA;WHERE r.[code_name] = rc.unit_measurement&#xA;) AS oa_units&#xA;OUTER APPLY ( &#xA;SELECT &#xA;CASE&#xA;WHEN rc.Transport_Method_NAV = 'Морской транспорт' THEN '02011'&#xA;WHEN rc.Transport_Method_NAV = 'Железнодорожный транспорт' THEN '02013'&#xA;WHEN rc.Transport_Method_NAV LIKE '%Автотранспорт%' OR rc.Transport_Method_NAV LIKE '%Сборный груз%' THEN '02015'&#xA;WHEN rc.Transport_Method_NAV = 'Авиатранспорт' THEN '02017'&#xA;ELSE ''&#xA;END transport_doc&#xA;) AS oa_else&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET rc.distinct_code = &#xA;(CASE&#xA;WHEN EXISTS (SELECT 0 FROM [automation].[dbo].[distinct_codes] d &#xA;WHERE CHARINDEX (d.[hs_code], rc.[decl_hs_code], 1) = 1)&#xA;THEN 1000000 + rc.row_id&#xA;ELSE 0&#xA;END)&#xA;FROM [automation].[dbo].[request_contents] rc&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET  [group_num] = rc.[group]&#xA;&#x9;,[item_num] = rc.[item]&#xA;&#x9;,[item_gross] = rc.item_gross_sum&#xA;&#x9;,[item_net] = rc.item_net_sum&#xA;&#x9;,[item_packages] = rc.item_packages_sum&#xA;&#x9;,[item_price] = rc.item_price_sum&#xA;FROM (&#xA;SELECT &#xA;*&#xA;,[group] = DENSE_RANK() OVER (PARTITION BY [guid], COALESCE([decl_hs_code], '') + COALESCE([decl_hs_code_add], '') + COALESCE([country_code_let], '') + CAST([distinct_code] AS nvarchar(20)) ORDER BY COALESCE([decl_tovg_des], ''))&#xA;,[item] = DENSE_RANK() OVER (PARTITION BY [guid] ORDER BY COALESCE([decl_hs_code], '') + COALESCE([decl_hs_code_add], '') + COALESCE([country_code_let], '') + CAST([distinct_code] AS nvarchar(20)))&#xA;,[item_gross_sum] = SUM(gross) OVER (PARTITION BY [guid], COALESCE([decl_hs_code], '') + COALESCE([decl_hs_code_add], '') + COALESCE([country_code_let], '') + CAST([distinct_code] AS nvarchar(20)))&#xA;,[item_net_sum] = SUM(net) OVER (PARTITION BY [guid], COALESCE([decl_hs_code], '') + COALESCE([decl_hs_code_add], '') + COALESCE([country_code_let], '') + CAST([distinct_code] AS nvarchar(20)))&#xA;,[item_packages_sum] = SUM(packages_qty) OVER (PARTITION BY [guid], COALESCE([decl_hs_code], '') + COALESCE([decl_hs_code_add], '') + COALESCE([country_code_let], '') + CAST([distinct_code] AS nvarchar(20)))&#xA;,[item_price_sum] = SUM(price) OVER (PARTITION BY [guid], COALESCE([decl_hs_code], '') + COALESCE([decl_hs_code_add], '') + COALESCE([country_code_let], '') + CAST([distinct_code] AS nvarchar(20)))&#xA;FROM &#xA;[automation].[dbo].[request_contents]) rc&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET [packing_code] = &#xA;CASE&#xA;WHEN (rc.item_gross - rc.item_net) / COALESCE(NULLIF(rc.item_packages, 0), 1) &lt; 1 THEN 'CT'&#xA;WHEN (rc.item_gross - rc.item_net) / COALESCE(NULLIF(rc.item_packages, 0), 1) &gt;= 1 AND (rc.item_gross - rc.item_net) / COALESCE(NULLIF(rc.item_packages, 0), 1) &lt; 4 THEN 'BX'&#xA;ELSE 'CS'&#xA;END&#xA;FROM [automation].[dbo].[request_contents] rc&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET item_containers = oa_container.parsing&#xA;FROM [automation].[dbo].[request_contents] rc&#xA;OUTER APPLY (&#xA;SELECT automation.dbo.ParseContainers(x.item_concat, oa.else_concat) parsing&#xA;FROM (&#xA;SELECT rcc.[guid], rcc.item_num, automation.dbo.rowsconcat(ltrim(rtrim([request_container])), ', ') item_concat    &#xA;FROM [automation].[dbo].[request_contents] rcc&#xA;WHERE rcc.[guid] = rc.[guid] AND rcc.item_num = rc.item_num&#xA;GROUP BY rcc.[guid], rcc.item_num&#xA;) x&#xA;OUTER APPLY (SELECT automation.dbo.rowsconcat(ltrim(rtrim([request_container])), ', ') else_concat  &#xA;FROM [automation].[dbo].[request_contents] rccc&#xA;WHERE rccc.[guid] = x.[guid] AND rccc.item_num &lt;&gt; x.item_num&#xA;) AS oa&#xA;) AS oa_container&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET qty_containers = &#xA;CASE&#xA;WHEN LEN(COALESCE([item_containers], '')) = 0 THEN 0&#xA;WHEN LEN(COALESCE([item_containers], '')) &gt; 0 AND CHARINDEX(',', COALESCE([item_containers], '')) = 0 THEN 1&#xA;ELSE 1 + (LEN(COALESCE([item_containers], '')) - LEN(REPLACE(COALESCE([item_containers], ''), ',', '')))&#xA;END&#xA;FROM [automation].[dbo].[request_contents] rc&#xA;WHERE [rc].[guid] = @guid&#xA;&#xA;UPDATE rc&#xA;SET rc.ref_regnum = oa_self.ref_regnum, rc.ref_G32 = oa_self.ref_G32&#xA;FROM [automation].[dbo].[request_contents] rc &#xA;OUTER APPLY &#xA;(SELECT TOP (1) rcc.ref_regnum, rcc.ref_G32 &#xA;FROM [automation].[dbo].[request_contents] rcc&#xA;WHERE rcc.ref_regnum IS NOT NULL AND rcc.ref_G32 IS NOT NULL &#xA;AND (rcc.decl_sert_num = rc.decl_sert_num OR rcc.decl_sgr_num = rc.decl_sgr_num)) AS oa_self&#xA;WHERE [rc].[guid] = @guid AND rc.ref_regnum IS NULL AND rc.ref_G32 IS NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@guid"
                SQLTask:DtsVariableName="User::docguid"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Add data BI"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{22D1C165-EC63-421A-9C75-8FEC382ACAA0}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Add data BI"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
              SQLTask:SqlStatementSource="DECLARE @guid nvarchar(500) = ?;&#xA;UPDATE rc&#xA;SET [man_TERMINAL_NAME] = oa_manual_data.man_TERMINAL_NAME&#xA;      ,[man_TrainTransportDesc] = oa_manual_data.man_TrainTransportDesc&#xA;      ,[man_DELIVERY_SVX_DATE_TIME] = oa_manual_data.man_DELIVERY_SVX_DATE_TIME&#xA;      ,[man_TCD_DATE_TIME] = oa_manual_data.man_TCD_DATE_TIME&#xA;      ,[man_TransportDeliveryCloseDateTimeCaption] = oa_manual_data.man_TransportDeliveryCloseDateTimeCaption&#xA;      ,[Delivery] = oa_delivery.Delivery&#xA;      ,[Terminal_NAV] = oa_delivery.Terminal_NAV&#xA;      ,[Transport_Method_NAV] = oa_delivery.Transport_Method_NAV&#xA;      ,[VAT] = oa_customer.VAT&#xA;&#x9;  ,[currency_code] = oa_currency.code_num&#xA;&#x9;  ,[usd_rate] = oa_currency_usd.[Value]&#xA;      ,[eur_rate] = oa_currency_eur.[Value]&#xA;      ,[currency_rate] = oa_currency_actual.[Value]&#xA;      ,[currency_nominal] = oa_currency_actual.Nominal&#xA;FROM [automation].[dbo].[request_contents] rc    &#xA;  OUTER APPLY (&#xA;  SELECT TOP (1) &#xA;   [man_TERMINAL_NAME]&#xA;  ,[man_TrainTransportDesc]    &#xA;  ,[man_DELIVERY_SVX_DATE_TIME]&#xA;  ,[man_TCD_DATE_TIME]&#xA;  ,[man_TransportDeliveryCloseDateTimeCaption]&#xA;  FROM [webproject].[dbo].[monitor_manual_data] w&#xA;  WHERE w.key_code = rc.cargoid&#xA;  ) AS oa_manual_data  &#xA;  OUTER APPLY (&#xA;  SELECT TOP (1) &#xA;  c.DeliveryNo_ Delivery &#xA;  ,sd.[Terminal Code] Terminal_NAV&#xA;  ,sd.[Transport Method] Transport_Method_NAV&#xA;  FROM [BI].[dwh].[CargoDelivery] c&#xA;  JOIN [BI].[dwh].[ETP$SQL_Delivery] sd ON sd.No_ = c.DeliveryNo_&#xA;  WHERE c.CargoID = rc.cargoid &#xA;  ) AS oa_delivery  &#xA;  OUTER APPLY (&#xA;  SELECT TOP (1) &#xA;  cust.[VAT Registration No_] VAT  &#xA;  FROM [BI].[dwh].[ETP$SQL_Cargo] c&#xA;  JOIN [BI].[dwh].[ETP$Customer] cust ON c.[Customer No_] = cust.No_  &#xA;  WHERE c.[Cargo ID] = rc.cargoid&#xA;  ) AS oa_customer&#xA;  OUTER APPLY (&#xA;  SELECT TOP (1) c.code_num&#xA;  FROM [automation].[dbo].[currency] c  &#xA;  WHERE c.code_letter = rc.currency&#xA;  ) AS oa_currency  &#xA;  OUTER APPLY (&#xA;  SELECT TOP (1) [Nominal], [Value]&#xA;  FROM [automation].[dbo].[currency_rates] c  &#xA;  WHERE c.CharCode = rc.currency AND c.[Date] = CAST(GETDATE() AS date)&#xA;  ) AS oa_currency_actual&#xA;  OUTER APPLY (&#xA;  SELECT TOP (1) [Value]&#xA;  FROM [automation].[dbo].[currency_rates] c  &#xA;  WHERE c.CharCode = 'USD' AND c.[Date] = CAST(GETDATE() AS date)&#xA;  ) AS oa_currency_usd&#xA;    OUTER APPLY (&#xA;  SELECT TOP (1) [Value]&#xA;  FROM [automation].[dbo].[currency_rates] c  &#xA;  WHERE c.CharCode = 'EUR' AND c.[Date] = CAST(GETDATE() AS date)&#xA;  ) AS oa_currency_eur&#xA; WHERE [rc].[guid] = @guid" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@guid"
                SQLTask:DtsVariableName="User::docguid"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Checkpoint"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{47FE2314-57D9-41CE-8DD5-FC3DCE5E3025}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Checkpoint"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{105534D9-74E2-470E-9E3C-B4E5E8034318}"
              SQLTask:SqlStatementSource="SELECT COUNT(*) c &#xA;FROM [automation].[dbo].[request_contents_temp]&#xA;WHERE COALESCE([decl_hs_code], '') = ''"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::emptycoderows" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Compose additional documents"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{604c243a-c04a-4589-97d8-f7dd4a01b1a1}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Compose additional documents"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
              SQLTask:SqlStatementSource="DECLARE @guid nvarchar(500) = ?;&#xA;&#xA;INSERT [automation].[dbo].[request_documents] &#xA;&#x9;  ([guid]&#xA;      ,[item_num]&#xA;      ,[G4403]&#xA;      ,[G441]&#xA;      ,[G442]&#xA;      ,[G442R]&#xA;      ,[G443_FROM]&#xA;&#x9;  ,[G443_TO]&#xA;      ,[G444]&#xA;      ,[ED_ID]&#xA;&#x9;  ,[conc])&#xA;SELECT&#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,COALESCE(oa_ext.[G4403], 0)&#xA;&#x9;  ,'01191'&#xA;&#x9;  ,[decl_sert_num]&#xA;&#x9;  ,oa_ext.[G442R]&#xA;&#x9;  ,[decl_sert_from]&#xA;      ,[decl_sert_to]&#xA;&#x9;  ,'СЕРТИФИКАТ/ДЕКЛАРАЦИЯ СООТВЕТСТВИЯ/ОТС'&#xA;&#x9;  ,oa_ext.[ED_ID]&#xA;&#x9;  ,[decl_sert_num] +&#xA;&#x9;  (CASE WHEN [decl_sert_from] IS NOT NULL THEN ' ОТ ' + CONVERT(nvarchar(50), [decl_sert_from], 104) ELSE '' END) +&#xA;&#x9;  (CASE WHEN [decl_sert_to] IS NOT NULL THEN ' ДО ' + CONVERT(nvarchar(50), [decl_sert_to], 104) ELSE '' END)&#xA;  FROM [automation].[dbo].[request_contents] rc OUTER APPLY&#xA;  (SELECT TOP (1) [G4403],[G442R],[ED_ID] FROM [automation].[dbo].[DBRTECHD_PARSE] dp &#xA;  WHERE dp.num = rc.[decl_sert_num] AND rc.ref_regnum = dp.DocNum AND rc.ref_G32 = dp.g32) AS oa_ext&#xA;  WHERE [guid] = @guid AND [decl_sert_num] &lt;&gt; '' &#xA;  &#xA;  UNION&#xA;  &#xA;  SELECT&#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,COALESCE(oa_ext.[G4403], 0)&#xA;&#x9;  ,'01206'&#xA;&#x9;  ,[decl_sgr_num]&#xA;&#x9;  ,oa_ext.[G442R]&#xA;&#x9;  ,[decl_sgr_from]&#xA;      ,[decl_sgr_to]&#xA;&#x9;  ,'СВИДЕТЕЛЬСТВО О ГОСУДАРСТВЕННОЙ РЕГИСТРАЦИИ'&#xA;&#x9;  ,oa_ext.[ED_ID]&#xA;&#x9;  ,[decl_sgr_num] +&#xA;&#x9;  (CASE WHEN [decl_sgr_from] IS NOT NULL THEN ' ОТ ' + CONVERT(nvarchar(50), [decl_sgr_from], 104) ELSE '' END) +&#xA;&#x9;  (CASE WHEN [decl_sgr_to] IS NOT NULL THEN ' ДО ' + CONVERT(nvarchar(50), [decl_sgr_to], 104) ELSE '' END)&#xA;  FROM [automation].[dbo].[request_contents] rc OUTER APPLY&#xA;  (SELECT TOP (1) [G4403],[G442R],[ED_ID] FROM [automation].[dbo].[DBRTECHD_PARSE] dp &#xA;  WHERE dp.num = rc.[decl_sgr_num] AND rc.ref_regnum = dp.DocNum AND rc.ref_G32 = dp.g32) AS oa_ext&#xA;  WHERE [guid] = @guid AND [decl_sgr_num] &lt;&gt; ''  &#xA;  &#xA;  UNION&#xA;&#xA;    SELECT&#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,'0'&#xA;&#x9;  ,rc.transport_doc&#xA;&#x9;  ,'Б/Н'&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;      ,NULL&#xA;&#x9;  ,CASE &#xA;&#x9;  WHEN transport_doc = '02011' THEN 'КОНОСАМЕНТ'&#xA;&#x9;  WHEN transport_doc = '02013' THEN 'ЖЕЛЕЗНОДОРОЖНАЯ НАКЛАДНАЯ'&#xA;&#x9;  WHEN transport_doc = '02015' THEN 'ТРАНСПОРТНАЯ НАКЛАДНАЯ, ПРЕДУСМОТРЕННАЯ КОНВЕНЦИЕЙ О ДОГОВОРЕ МЕЖДУНАРОДНОЙ ДОРОЖНОЙ ПЕРЕВОЗКИ ГРУЗОВ 1956 ГОДА'&#xA;&#x9;  WHEN transport_doc = '02017' THEN 'АВИАНАКЛАДНАЯ'&#xA;&#x9;  ELSE ''&#xA;&#x9;  END tn&#xA;&#x9;  ,NULL&#xA;&#x9;  ,'Б/Н'&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  WHERE [guid] = @guid&#xA;  &#xA;  UNION&#xA;  &#xA;  SELECT  &#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,COALESCE(oa_cont.[G4403], '0')&#xA;&#x9;  ,'03011'&#xA;&#x9;  ,rc.[contract_num]&#xA;&#x9;  ,oa_cont.G442R&#xA;&#x9;  ,rc.[contract_date]&#xA;      ,NULL&#xA;&#x9;  ,'ДОГОВОР (КОНТРАКТ)'&#xA;&#x9;  ,oa_cont.ED_ID&#xA;&#x9;  ,[contract_num] + ' ОТ ' + CONVERT(nvarchar(50), [contract_date], 104)&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  OUTER APPLY (SELECT TOP (1) [G4403],[G442R],[ED_ID] FROM [automation].[dbo].[contracts] c&#xA;  WHERE rc.VAT = c.G141 AND rc.contract_date = c.G443 AND rc.contract_num = c.G442) AS oa_cont&#xA;  WHERE [guid] = @guid&#xA;&#xA;  UNION &#xA;&#xA;    SELECT  &#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,ca.[G4403]&#xA;&#x9;  ,'03012'&#xA;&#x9;  ,ca.[G442]&#xA;&#x9;  ,ca.[G442R]&#xA;&#x9;  ,ca.[G443]&#xA;      ,NULL&#xA;&#x9;  ,ca.[G444]&#xA;&#x9;  ,ca.[ED_ID] &#xA;&#x9;  ,ca.[G442] + ' ОТ ' + CONVERT(nvarchar(50), ca.[G443], 104)&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  CROSS APPLY (SELECT ca.[G4403]      &#xA;      ,ca.[G442]&#xA;      ,ca.[G442R]&#xA;      ,ca.[G443]&#xA;      ,ca.[G444]&#xA;      ,ca.[ED_ID] &#xA;&#x9;  FROM &#xA;&#x9;  [automation].[dbo].[contracts] c &#xA;&#x9;  JOIN [automation].[dbo].[contract_addition] ca&#xA;&#x9;  ON c.DocNum = ca.DocNum&#x9;  &#xA;&#x9;  WHERE c.G141 = rc.VAT AND c.G442 = rc.contract_num AND c.G443 = rc.contract_date) AS ca&#xA;   WHERE [guid] = @guid&#xA;&#xA;  UNION&#xA;  &#xA;  SELECT  &#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,'0'&#xA;&#x9;  ,'03031'&#xA;&#x9;  ,oa_ps.G442_PS&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;      ,NULL&#xA;&#x9;  ,'УНИКАЛЬНЫЙ НОМЕР КОНТРАКТА'&#xA;&#x9;  ,NULL&#xA;&#x9;  ,oa_ps.G442_PS&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  OUTER APPLY (SELECT TOP (1) [G442_PS]&#xA;  FROM [automation].[dbo].[contracts] c WHERE c.G141 = rc.VAT AND c.G442 = rc.contract_num AND c.G443 = rc.contract_date) AS oa_ps&#xA;  WHERE [guid] = @guid&#xA;&#xA;     UNION&#xA;&#xA;    SELECT&#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,oa_des.G4403 &#xA;&#x9;  ,oa_des.G441  &#xA;&#x9;  ,oa_des.G442  &#xA;&#x9;  ,oa_des.G442R&#xA;&#x9;  ,oa_des.G443&#xA;      ,NULL&#xA;&#x9;  ,oa_des.G444&#xA;&#x9;  ,oa_des.ED_ID&#xA;&#x9;  ,NULL&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  CROSS APPLY (SELECT TOP (1) [G4403],[G441],[G442],[G442R],[G443],[G444],[ED_ID]&#xA;  FROM [automation].[dbo].[description] d&#xA;  WHERE d.DocNum = rc.ref_regnum AND d.G32 = rc.ref_G32) AS oa_des&#xA;  WHERE [guid] = @guid&#xA;&#xA;   UNION&#xA;&#xA;    SELECT&#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,'0'&#xA;&#x9;  ,'04021'&#xA;&#x9;  ,rc.inv_num&#xA;&#x9;  ,NULL&#xA;&#x9;  ,rc.inv_date&#xA;      ,NULL&#xA;&#x9;  ,'СЧЕТ-ФАКТУРА (ИНВОЙС) К ДОГОВОРУ'&#xA;&#x9;  ,NULL&#xA;&#x9;  ,rc.inv_num + ' ОТ ' + CONVERT(nvarchar(50), rc.inv_date, 104)&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  WHERE [guid] = @guid&#xA;&#xA;     UNION&#xA;&#xA;    SELECT&#xA;&#x9;   CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN rc.[guid] ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN rc.[item_num] ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN '0' ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN '04031' ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN 'Б/Н' ELSE NULL END&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;      ,NULL&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN 'СЧЕТ-ФАКТУРА (ИНВОЙС) ЗА ПЕРЕВОЗКУ' ELSE NULL END&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  JOIN [automation].[dbo].[request_header] h ON rc.[guid] = h.[guid]&#xA;  WHERE rc.[guid] = @guid&#xA;&#xA;       UNION&#xA;&#xA;    SELECT&#xA;&#x9;   CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN rc.[guid] ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN rc.[item_num] ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN '0' ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN '04033' ELSE NULL END&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN 'Б/Н' ELSE NULL END&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;      ,NULL&#xA;&#x9;  ,CASE WHEN LEFT(COALESCE(h.G202, ''), 1) IN ('E','F') THEN 'ДОГОВОР ПО ПЕРЕВОЗКЕ ТОВАРОВ' ELSE NULL END&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  JOIN [automation].[dbo].[request_header] h ON rc.[guid] = h.[guid]&#xA;  WHERE rc.[guid] = @guid &#xA;   &#xA;   UNION&#xA;&#xA;    SELECT&#xA;&#x9;   [guid]  &#xA;&#x9;  ,[item_num]&#xA;&#x9;  ,'0'&#xA;&#x9;  ,'09013'&#xA;&#x9;  ,'Б/Н'&#xA;&#x9;  ,NULL&#xA;&#x9;  ,NULL&#xA;      ,NULL&#xA;&#x9;  ,'ТРАНЗИТНАЯ ДЕКЛАРАЦИЯ'&#x9;  &#xA;&#x9;  ,NULL&#xA;&#x9;  ,'Б/Н'&#xA;  FROM [automation].[dbo].[request_contents] rc&#xA;  WHERE [guid] = @guid" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@guid"
                SQLTask:DtsVariableName="User::docguid"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Compose header"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{31CC64C5-4B62-46E5-AAA3-AC4E30E75116}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Compose header"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
              SQLTask:SqlStatementSource="DECLARE @counter int = NEXT VALUE FOR [automation].[dbo].[DT_seq];&#xA;DECLARE @guid nvarchar(500) = ?;&#xA;&#xA;INSERT [automation].[dbo].[request_header]&#xA;(&#xA;[guid]&#xA;      ,[contract_num]&#xA;      ,[contract_date]&#xA;      ,[man_TERMINAL_NAME]&#xA;      ,[man_TrainTransportDesc]&#xA;      ,[man_DELIVERY_SVX_DATE_TIME]&#xA;      ,[man_TCD_DATE_TIME]&#xA;      ,[man_TransportDeliveryCloseDateTimeCaption]&#xA;      ,[Delivery]&#xA;      ,[Terminal_NAV]&#xA;      ,[Transport_Method_NAV]&#xA;      ,[VAT]&#xA;      ,[num_customs_A]&#xA;      ,[num_date_A]&#xA;      ,[num_counter_A]&#xA;      ,[forms_3]&#xA;      ,[tov_qty_5]&#xA;      ,[pack_qty_6]&#xA;      ,[ptd_sign_7]&#xA;      ,[country_code_16]&#xA;      ,[country_name_16]&#xA;      ,[count_transport_18]&#xA;      ,[currency_22]&#xA;&#x9;  ,[currency_code]&#xA;      ,[price_sum_22]&#xA;      ,[transport_code_25]&#xA;      ,[transport_code_26]&#xA;      ,[NUM_VER]&#xA;      ,[DATA_VER]&#xA;      ,[TYP_DCL]&#xA;      ,[GUGTK]&#xA;      ,[COPY]&#xA;      ,[DCOPY]&#xA;      ,[Q_EDIT]&#xA;      ,[D_EDIT]&#xA;      ,[SOL]&#xA;      ,[MAX_ERR]&#xA;      ,[DD]&#xA;      ,[TM]&#xA;      ,[EXTRNL]&#xA;      ,[SCHET]&#xA;      ,[STEPCTRL]&#xA;      ,[TYP_DTC]&#xA;      ,[VID_KTC]&#xA;      ,[STAT]&#xA;      ,[G071]&#xA;      ,[G072]&#xA;      ,[G073]&#xA;      ,[UI_B_1]&#xA;      ,[UI_B_2]&#xA;      ,[UI_B_3]&#xA;      ,[SDS_SRV]&#xA;      ,[SDS_NUM]&#xA;      ,[SDS_CUST]&#xA;      ,[F_DECL]&#xA;      ,[RCCNCODE]&#xA;      ,[DPRESENT]&#xA;      ,[TPRESENT]&#xA;      ,[COMPLECTBL]&#xA;      ,[G011]&#xA;      ,[G0121]&#xA;      ,[G0131]&#xA;      ,[K0131]&#xA;      ,[G020]&#xA;      ,[G02_ITN]&#xA;      ,[G021]&#xA;      ,[G022]&#xA;      ,[G023POST]&#xA;      ,[G0231]&#xA;      ,[G0231N]&#xA;      ,[G023SUBD]&#xA;      ,[G023CITY]&#xA;      ,[G023STREET]&#xA;      ,[G023BUILD]&#xA;      ,[G024B]&#xA;      ,[G024N]&#xA;      ,[G024IN]&#xA;      ,[G027]&#xA;      ,[G0281]&#xA;      ,[G0281A]&#xA;      ,[G02821]&#xA;      ,[G02822]&#xA;      ,[G02823]&#xA;      ,[G0283]&#xA;      ,[G022A]&#xA;      ,[G027A]&#xA;      ,[G023APOST]&#xA;      ,[G0231A]&#xA;      ,[G0231AN]&#xA;      ,[G023ASUBD]&#xA;      ,[G023ACITY]&#xA;      ,[G023ASTREE]&#xA;      ,[G023ABUILD]&#xA;      ,[G029]&#xA;      ,[G02SM14]&#xA;      ,[G032]&#xA;      ,[G040]&#xA;      ,[G04]&#xA;      ,[G05]&#xA;      ,[G06]&#xA;      ,[G07]&#xA;      ,[G080]&#xA;      ,[G08_ITN]&#xA;      ,[G081]&#xA;      ,[G082]&#xA;      ,[G083POST]&#xA;      ,[G0831]&#xA;      ,[G0831A]&#xA;      ,[G083SUBD]&#xA;      ,[G083CITY]&#xA;      ,[G083STREET]&#xA;      ,[G083BUILD]&#xA;      ,[G084B]&#xA;      ,[G087]&#xA;      ,[G0881]&#xA;      ,[G0881A]&#xA;      ,[G08821]&#xA;      ,[G08822]&#xA;      ,[G08823]&#xA;      ,[G0883]&#xA;      ,[G089]&#xA;      ,[G082A]&#xA;      ,[G087A]&#xA;      ,[G083APOST]&#xA;      ,[G0831AA]&#xA;      ,[G0831AN]&#xA;      ,[G083ASUBD]&#xA;      ,[G083ACITY]&#xA;      ,[G083ASTREE]&#xA;      ,[G083ABUILD]&#xA;      ,[G08SM14]&#xA;      ,[G090]&#xA;      ,[G09_ITN]&#xA;      ,[G091]&#xA;      ,[G092]&#xA;      ,[G092A]&#xA;      ,[G093POST]&#xA;      ,[G0931]&#xA;      ,[G0931N]&#xA;      ,[G093SUBD]&#xA;      ,[G093CITY]&#xA;      ,[G093STREET]&#xA;      ,[G093BUILD]&#xA;      ,[G093APOST]&#xA;      ,[G0931A]&#xA;      ,[G0931AN]&#xA;      ,[G093ASUBD]&#xA;      ,[G093ACITY]&#xA;      ,[G093ASTREE]&#xA;      ,[G093ABUILD]&#xA;      ,[G094B]&#xA;      ,[G097]&#xA;      ,[G097A]&#xA;      ,[G0981]&#xA;      ,[G0981A]&#xA;      ,[G09821]&#xA;      ,[G09822]&#xA;      ,[G09823]&#xA;      ,[G0983]&#xA;      ,[G09SM14]&#xA;      ,[G11]&#xA;      ,[G12]&#xA;      ,[G121]&#xA;      ,[G122]&#xA;      ,[G12ZPK]&#xA;      ,[G140]&#xA;      ,[G14_ITN]&#xA;      ,[G141]&#xA;      ,[G142]&#xA;      ,[G142A]&#xA;      ,[G143POST]&#xA;      ,[G1431]&#xA;      ,[G1431N]&#xA;      ,[G143SUBD]&#xA;      ,[G143CITY]&#xA;      ,[G143STREET]&#xA;      ,[G143BUILD]&#xA;      ,[AEOROWNER]&#xA;      ,[AEOCNTRY]&#xA;      ,[AEONUM]&#xA;      ,[AEOKIND]&#xA;      ,[AEOREGCOD]&#xA;      ,[G143APOST]&#xA;      ,[G1431A]&#xA;      ,[G1431AN]&#xA;      ,[G143ASUBD]&#xA;      ,[G143ACITY]&#xA;      ,[G143ASTREE]&#xA;      ,[G143ABUILD]&#xA;      ,[G144B]&#xA;      ,[G147]&#xA;      ,[G147A]&#xA;      ,[G1481]&#xA;      ,[G1481A]&#xA;      ,[G14821]&#xA;      ,[G14822]&#xA;      ,[G14823]&#xA;      ,[G1483]&#xA;      ,[G15]&#xA;      ,[G15A]&#xA;      ,[G16]&#xA;      ,[G16A]&#xA;      ,[G17A]&#xA;      ,[G17B]&#xA;      ,[G180]&#xA;      ,[G182]&#xA;      ,[G19]&#xA;      ,[G202]&#xA;      ,[G2021]&#xA;      ,[G203]&#xA;      ,[G210]&#xA;      ,[G212]&#xA;      ,[G221]&#xA;      ,[G222]&#xA;      ,[G22ZPK]&#xA;      ,[G23]&#xA;      ,[G230]&#xA;      ,[G270]&#xA;      ,[G27_ITN]&#xA;      ,[G2710]&#xA;      ,[G271]&#xA;      ,[G27]&#xA;      ,[G2711]&#xA;      ,[G2712]&#xA;      ,[G28_ITN]&#xA;      ,[G28OKPO]&#xA;      ,[G28INN]&#xA;      ,[G281OTH]&#xA;      ,[G28ZAJMN]&#xA;      ,[G282]&#xA;      ,[G28211]&#xA;      ,[G28212]&#xA;      ,[G28221]&#xA;      ,[G28222]&#xA;      ,[G28230]&#xA;      ,[G2823]&#xA;      ,[G28240]&#xA;      ,[G2824]&#xA;      ,[G2825]&#xA;      ,[G30_ITN]&#xA;      ,[G300]&#xA;      ,[G3010]&#xA;      ,[G30AEOOWN]&#xA;      ,[G30AEOCNTR]&#xA;      ,[G301]&#xA;      ,[G30AEOKIND]&#xA;      ,[G30AEORCOD]&#xA;      ,[G3011]&#xA;      ,[G30]&#xA;      ,[G30D]&#xA;      ,[G30DD]&#xA;      ,[G30POST]&#xA;      ,[G30A]&#xA;      ,[G30AN]&#xA;      ,[G30SUBD]&#xA;      ,[G30CITY]&#xA;      ,[G30STREET]&#xA;      ,[G30BUILD]&#xA;      ,[G30LNAME]&#xA;      ,[G3012]&#xA;      ,[G30121]&#xA;      ,[G30122]&#xA;      ,[G45A1]&#xA;      ,[G45A2]&#xA;      ,[G45A3]&#xA;      ,[G45A4]&#xA;      ,[G45A5]&#xA;      ,[G45A6]&#xA;      ,[G45A7]&#xA;      ,[G45A8]&#xA;      ,[G53_ZTK]&#xA;      ,[G53_DT]&#xA;      ,[G53_DN]&#xA;      ,[G53_DD]&#xA;      ,[G53_POS]&#xA;      ,[G53_CC]&#xA;      ,[G53_CN]&#xA;      ,[G53_SUB]&#xA;      ,[G53_CIT]&#xA;      ,[G53_STR]&#xA;      ,[D54_ITN]&#xA;      ,[D5410]&#xA;      ,[D541]&#xA;      ,[D541D]&#xA;      ,[D5411]&#xA;      ,[D5411D]&#xA;      ,[D541_INN]&#xA;      ,[D541_KPP]&#xA;      ,[D542]&#xA;      ,[G542T]&#xA;      ,[D5441]&#xA;      ,[D5441NM]&#xA;      ,[D5441MDNM]&#xA;      ,[D5442]&#xA;      ,[D5443]&#xA;      ,[D5444]&#xA;      ,[D5445]&#xA;      ,[D5446]&#xA;      ,[D5447]&#xA;      ,[D5451]&#xA;      ,[D5451A]&#xA;      ,[D54521]&#xA;      ,[D54522]&#xA;      ,[D54523]&#xA;      ,[D5453]&#xA;      ,[G54_ITN]&#xA;      ,[G5410]&#xA;      ,[G541]&#xA;      ,[G541D]&#xA;      ,[G5411]&#xA;      ,[G5411D]&#xA;      ,[G541_INN]&#xA;      ,[G541_KPP]&#xA;      ,[G542]&#xA;      ,[G542TIME]&#xA;      ,[G5441]&#xA;      ,[G5441NM]&#xA;      ,[G5441MDNM]&#xA;      ,[G5442]&#xA;      ,[G5443]&#xA;      ,[G5444]&#xA;      ,[G5445]&#xA;      ,[G5446]&#xA;      ,[G5447]&#xA;      ,[G5451]&#xA;      ,[G5451A]&#xA;      ,[G54521]&#xA;      ,[G54522]&#xA;      ,[G54523]&#xA;      ,[G5453]&#xA;      ,[GD0]&#xA;      ,[GD1]&#xA;      ,[GD11]&#xA;      ,[GD2]&#xA;      ,[GD2FIO]&#xA;      ,[GD00]&#xA;      ,[GDDF]&#xA;      ,[RECPLATV]&#xA;      ,[RECSLOTM]&#xA;      ,[RECTRANS]&#xA;      ,[RECSUMPP]&#xA;      ,[RECPASP]&#xA;      ,[DMODIFY]&#xA;      ,[TMODIFY]&#xA;      ,[EDOC_GUID]&#xA;      ,[EDOC_ID]&#xA;      ,[P_STATUS1]&#xA;      ,[P_STATUS2]&#xA;      ,[DOCID]&#xA;      ,[NUM_PP]&#xA;      ,[G541DN]&#xA;      ,[G54PLACE]&#xA;      ,[G50RW]&#xA;      ,[DRV41]&#xA;      ,[DRV41NM]&#xA;      ,[DRV41MDNM]&#xA;      ,[DRV47]&#xA;      ,[DRV4CC]&#xA;      ,[DRV51]&#xA;      ,[DRV51A]&#xA;      ,[DRV521]&#xA;      ,[DRV522]&#xA;      ,[DRV523]&#xA;      ,[DRV53]&#xA;      ,[DRV241]&#xA;      ,[DRV241NM]&#xA;      ,[DRV241MDNM]&#xA;      ,[DRV247]&#xA;      ,[DRV24CC]&#xA;      ,[DRV251]&#xA;      ,[DRV251A]&#xA;      ,[DRV2521]&#xA;      ,[DRV2522]&#xA;      ,[DRV2523]&#xA;      ,[DRV253]&#xA;      ,[ACT_TP]&#xA;      ,[DocNum]&#xA;      ,[G02PHONE]&#xA;      ,[G02EMAIL]&#xA;      ,[G08PHONE]&#xA;      ,[G08EMAIL]&#xA;      ,[G09PHONE]&#xA;      ,[G09EMAIL]&#xA;      ,[G14PHONE]&#xA;      ,[G14EMAIL]&#xA;      ,[G54532]&#xA;      ,[G54EMAIL]&#xA;      ,[term_NAV_CODE]&#xA;      ,[term_NLIC]&#xA;      ,[term_DBEGIN]&#xA;      ,[term_G30A]&#xA;      ,[term_G30AN]&#xA;      ,[term_G30SUBD]&#xA;      ,[term_G30CITY]&#xA;      ,[term_G30STREET]&#xA;      ,[term_G30BUILD]&#xA;      ,[term_G30LNAME]&#xA;      ,[term_G3012]&#xA;      ,[term_VAT]&#xA;&#x9;  ,[overall_gross]&#xA;&#x9;  ,[overall_net]&#xA;&#x9;  ,[container_sign]&#xA;&#x9;  ,[customscode_border]&#xA;&#x9;  ,[customsname_border]&#xA;&#xA;&#x9;  ,[currency_rate_date]&#xA;&#x9;  ,[currency_rate_usd]&#xA;&#x9;  ,[currency_rate_eur]&#xA;&#x9;  ,[currency_rate_this]&#xA;)&#xA;SELECT TOP (1)&#xA;&#x9;   [guid]&#xA;      ,[contract_num]&#xA;      ,[contract_date]     &#xA;      ,[man_TERMINAL_NAME]&#xA;      ,[man_TrainTransportDesc]&#xA;      ,[man_DELIVERY_SVX_DATE_TIME]&#xA;      ,[man_TCD_DATE_TIME]&#xA;      ,[man_TransportDeliveryCloseDateTimeCaption]&#xA;      ,[Delivery]&#xA;      ,[Terminal_NAV]&#xA;      ,[Transport_Method_NAV]&#xA;      ,rc.[VAT]&#x9;  &#xA;&#x9;  ,CASE &#xA;&#x9;  WHEN EXISTS(SELECT 0 FROM [automation].[dbo].[DBRHEAD] h WHERE h.G071 = '10620010' AND h.G141 = rc.VAT AND LEFT(h.G3012, 3) &lt;&gt; '106')&#xA;&#x9;  THEN '10620010'&#xA;&#x9;  ELSE '10129060'&#xA;&#x9;  END num_customs_A&#xA;&#x9;  ,num_date_A = (SELECT FORMAT(GETDATE(), 'ddMMyy'))&#xA;&#x9;  ,num_counter_A = (SELECT FORMAT(@counter, '0000000'))&#xA;&#x9;  ,forms_3 = 1 + CEILING((SELECT MAX(rc1.item_num) FROM [automation].[dbo].[request_contents] rc1 WHERE rc1.[guid] = @guid) / 3.0)&#xA;&#x9;  ,tov_qty_5 = (SELECT MAX(rc1.item_num) FROM [automation].[dbo].[request_contents] rc1 WHERE rc1.[guid] = @guid)&#xA;&#x9;  ,pack_qty_6 = (SELECT CAST(SUM(rc1.packages_qty) AS int) FROM [automation].[dbo].[request_contents] rc1 WHERE rc1.[guid] = @guid)&#xA;&#x9;  ,IIF([man_DELIVERY_SVX_DATE_TIME] IS NULL, 'ПТД', '') ptd_sign_7  &#x9;  &#xA;&#x9;  ,CASE&#xA;&#x9;  WHEN (SELECT COUNT(DISTINCT country) FROM [automation].[dbo].[request_contents] rc1 WHERE rc1.[guid] = @guid) &gt; 1 THEN '00'&#x9;  &#xA;&#x9;  ELSE rc.country_code_let&#xA;&#x9;  END country_code_16  &#xA;&#x9;  ,CASE&#xA;&#x9;  WHEN (SELECT COUNT(DISTINCT country) FROM [automation].[dbo].[request_contents] rc1 WHERE rc1.[guid] = @guid) &gt; 1 THEN 'РАЗНЫЕ'&#x9;  &#xA;&#x9;  ELSE rc.country&#xA;&#x9;  END country_name_16&#xA;&#x9;  ,count_transport_18 = 1 + (LEN([man_TrainTransportDesc]) - LEN(REPLACE([man_TrainTransportDesc], '/', '')))&#xA;&#x9;  ,rc.currency currency_22&#xA;&#x9;  ,rc.currency_code&#xA;&#x9;  ,price_sum_22 = (SELECT CAST(SUM(rc1.price) AS decimal(18, 2)) FROM [automation].[dbo].[request_contents] rc1 WHERE rc1.[guid] = @guid)&#xA;&#x9;  &#xA;&#x9;    ,CASE&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV = 'Морской транспорт' THEN '10'&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV = 'Железнодорожный транспорт' THEN '20'&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV LIKE '%Автотранспорт%' OR rc.Transport_Method_NAV LIKE '%Сборный груз%' THEN '31'&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV = 'Авиатранспорт' THEN '40'&#xA;&#x9;&#x9;ELSE ''&#xA;&#x9;&#x9;END transport_code_25&#xA;&#x9;&#x9; &#xA;&#x9;&#x9;,CASE&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV = 'Морской транспорт' THEN ''&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV = 'Железнодорожный транспорт' THEN '20'&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV LIKE '%Автотранспорт%' OR rc.Transport_Method_NAV LIKE '%Сборный груз%' THEN '31'&#xA;&#x9;&#x9;WHEN rc.Transport_Method_NAV = 'Авиатранспорт' THEN ''&#xA;&#x9;&#x9;ELSE ''&#xA;&#x9;&#x9;END transport_code_26&#xA;&#x9;&#xA;&#x9;  ,oa1.[NUM_VER]&#xA;      ,oa1.[DATA_VER]&#xA;      ,oa1.[TYP_DCL]&#xA;      ,oa1.[GUGTK]&#xA;      ,oa1.[COPY]&#xA;      ,oa1.[DCOPY]&#xA;      ,oa1.[Q_EDIT]&#xA;      ,oa1.[D_EDIT]&#xA;      ,oa1.[SOL]&#xA;      ,oa1.[MAX_ERR]&#xA;      ,oa1.[DD]&#xA;      ,oa1.[TM]&#xA;      ,oa1.[EXTRNL]&#xA;      ,oa1.[SCHET]&#xA;      ,oa1.[STEPCTRL]&#xA;      ,oa1.[TYP_DTC]&#xA;      ,oa1.[VID_KTC]&#xA;      ,oa1.[STAT]&#xA;      ,oa1.[G071]&#xA;      ,oa1.[G072]&#xA;      ,oa1.[G073]&#xA;      ,oa1.[UI_B_1]&#xA;      ,oa1.[UI_B_2]&#xA;      ,oa1.[UI_B_3]&#xA;      ,oa1.[SDS_SRV]&#xA;      ,oa1.[SDS_NUM]&#xA;      ,oa1.[SDS_CUST]&#xA;      ,oa1.[F_DECL]&#xA;      ,oa1.[RCCNCODE]&#xA;      ,oa1.[DPRESENT]&#xA;      ,oa1.[TPRESENT]&#xA;      ,oa1.[COMPLECTBL]&#xA;      ,oa1.[G011]&#xA;      ,oa1.[G0121]&#xA;      ,oa1.[G0131]&#xA;      ,oa1.[K0131]&#xA;      ,oa1.[G020]&#xA;      ,oa1.[G02_ITN]&#xA;      ,oa1.[G021]&#xA;      ,oa1.[G022]&#xA;      ,oa1.[G023POST]&#xA;      ,oa1.[G0231]&#xA;      ,oa1.[G0231N]&#xA;      ,oa1.[G023SUBD]&#xA;      ,oa1.[G023CITY]&#xA;      ,oa1.[G023STREET]&#xA;      ,oa1.[G023BUILD]&#xA;      ,oa1.[G024B]&#xA;      ,oa1.[G024N]&#xA;      ,oa1.[G024IN]&#xA;      ,oa1.[G027]&#xA;      ,oa1.[G0281]&#xA;      ,oa1.[G0281A]&#xA;      ,oa1.[G02821]&#xA;      ,oa1.[G02822]&#xA;      ,oa1.[G02823]&#xA;      ,oa1.[G0283]&#xA;      ,oa1.[G022A]&#xA;      ,oa1.[G027A]&#xA;      ,oa1.[G023APOST]&#xA;      ,oa1.[G0231A]&#xA;      ,oa1.[G0231AN]&#xA;      ,oa1.[G023ASUBD]&#xA;      ,oa1.[G023ACITY]&#xA;      ,oa1.[G023ASTREE]&#xA;      ,oa1.[G023ABUILD]&#xA;      ,oa1.[G029]&#xA;      ,oa1.[G02SM14]&#xA;      ,oa1.[G032]&#xA;      ,oa1.[G040]&#xA;      ,oa1.[G04]&#xA;      ,oa1.[G05]&#xA;      ,oa1.[G06]&#xA;      ,oa1.[G07]&#xA;      ,oa1.[G080]&#xA;      ,oa1.[G08_ITN]&#xA;      ,oa1.[G081]&#xA;      ,oa1.[G082]&#xA;      ,oa1.[G083POST]&#xA;      ,oa1.[G0831]&#xA;      ,oa1.[G0831A]&#xA;      ,oa1.[G083SUBD]&#xA;      ,oa1.[G083CITY]&#xA;      ,oa1.[G083STREET]&#xA;      ,oa1.[G083BUILD]&#xA;      ,oa1.[G084B]&#xA;      ,oa1.[G087]&#xA;      ,oa1.[G0881]&#xA;      ,oa1.[G0881A]&#xA;      ,oa1.[G08821]&#xA;      ,oa1.[G08822]&#xA;      ,oa1.[G08823]&#xA;      ,oa1.[G0883]&#xA;      ,oa1.[G089]&#xA;      ,oa1.[G082A]&#xA;      ,oa1.[G087A]&#xA;      ,oa1.[G083APOST]&#xA;      ,oa1.[G0831AA]&#xA;      ,oa1.[G0831AN]&#xA;      ,oa1.[G083ASUBD]&#xA;      ,oa1.[G083ACITY]&#xA;      ,oa1.[G083ASTREE]&#xA;      ,oa1.[G083ABUILD]&#xA;      ,oa1.[G08SM14]&#xA;      ,oa1.[G090]&#xA;      ,oa1.[G09_ITN]&#xA;      ,oa1.[G091]&#xA;      ,oa1.[G092]&#xA;      ,oa1.[G092A]&#xA;      ,oa1.[G093POST]&#xA;      ,oa1.[G0931]&#xA;      ,oa1.[G0931N]&#xA;      ,oa1.[G093SUBD]&#xA;      ,oa1.[G093CITY]&#xA;      ,oa1.[G093STREET]&#xA;      ,oa1.[G093BUILD]&#xA;      ,oa1.[G093APOST]&#xA;      ,oa1.[G0931A]&#xA;      ,oa1.[G0931AN]&#xA;      ,oa1.[G093ASUBD]&#xA;      ,oa1.[G093ACITY]&#xA;      ,oa1.[G093ASTREE]&#xA;      ,oa1.[G093ABUILD]&#xA;      ,oa1.[G094B]&#xA;      ,oa1.[G097]&#xA;      ,oa1.[G097A]&#xA;      ,oa1.[G0981]&#xA;      ,oa1.[G0981A]&#xA;      ,oa1.[G09821]&#xA;      ,oa1.[G09822]&#xA;      ,oa1.[G09823]&#xA;      ,oa1.[G0983]&#xA;      ,oa1.[G09SM14]&#xA;      ,oa1.[G11]&#xA;      ,oa1.[G12]&#xA;      ,oa1.[G121]&#xA;      ,oa1.[G122]&#xA;      ,oa1.[G12ZPK]&#xA;      ,oa1.[G140]&#xA;      ,oa1.[G14_ITN]&#xA;      ,oa1.[G141]&#xA;      ,oa1.[G142]&#xA;      ,oa1.[G142A]&#xA;      ,oa1.[G143POST]&#xA;      ,oa1.[G1431]&#xA;      ,oa1.[G1431N]&#xA;      ,oa1.[G143SUBD]&#xA;      ,oa1.[G143CITY]&#xA;      ,oa1.[G143STREET]&#xA;      ,oa1.[G143BUILD]&#xA;      ,oa1.[AEOROWNER]&#xA;      ,oa1.[AEOCNTRY]&#xA;      ,oa1.[AEONUM]&#xA;      ,oa1.[AEOKIND]&#xA;      ,oa1.[AEOREGCOD]&#xA;      ,oa1.[G143APOST]&#xA;      ,oa1.[G1431A]&#xA;      ,oa1.[G1431AN]&#xA;      ,oa1.[G143ASUBD]&#xA;      ,oa1.[G143ACITY]&#xA;      ,oa1.[G143ASTREE]&#xA;      ,oa1.[G143ABUILD]&#xA;      ,oa1.[G144B]&#xA;      ,oa1.[G147]&#xA;      ,oa1.[G147A]&#xA;      ,oa1.[G1481]&#xA;      ,oa1.[G1481A]&#xA;      ,oa1.[G14821]&#xA;      ,oa1.[G14822]&#xA;      ,oa1.[G14823]&#xA;      ,oa1.[G1483]&#xA;      ,oa1.[G15]&#xA;      ,oa1.[G15A]&#xA;      ,oa1.[G16]&#xA;      ,oa1.[G16A]&#xA;      ,oa1.[G17A]&#xA;      ,oa1.[G17B]&#xA;      ,oa1.[G180]&#xA;      ,oa1.[G182]&#xA;      ,oa1.[G19]&#xA;      ,oa1.[G202]&#xA;      ,oa1.[G2021]&#xA;      ,oa1.[G203]&#xA;      ,oa1.[G210]&#xA;      ,oa1.[G212]&#xA;      ,oa1.[G221]&#xA;      ,oa1.[G222]&#xA;      ,oa1.[G22ZPK]&#xA;      ,oa1.[G23]&#xA;      ,oa1.[G230]&#xA;      ,oa1.[G270]&#xA;      ,oa1.[G27_ITN]&#xA;      ,oa1.[G2710]&#xA;      ,oa1.[G271]&#xA;      ,oa1.[G27]&#xA;      ,oa1.[G2711]&#xA;      ,oa1.[G2712]&#xA;      ,oa1.[G28_ITN]&#xA;      ,oa1.[G28OKPO]&#xA;      ,oa1.[G28INN]&#xA;      ,oa1.[G281OTH]&#xA;      ,oa1.[G28ZAJMN]&#xA;      ,oa1.[G282]&#xA;      ,oa1.[G28211]&#xA;      ,oa1.[G28212]&#xA;      ,oa1.[G28221]&#xA;      ,oa1.[G28222]&#xA;      ,oa1.[G28230]&#xA;      ,oa1.[G2823]&#xA;      ,oa1.[G28240]&#xA;      ,oa1.[G2824]&#xA;      ,oa1.[G2825]&#xA;      ,oa1.[G30_ITN]&#xA;      ,oa1.[G300]&#xA;      ,oa1.[G3010]&#xA;      ,oa1.[G30AEOOWN]&#xA;      ,oa1.[G30AEOCNTR]&#xA;      ,oa1.[G301]&#xA;      ,oa1.[G30AEOKIND]&#xA;      ,oa1.[G30AEORCOD]&#xA;      ,oa1.[G3011]&#xA;      ,oa1.[G30]&#xA;      ,oa1.[G30D]&#xA;      ,oa1.[G30DD]&#xA;      ,oa1.[G30POST]&#xA;      ,oa1.[G30A]&#xA;      ,oa1.[G30AN]&#xA;      ,oa1.[G30SUBD]&#xA;      ,oa1.[G30CITY]&#xA;      ,oa1.[G30STREET]&#xA;      ,oa1.[G30BUILD]&#xA;      ,oa1.[G30LNAME]&#xA;      ,oa1.[G3012]&#xA;      ,oa1.[G30121]&#xA;      ,oa1.[G30122]&#xA;      ,oa1.[G45A1]&#xA;      ,oa1.[G45A2]&#xA;      ,oa1.[G45A3]&#xA;      ,oa1.[G45A4]&#xA;      ,oa1.[G45A5]&#xA;      ,oa1.[G45A6]&#xA;      ,oa1.[G45A7]&#xA;      ,oa1.[G45A8]&#xA;      ,oa1.[G53_ZTK]&#xA;      ,oa1.[G53_DT]&#xA;      ,oa1.[G53_DN]&#xA;      ,oa1.[G53_DD]&#xA;      ,oa1.[G53_POS]&#xA;      ,oa1.[G53_CC]&#xA;      ,oa1.[G53_CN]&#xA;      ,oa1.[G53_SUB]&#xA;      ,oa1.[G53_CIT]&#xA;      ,oa1.[G53_STR]&#xA;      ,oa1.[D54_ITN]&#xA;      ,oa1.[D5410]&#xA;      ,oa1.[D541]&#xA;      ,oa1.[D541D]&#xA;      ,oa1.[D5411]&#xA;      ,oa1.[D5411D]&#xA;      ,oa1.[D541_INN]&#xA;      ,oa1.[D541_KPP]&#xA;      ,oa1.[D542]&#xA;      ,oa1.[G542T]&#xA;      ,oa1.[D5441]&#xA;      ,oa1.[D5441NM]&#xA;      ,oa1.[D5441MDNM]&#xA;      ,oa1.[D5442]&#xA;      ,oa1.[D5443]&#xA;      ,oa1.[D5444]&#xA;      ,oa1.[D5445]&#xA;      ,oa1.[D5446]&#xA;      ,oa1.[D5447]&#xA;      ,oa1.[D5451]&#xA;      ,oa1.[D5451A]&#xA;      ,oa1.[D54521]&#xA;      ,oa1.[D54522]&#xA;      ,oa1.[D54523]&#xA;      ,oa1.[D5453]&#xA;      ,oa1.[G54_ITN]&#xA;      ,oa1.[G5410]&#xA;      ,oa1.[G541]&#xA;      ,oa1.[G541D]&#xA;      ,oa1.[G5411]&#xA;      ,oa1.[G5411D]&#xA;      ,oa1.[G541_INN]&#xA;      ,oa1.[G541_KPP]&#xA;      ,oa1.[G542]&#xA;      ,oa1.[G542TIME]&#xA;      ,oa1.[G5441]&#xA;      ,oa1.[G5441NM]&#xA;      ,oa1.[G5441MDNM]&#xA;      ,oa1.[G5442]&#xA;      ,oa1.[G5443]&#xA;      ,oa1.[G5444]&#xA;      ,oa1.[G5445]&#xA;      ,oa1.[G5446]&#xA;      ,oa1.[G5447]&#xA;      ,oa1.[G5451]&#xA;      ,oa1.[G5451A]&#xA;      ,oa1.[G54521]&#xA;      ,oa1.[G54522]&#xA;      ,oa1.[G54523]&#xA;      ,oa1.[G5453]&#xA;      ,oa1.[GD0]&#xA;      ,oa1.[GD1]&#xA;      ,oa1.[GD11]&#xA;      ,oa1.[GD2]&#xA;      ,oa1.[GD2FIO]&#xA;      ,oa1.[GD00]&#xA;      ,oa1.[GDDF]&#xA;      ,oa1.[RECPLATV]&#xA;      ,oa1.[RECSLOTM]&#xA;      ,oa1.[RECTRANS]&#xA;      ,oa1.[RECSUMPP]&#xA;      ,oa1.[RECPASP]&#xA;      ,oa1.[DMODIFY]&#xA;      ,oa1.[TMODIFY]&#xA;      ,oa1.[EDOC_GUID]&#xA;      ,oa1.[EDOC_ID]&#xA;      ,oa1.[P_STATUS1]&#xA;      ,oa1.[P_STATUS2]&#xA;      ,oa1.[DOCID]&#xA;      ,oa1.[NUM_PP]&#xA;      ,oa1.[G541DN]&#xA;      ,oa1.[G54PLACE]&#xA;      ,oa1.[G50RW]&#xA;      ,oa1.[DRV41]&#xA;      ,oa1.[DRV41NM]&#xA;      ,oa1.[DRV41MDNM]&#xA;      ,oa1.[DRV47]&#xA;      ,oa1.[DRV4CC]&#xA;      ,oa1.[DRV51]&#xA;      ,oa1.[DRV51A]&#xA;      ,oa1.[DRV521]&#xA;      ,oa1.[DRV522]&#xA;      ,oa1.[DRV523]&#xA;      ,oa1.[DRV53]&#xA;      ,oa1.[DRV241]&#xA;      ,oa1.[DRV241NM]&#xA;      ,oa1.[DRV241MDNM]&#xA;      ,oa1.[DRV247]&#xA;      ,oa1.[DRV24CC]&#xA;      ,oa1.[DRV251]&#xA;      ,oa1.[DRV251A]&#xA;      ,oa1.[DRV2521]&#xA;      ,oa1.[DRV2522]&#xA;      ,oa1.[DRV2523]&#xA;      ,oa1.[DRV253]&#xA;      ,oa1.[ACT_TP]&#xA;      ,oa1.[DocNum]&#xA;      ,oa1.[G02PHONE]&#xA;      ,oa1.[G02EMAIL]&#xA;      ,oa1.[G08PHONE]&#xA;      ,oa1.[G08EMAIL]&#xA;      ,oa1.[G09PHONE]&#xA;      ,oa1.[G09EMAIL]&#xA;      ,oa1.[G14PHONE]&#xA;      ,oa1.[G14EMAIL]&#xA;      ,oa1.[G54532]&#xA;      ,oa1.[G54EMAIL]&#xA;&#x9;&#x9;&#xA;&#x9;   ,oa2.term_NAV_CODE&#xA;      ,oa2.term_NLIC&#xA;      ,oa2.term_DBEGIN&#xA;      ,oa2.term_G30A&#xA;      ,oa2.term_G30AN&#xA;      ,oa2.term_G30SUBD&#xA;      ,oa2.term_G30CITY&#xA;      ,oa2.term_G30STREET&#xA;      ,oa2.term_G30BUILD&#xA;      ,oa2.term_G30LNAME&#xA;      ,oa2.term_G3012&#xA;      ,oa2.term_VAT&#xA;&#x9;  ,SUM(rc.gross) OVER (PARTITION BY [guid]) overall_gross&#xA;&#x9;  ,SUM(rc.net) OVER (PARTITION BY [guid]) overall_net&#xA;&#x9;  ,CASE &#xA;&#x9;  WHEN EXISTS (SELECT 0 FROM [automation].[dbo].[request_contents] rc WHERE COALESCE(rc.request_container, '') &lt;&gt; '' and rc.[guid] = @guid)&#xA;&#x9;  THEN 1&#xA;&#x9;  ELSE 0&#xA;&#x9;  END container_sign&#xA;&#x9;  ,oa3.G29&#xA;&#x9;  ,oa3.customs_name&#xA;&#x9;  &#xA;&#x9;  ,currency_rate_date = (SELECT FORMAT(GETDATE(), 'dd.MM.yy'))&#xA;&#x9;  ,currency_rate_usd = COALESCE(rc.usd_rate, 0)&#xA;&#x9;  ,currency_rate_eur = COALESCE(rc.eur_rate, 0)&#xA;&#x9;  ,currency_rate_this = COALESCE(rc.currency_rate, 0)&#xA;&#xA;FROM [automation].[dbo].[request_contents] rc&#xA;&#xA;OUTER APPLY (SELECT TOP (1) h.*&#xA;FROM [Docs2SQL].[dbo].[DBRHEAD] h&#xA;JOIN [Docs2SQL].[dbo].[DBRTECHD] td ON h.DocNum = td.DocNum AND td.G441 = '03011' AND td.G32 = '1' &#xA;WHERE &#xA;h.[G141] = rc.VAT&#xA;AND td.G442 = rc.contract_num &#xA;AND td.G443 = rc.contract_date&#xA;ORDER BY h.GD1 DESC, h.GD11 DESC&#xA;) AS oa1&#xA;OUTER APPLY (SELECT TOP (1) &#xA;&#x9;&#x9;[NAV_CODE] term_NAV_CODE&#xA;      ,[NLIC] term_NLIC&#xA;      ,[DBEGIN] term_DBEGIN&#xA;      ,[G30A] term_G30A&#xA;      ,[G30AN] term_G30AN&#xA;      ,[G30SUBD] term_G30SUBD&#xA;      ,[G30CITY] term_G30CITY&#xA;      ,[G30STREET] term_G30STREET&#xA;      ,[G30BUILD] term_G30BUILD&#xA;      ,[G30LNAME] term_G30LNAME&#xA;      ,[G3012] term_G3012&#xA;      ,[VAT] term_VAT&#xA;FROM [automation].[dbo].[TERMINALS] w&#xA;WHERE w.NAV_CODE = rc.Terminal_NAV&#xA;) AS oa2&#xA;&#xA;OUTER APPLY (SELECT TOP (1) G29, customs_name FROM automation.dbo.border b &#xA;WHERE b.G141 = rc.VAT AND b.G3012 = oa2.term_G3012) AS oa3&#xA;&#xA;WHERE [rc].[guid] = @guid" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@guid"
                SQLTask:DtsVariableName="User::docguid"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Copy contents to temp table"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{BFF67601-050B-4B2C-87C0-560BB9F89D09}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Copy contents to temp table"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{DBFE5CA2-E50E-476C-9946-06AB398EF84E}"
              SQLTask:SqlStatementSource="TRUNCATE TABLE [automation].[dbo].[request_contents_temp];&#xA;DECLARE @guid nvarchar(500) = ?;&#xA;INSERT INTO [automation].[dbo].[request_contents_temp]&#xA;           ([guid]&#xA;           ,[row_id]&#xA;           ,[article]&#xA;           ,[model]&#xA;           ,[manufacturer]&#xA;           ,[trade_mark]&#xA;           ,[country]&#xA;           ,[qty]&#xA;           ,[unit_measurement]&#xA;           ,[price]&#xA;           ,[currency]&#xA;           ,[net]&#xA;           ,[gross]&#xA;           ,[packages_qty]&#xA;           ,[inv_num]&#xA;           ,[inv_date]&#xA;           ,[contract_num]&#xA;           ,[contract_date]&#xA;           ,[cargoid]&#xA;           ,[man_hscode]&#xA;           ,[man_addcode]&#xA;           ,[man_des_common]&#xA;           ,[man_des_tovg]&#xA;           ,[man_sert_num]&#xA;           ,[man_sert_from]&#xA;           ,[man_sert_to]&#xA;           ,[man_sgr_num]&#xA;           ,[man_sgr_from]&#xA;           ,[man_sgr_to]&#xA;           ,[man_TERMINAL_NAME]&#xA;           ,[man_TrainTransportDesc]&#xA;           ,[man_DELIVERY_SVX_DATE_TIME]&#xA;           ,[man_TCD_DATE_TIME]&#xA;           ,[man_TransportDeliveryCloseDateTimeCaption]&#xA;           ,[Delivery]&#xA;           ,[Terminal_NAV]&#xA;           ,[Transport_Method_NAV]&#xA;           ,[VAT]&#xA;           ,[currency_code]&#xA;           ,[auto_hs_code]&#xA;           ,[auto_hs_code_add]&#xA;           ,[auto_common_des]&#xA;           ,[auto_tovg_des]&#xA;           ,[auto_sert_num]&#xA;           ,[auto_sert_from]&#xA;           ,[auto_sert_to]&#xA;           ,[auto_sgr_num]&#xA;           ,[auto_sgr_from]&#xA;           ,[auto_sgr_to]&#xA;           ,[decl_hs_code]&#xA;           ,[decl_hs_code_add]&#xA;           ,[decl_common_des]&#xA;           ,[decl_tovg_des]&#xA;           ,[decl_sert_num]&#xA;           ,[decl_sert_from]&#xA;           ,[decl_sert_to]&#xA;           ,[decl_sgr_num]&#xA;           ,[decl_sgr_from]&#xA;           ,[decl_sgr_to]&#xA;           ,[country_code_let]&#xA;           ,[country_code_num]&#xA;           ,[unit_code_num]&#xA;           ,[packing_code]&#xA;           ,[transport_doc]&#xA;           ,[group_num]&#xA;           ,[item_num]&#xA;           ,[item_gross]&#xA;           ,[item_net]&#xA;           ,[item_packages]&#xA;           ,[item_price]&#xA;           ,[concat_44]&#xA;&#x9;&#x9;   ,[request_container])&#xA;SELECT [guid]&#xA;      ,[row_id]&#xA;      ,[article]&#xA;      ,[model]&#xA;      ,[manufacturer]&#xA;      ,[trade_mark]&#xA;      ,[country]&#xA;      ,[qty]&#xA;      ,[unit_measurement]&#xA;      ,[price]&#xA;      ,[currency]&#xA;      ,[net]&#xA;      ,[gross]&#xA;      ,[packages_qty]&#xA;      ,[inv_num]&#xA;      ,[inv_date]&#xA;      ,[contract_num]&#xA;      ,[contract_date]&#xA;      ,[cargoid]&#xA;      ,[man_hscode]&#xA;      ,[man_addcode]&#xA;      ,[man_des_common]&#xA;      ,[man_des_tovg]&#xA;      ,[man_sert_num]&#xA;      ,[man_sert_from]&#xA;      ,[man_sert_to]&#xA;      ,[man_sgr_num]&#xA;      ,[man_sgr_from]&#xA;      ,[man_sgr_to]&#xA;      ,[man_TERMINAL_NAME]&#xA;      ,[man_TrainTransportDesc]&#xA;      ,[man_DELIVERY_SVX_DATE_TIME]&#xA;      ,[man_TCD_DATE_TIME]&#xA;      ,[man_TransportDeliveryCloseDateTimeCaption]&#xA;      ,[Delivery]&#xA;      ,[Terminal_NAV]&#xA;      ,[Transport_Method_NAV]&#xA;      ,[VAT]&#xA;      ,[currency_code]&#xA;      ,[auto_hs_code]&#xA;      ,[auto_hs_code_add]&#xA;      ,[auto_common_des]&#xA;      ,[auto_tovg_des]&#xA;      ,[auto_sert_num]&#xA;      ,[auto_sert_from]&#xA;      ,[auto_sert_to]&#xA;      ,[auto_sgr_num]&#xA;      ,[auto_sgr_from]&#xA;      ,[auto_sgr_to]&#xA;      ,[decl_hs_code]&#xA;      ,[decl_hs_code_add]&#xA;      ,[decl_common_des]&#xA;      ,[decl_tovg_des]&#xA;      ,[decl_sert_num]&#xA;      ,[decl_sert_from]&#xA;      ,[decl_sert_to]&#xA;      ,[decl_sgr_num]&#xA;      ,[decl_sgr_from]&#xA;      ,[decl_sgr_to]&#xA;      ,[country_code_let]&#xA;      ,[country_code_num]&#xA;      ,[unit_code_num]&#xA;      ,[packing_code]&#xA;      ,[transport_doc]&#xA;      ,[group_num]&#xA;      ,[item_num]&#xA;      ,[item_gross]&#xA;      ,[item_net]&#xA;      ,[item_packages]&#xA;      ,[item_price]&#xA;      ,[concat_44]&#xA;&#x9;  ,[request_container]&#xA;  FROM [automation].[dbo].[request_contents]&#xA;  WHERE [guid] = @guid&#xA;ORDER BY [row_id] ASC;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@guid"
                SQLTask:DtsVariableName="User::docguid"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Create XML files"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{083D0D40-5C22-4029-8035-E49C9CC15473}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Create XML files"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_2ddf136998d34a069af3162643bf2062"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::docguid">
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
#endregion

namespace ST_2ddf136998d34a069af3162643bf2062
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        public void Main()
        {
            string guid = (string)Dts.Variables["User::docguid"].Value;

            Declaration.Create(guid);
            AltaInvoice.Create(guid);
        }
    }

    enum ScriptResults
    {
        Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
        Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
    };
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2ddf136998d34a069af3162643bf2062.Properties.Settings.get_Default():ST_2ddf136998d34a069af3162643bf2062.Properties.Sett" +
    "ings")]

namespace ST_2ddf136998d34a069af3162643bf2062.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_2ddf136998d34a069af3162643bf2062.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{FA884D6D-06EB-4604-8ECF-CDC035671FD4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_2ddf136998d34a069af3162643bf2062</RootNamespace>
    <AssemblyName>ST_2ddf136998d34a069af3162643bf2062</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="AltaInvoice.cs" />
    <Compile Include="Declaration.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2ddf136998d34a069af3162643bf2062.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2ddf136998d34a069af3162643bf2062.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2ddf136998d34a069af3162643bf2062.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_2ddf136998d34a069af3162643bf2062.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_2ddf136998d34a069af3162643bf2062.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_2ddf136998d34a069af3162643bf2062</msb:CodeName>
		<msb:DisplayName>ST_2ddf136998d34a069af3162643bf2062</msb:DisplayName>
		<msb:ProjectId>{1AE99256-C748-488B-913D-786FFB018DD1}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_2ddf136998d34a069af3162643bf2062.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Declaration.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="AltaInvoice.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_2ddf136998d34a069af3162643bf2062")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_2ddf136998d34a069af3162643bf2062")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="AltaInvoice.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Linq;

namespace ST_2ddf136998d34a069af3162643bf2062
{
    class AltaInvoice
    {
        public static void Create(string guid)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            string query_contents = @"SELECT * FROM [automation].[dbo].[request_contents] WHERE [guid] = '" + guid + "' ORDER BY [row_id] ASC";
            string query_header = @"SELECT * FROM [automation].[dbo].[request_header] WHERE [guid] = '" + guid + "'";

            DataTable src_contents = new DataTable();
            DataTable src_header = new DataTable();

            using (SqlDataAdapter sda = new SqlDataAdapter(query_contents, connBuilder.ConnectionString))
            {
                sda.Fill(src_contents);
            }

            using (SqlDataAdapter sda = new SqlDataAdapter(query_header, connBuilder.ConnectionString))
            {
                sda.Fill(src_header);
            }

            XElement block = new XElement("TEMP_ROOT", src_contents.AsEnumerable().Select(g1a => new object[]
                        {
                            new XElement("BLOCK", new object[]
                            {
                                new XElement("G_7_NUM", "1"),
                                new XElement("G_32_NUM", g1a.Field<int>("item_num")),
                                new XElement("G_31_DESCRIPT", g1a.Field<string>("decl_tovg_des")),
                                new XElement("G_31_FIRMA", g1a.Field<string>("manufacturer") != null ? g1a.Field<string>("manufacturer").Trim() : null),
                                new XElement("G_31_TM", g1a.Field<string>("trade_mark") != null ? g1a.Field<string>("trade_mark").Trim() : null),
                                new XElement("G_31_MODEL", g1a.Field<string>("model") != null ? g1a.Field<string>("model").Trim() : null),
                                new XElement("G_31_ARTICUL", g1a.Field<string>("article") != null ? g1a.Field<string>("article").Trim() : null),
                                new XElement("G_32_1", g1a.Field<int>("row_id")),
                                new XElement("G_33_1", g1a.Field<string>("decl_hs_code")),
                                new XElement("G_33_2", g1a.Field<string>("decl_hs_code_add")),
                                new XElement("G_34_1", g1a.Field<string>("country_code_num")  != null ? g1a.Field<string>("country_code_num").Trim() : null),
                                new XElement("G_34_ALFA", g1a.Field<string>("country_code_let")  != null ? g1a.Field<string>("country_code_let").Trim() : null),
                                new XElement("G_34_TEXT", g1a.Field<string>("country")),
                                new XElement("G_31_QUNT", g1a.Field<decimal>("qty") == Decimal.Round(g1a.Field<decimal>("qty"), 0) ? Decimal.Round(g1a.Field<decimal>("qty"), 0) : Decimal.Round(g1a.Field<decimal>("qty"), 4)),
                                new XElement("G_31_TEXT", g1a.Field<string>("unit_measurement")),
                                new XElement("G_31_EDCODE", g1a.Field<string>("unit_code_num")),
                                new XElement("G_35_1", g1a.Field<decimal>("gross").ToString("0.000")),
                                new XElement("G_35_SHTUKA", (g1a.Field<decimal>("gross") / g1a.Field<decimal>("qty")).ToString("0.0000")),
                                new XElement("G_38_1", g1a.Field<decimal>("net").ToString("0.000")),
                                new XElement("G_38_SHTUKA", (g1a.Field<decimal>("net") / g1a.Field<decimal>("qty")).ToString("0.0000")),
                                new XElement("G_42_ZASUM", g1a.Field<decimal>("price").ToString("0.00")),
                                new XElement("G_42_ZAEDINIC", (g1a.Field<decimal>("price") / g1a.Field<decimal>("qty")).ToString("0.0000")),

                                new XElement("G_31_TARASUM", g1a.Field<int>("item_packages")),
                                new XElement("G_31_TARALFA", g1a.Field<string>("packing_code")),
                                new XElement("PEXTALFA", g1a.Field<string>("packing_code")),


                                new XElement("G441_4", "04021"),
                                new XElement("G442_4", new object[]
                                {
                                    new XElement("NUM", g1a.Field<string>("inv_num"))
                                }),
                                new XElement("G443_4", g1a.Field<DateTime?>("inv_date") != null ? g1a.Field<DateTime?>("inv_date").Value.ToString("yyyy-MM-dd") : ""),


                                new XElement("G441_10", "03011"),
                                new XElement("G442_10", new object[]
                                {
                                    new XElement("NUM", g1a.Field<string>("contract_num"))
                                }),
                                new XElement("G443_10", g1a.Field<DateTime?>("contract_date") != null ? g1a.Field<DateTime?>("contract_date").Value.ToString("yyyy-MM-dd") : ""),

                                new XElement("G441_6", g1a.Field<string>("decl_sgr_num") == "" ? "" : "01206"),
                                new XElement("G442_6", new object[]
                                {
                                    new XElement("NUM", g1a.Field<string>("decl_sgr_num"))
                                }),
                                new XElement("G443_6", g1a.Field<DateTime?>("decl_sgr_from") != null ? g1a.Field<DateTime?>("decl_sgr_from").Value.ToString("yyyy-MM-dd") : ""),
                                new XElement("G446_6", g1a.Field<DateTime?>("decl_sgr_from") != null ? g1a.Field<DateTime?>("decl_sgr_from").Value.ToString("yyyy-MM-dd") : ""),
                                new XElement("G447_6", g1a.Field<DateTime?>("decl_sgr_to") != null ? g1a.Field<DateTime?>("decl_sgr_to").Value.ToString("yyyy-MM-dd") : ""),

                                new XElement("G441_7", g1a.Field<string>("decl_sert_num") == "" ? "" : "01191"),
                                new XElement("G442_7", new object[]
                                {
                                    new XElement("NUM", g1a.Field<string>("decl_sert_num"))
                                }),
                                new XElement("G443_7", g1a.Field<DateTime?>("decl_sert_from") != null ? g1a.Field<DateTime?>("decl_sert_from").Value.ToString("yyyy-MM-dd") : ""),
                                new XElement("G446_7", g1a.Field<DateTime?>("decl_sert_from") != null ? g1a.Field<DateTime?>("decl_sert_from").Value.ToString("yyyy-MM-dd") : ""),
                                new XElement("G447_7", g1a.Field<DateTime?>("decl_sert_to") != null ? g1a.Field<DateTime?>("decl_sert_to").Value.ToString("yyyy-MM-dd") : "")

        })}));

            XDeclaration xdec = new XDeclaration("1.0", "windows-1251", null);
            XDocument invoice = new XDocument(xdec, new XElement("AltaINV", new object[]
            {
                new XElement("INV_NUM", src_header.Rows[0].Field<string>("num_counter_A")),
                new XElement("INV_DATE", DateTime.Now.ToString("yyyy-MM-dd")),
                new XElement("___PRIM", new XAttribute("Name", "&&PRIM"), new XText(src_header.Rows[0].Field<string>("Delivery"))),

                new XElement("G_2_NAME", src_header.Rows[0].Field<string>("G022")),
                new XElement("G_2_KODSTR", src_header.Rows[0].Field<string>("G0231")),
                new XElement("G_2_POS", src_header.Rows[0].Field<string>("G023POST")),
                new XElement("G_2_SUB", src_header.Rows[0].Field<string>("G023SUBD")),
                new XElement("G_2_CIT", src_header.Rows[0].Field<string>("G023CITY")),
                new XElement("G_2_STREET", src_header.Rows[0].Field<string>("G023STREET")),
                new XElement("G_2_BLD", src_header.Rows[0].Field<string>("G023BUILD")),

                new XElement("G_8_1", src_header.Rows[0].Field<string>("G140")),
                new XElement("G_8_STR", src_header.Rows[0].Field<string>("G1431N")),
                new XElement("G_8_INN", src_header.Rows[0].Field<string>("G141")),
                new XElement("G_8_KPP", src_header.Rows[0].Field<string>("G147")),
                new XElement("G_8_KODSTR", src_header.Rows[0].Field<string>("G1431")),
                new XElement("G_8_NAME", src_header.Rows[0].Field<string>("G142")),
                new XElement("G_8_POS", src_header.Rows[0].Field<string>("G143POST")),
                new XElement("G_8_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                new XElement("G_8_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                new XElement("G_8_STREET", src_header.Rows[0].Field<string>("G143STREET")),
                new XElement("G_8_BLD", src_header.Rows[0].Field<string>("G143BUILD")),

                new XElement("G_9_1", src_header.Rows[0].Field<string>("G140")),
                new XElement("G_9_STR", src_header.Rows[0].Field<string>("G1431N")),
                new XElement("G_9_INN", src_header.Rows[0].Field<string>("G141")),
                new XElement("G_9_KPP", src_header.Rows[0].Field<string>("G147")),
                new XElement("G_9_KODSTR", src_header.Rows[0].Field<string>("G1431")),
                new XElement("G_9_NAME", src_header.Rows[0].Field<string>("G142")),
                new XElement("G_9_POS", src_header.Rows[0].Field<string>("G143POST")),
                new XElement("G_9_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                new XElement("G_9_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                new XElement("G_9_STREET", src_header.Rows[0].Field<string>("G143STREET")),
                new XElement("G_9_BLD", src_header.Rows[0].Field<string>("G143BUILD")),

                new XElement("G_14_1", src_header.Rows[0].Field<string>("G140")),
                new XElement("G_14_STR", src_header.Rows[0].Field<string>("G1431N")),
                new XElement("G_14_INN", src_header.Rows[0].Field<string>("G141")),
                new XElement("G_14_KPP", src_header.Rows[0].Field<string>("G147")),
                new XElement("G_14_KODSTR", src_header.Rows[0].Field<string>("G1431")),
                new XElement("G_14_NAME", src_header.Rows[0].Field<string>("G142")),
                new XElement("G_14_POS", src_header.Rows[0].Field<string>("G143POST")),
                new XElement("G_14_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                new XElement("G_14_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                new XElement("G_14_STREET", src_header.Rows[0].Field<string>("G143STREET")),
                new XElement("G_14_BLD", src_header.Rows[0].Field<string>("G143BUILD")),

                new XElement("BUY_OGRN", src_header.Rows[0].Field<string>("G140")),
                new XElement("BUY_STR", src_header.Rows[0].Field<string>("G1431N")),
                new XElement("BUY_INN", src_header.Rows[0].Field<string>("G141")),
                new XElement("BUY_KPP", src_header.Rows[0].Field<string>("G147")),
                new XElement("BUY_KODSTR", src_header.Rows[0].Field<string>("G1431")),
                new XElement("BUY_NAME", src_header.Rows[0].Field<string>("G142")),
                new XElement("BUY_POS", src_header.Rows[0].Field<string>("G143POST")),
                new XElement("BUY_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                new XElement("BUY_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                new XElement("BUY_STREET", src_header.Rows[0].Field<string>("G143STREET")),
                new XElement("BUY_BLD", src_header.Rows[0].Field<string>("G143BUILD") ),

                new XElement("DEPART", src_header.Rows[0].Field<string>("G15")),
                new XElement("DEPART_ALFA", src_header.Rows[0].Field<string>("G15A")),
                new XElement("FINAL", "РОССИЯ"),
                new XElement("FINAL_ALFA", "RU"),
                new XElement("ORIGIN", src_header.Rows[0].Field<string>("country_name_16")),
                new XElement("ORIGIN_ALFA", src_header.Rows[0].Field<string>("country_code_16")),
                new XElement("TRADER_ALFA", src_header.Rows[0].Field<string>("G11")),
                new XElement("G_1_1", "ИМ"),
                new XElement("G_1_2", "40"),
                new XElement("G_1_3", src_header.Rows[0].Field<string>("ptd_sign_7")),
                new XElement("G_1_31", "true"),
                new XElement("G_22_1", src_header.Rows[0].Field<string>("currency_code")),
                new XElement("G_22_3", src_header.Rows[0].Field<string>("currency_22")),
                new XElement("G_24_1", src_header.Rows[0].Field<string>("G28212")),
                new XElement("G_24_2", src_header.Rows[0].Field<string>("G28221")),
                new XElement("METHOD", "1"),
                new XElement("G_43_1", "1"),
                new XElement("G_37_1", "4000000"),
                new XElement("VIDT_1", src_header.Rows[0].Field<string>("transport_code_26")),
                new XElement("NUMT", src_header.Rows[0].Field<string>("man_TrainTransportDesc")),
                new XElement("QUANTT", src_header.Rows[0].Field<int>("count_transport_18")),
                new XElement("USL", src_header.Rows[0].Field<string>("G202")),
                new XElement("G_20_21", src_header.Rows[0].Field<string>("G2021")),

                block.Elements("BLOCK")

                    }));
            
            string num = src_header.Rows[0].Field<string>("num_counter_A").Trim();
            invoice.Save(@"\\10.10.0.28\alta\Robot\Alta_import\" + "inv_" + src_header.Rows[0].Field<string>("num_counter_A").Trim() + ".xml");

            using (SqlConnection con = new SqlConnection(connBuilder.ConnectionString))
            {
                string insert_query = @"INSERT [automation].[dbo].[created_documents] ([request_guid],[doctype],[docnum],[docdate]) VALUES ('" + guid + "','INV','" + num + "','" + DateTime.Now.ToString("yyyy-MM-dd") + "')";
                SqlCommand command = new SqlCommand(insert_query, con);
                command.Connection.Open();
                command.ExecuteNonQuery();
            }

        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Declaration.cs"
                Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Xml.Linq;

namespace ST_2ddf136998d34a069af3162643bf2062
{
    class Declaration
    {
        public static void Create(string guid)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            string query_contents = @"SELECT * FROM [automation].[dbo].[request_contents] WHERE [guid] = '" + guid + "' ORDER BY [item_num] ASC, [group_num] ASC";
            string query_header = @"SELECT * FROM [automation].[dbo].[request_header] WHERE [guid] = '" + guid + "'";
            string query_documents = @"SELECT * FROM [automation].[dbo].[request_documents] WHERE [guid] = '" + guid + "' ORDER BY [G441] ASC";

            DataTable src_contents = new DataTable();
            DataTable src_header = new DataTable();
            DataTable src_documents = new DataTable();

            using (SqlDataAdapter sda = new SqlDataAdapter(query_contents, connBuilder.ConnectionString))
            {
                sda.Fill(src_contents);
            }

            using (SqlDataAdapter sda = new SqlDataAdapter(query_header, connBuilder.ConnectionString))
            {
                sda.Fill(src_header);
            }

            using (SqlDataAdapter sda = new SqlDataAdapter(query_documents, connBuilder.ConnectionString))
            {
                sda.Fill(src_documents);
            }

            XElement block = new XElement("TEMP_ROOT", src_contents.AsEnumerable().GroupBy(g1 => g1.Field<int>("item_num")).Select(g1a => new object[]
                        {
                            new XElement("BLOCK", new object[]
                            {
                                new XElement("G_31", new object[]
                                {
                                    new XElement("NAME", new XAttribute("Pref", "1-"), new XText(g1a.First().Field<string>("decl_common_des") + Environment.NewLine)),
                                    new XElement("PL", new XAttribute("Pref", "\r\n" + "2-"), ""),
                                    new XElement("PLACE", g1a.First().Field<int>("item_packages")),
                                    new XElement("PLACE2", ", " + g1a.First().Field<string>("packing_code") + "-" + g1a.First().Field<int>("item_packages")),

                                    new XElement("KONT",
                                    g1a.First().Field<string>("item_containers") != null && g1a.First().Field<string>("item_containers") != String.Empty
                                    ? new object[] 
                                    {
                                        new XAttribute("Pref", "\r\n" + "3-"),
                                        new XText("CN")
                                    }
                                    : null),

                                    new XElement("KONT2",
                                    g1a.First().Field<string>("item_containers") != null && g1a.First().Field<string>("item_containers") != String.Empty
                                    ? new object[]
                                    {
                                        new XAttribute("Pref", "   "),
                                        new XText(g1a.First().Field<int>("qty_containers").ToString() + ": " + g1a.First().Field<string>("item_containers"))
                                    }
                                    : null)
               
                                }),
                                new XElement("G_32_1", g1a.Key),
                                new XElement("G_33_1", g1a.First().Field<string>("decl_hs_code")),
                                new XElement("G_33_2", g1a.First().Field<string>("decl_hs_code_add")),
                                new XElement("G_34_1", g1a.First().Field<string>("country_code_let") != null ? g1a.First().Field<string>("country_code_let").Trim() : null),
                                new XElement("G_35_1", Decimal.Round(g1a.Sum(g1b => g1b.Field<decimal>("gross")), 3)),
                                new XElement("G_37_1", "4000000"),
                                new XElement("G_38_1", Decimal.Round(g1a.Sum(g1b => g1b.Field<decimal>("net")), 3)),
                                new XElement("G_42_1", Decimal.Round(g1a.Sum(g1b => g1b.Field<decimal>("price")), 2)),
                                new XElement("G_43_1", "1"),
                                new XElement("G_44", "СМ.ДОПОЛНЕНИЕ"),
                                new XElement("PARENT_POS", g1a.Key),
                                new XElement("PARENT_GNM", "1"),

                                new XElement("TEMP_TOVG", src_contents.AsEnumerable().Where(g2 => g2.Field<int>("item_num") == g1a.Key).Select(g2a => new object[]
                                {
                                    new XElement("TOVG", new object[]
                                    {
                                        new XElement("G32G", g2a.Field<int>("group_num")),
                                        new XElement("G31_1", g2a.Field<string>("decl_tovg_des")),
                                        new XElement("G31_11", g2a.Field<string>("manufacturer") != null ? g2a.Field<string>("manufacturer").Trim() : null),
                                        new XElement("G31_12", g2a.Field<string>("trade_mark") != null ? g2a.Field<string>("trade_mark").Trim() : null),
                                        new XElement("G31_15_MOD", g2a.Field<string>("model") != null ? g2a.Field<string>("model").Trim() : null),
                                        new XElement("G31_15", g2a.Field<string>("article") != null ? g2a.Field<string>("article").Trim() : null),
                                        new XElement("KOLVO", g2a.Field<decimal>("qty") == Decimal.Round(g2a.Field<decimal>("qty"), 0) ? Decimal.Round(g2a.Field<decimal>("qty"), 0) : Decimal.Round(g2a.Field<decimal>("qty"), 4)),
                                        new XElement("CODE_EDI", g2a.Field<string>("unit_code_num") != null ? g2a.Field<string>("unit_code_num").Trim() : null),
                                        new XElement("NAME_EDI", g2a.Field<string>("unit_measurement")),
                                        new XElement("G31_35", Decimal.Round(g2a.Field<decimal>("gross"), 3)),
                                        new XElement("G31_38", Decimal.Round(g2a.Field<decimal>("net"), 3)),
                                        new XElement("G31_42", Decimal.Round(g2a.Field<decimal>("price"), 2)),
                                        new XElement("INVOICCOST", Decimal.Round(g2a.Field<decimal>("price"), 2)),
                                    })
                                })),

                                new XElement("TEMP_G44", src_documents.AsEnumerable().Where(g3 => g3.Field<int>("item_num") == g1a.Key).Select(g3a => new object[]
                                {
                                    new XElement("G44", new object[]
                                    {
                                        new XElement("G4403", g3a.Field<string>("G4403")),
                                        new XElement("G441", g3a.Field<string>("G441")),
                                        new XElement("G442", g3a.Field<string>("G442")),
                                        new XElement("G442R", g3a.Field<string>("G442R")),
                                        new XElement("G443", g3a.Field<DateTime?>("G443_FROM") !=null ? g3a.Field<DateTime?>("G443_FROM").Value.ToString("yyyy-MM-dd") : null),
                                        new XElement("G447", g3a.Field<DateTime?>("G443_TO") !=null ? g3a.Field<DateTime?>("G443_TO").Value.ToString("yyyy-MM-dd") : null),
                                        new XElement("G444", g3a.Field<string>("G444")),
                                        new XElement("BACK", "0"),
                                        new XElement("ED_TYP", ""),
                                        new XElement("ED_ID", g3a.Field<string>("ED_ID")),
                                        new XElement("ED_STAT", ""),
                                        new XElement("FACE", "false"),
                                        new XElement("DOCTEXT", g3a.Field<string>("conc"))
                                    })
                                }))
                            })}));

            //удаление вспомогательных узлов            
            foreach (var x in block.Descendants("TEMP_TOVG").Reverse())
            {
                x.AddAfterSelf(x.Nodes());
                x.Remove();
            }
            foreach (var x in block.Descendants("TEMP_G44").Reverse())
            {
                x.AddAfterSelf(x.Nodes());
                x.Remove();
            }

            XDeclaration xdec = new XDeclaration("1.0", "windows-1251", null);
            XDocument declaration = new XDocument(xdec, new XElement("AltaGTD", new object[]
            {
                    new XElement("G_1_1", "ИМ"),
                    new XElement("G_1_2", "40"),
                    new XElement("G_1_31", "ЭД"),
                    new XElement("G_1_3", src_header.Rows[0].Field<string>("ptd_sign_7")),

                    new XElement("G_2_NAM", src_header.Rows[0].Field<string>("G022")),
                    new XElement("G_2_7", src_header.Rows[0].Field<string>("G0231")),
                    new XElement("G_2_POS", src_header.Rows[0].Field<string>("G023POST")),
                    new XElement("G_2_SUB", src_header.Rows[0].Field<string>("G023SUBD")),
                    new XElement("G_2_CIT", src_header.Rows[0].Field<string>("G023CITY")),
                    new XElement("G_2_STR", src_header.Rows[0].Field<string>("G023STREET")),
                    new XElement("G_2_BLD", src_header.Rows[0].Field<string>("G023BUILD")),

                    new XElement("G_3_1", "1"),
                    new XElement("G_3_2", src_header.Rows[0].Field<decimal>("forms_3")),
                    new XElement("G_5_1", src_header.Rows[0].Field<int>("tov_qty_5")),
                    new XElement("G_6_1", src_header.Rows[0].Field<int>("pack_qty_6")),

                    new XElement("G_7_1", new object[]
                    {
                        new XElement("POST", src_header.Rows[0].Field<string>("num_customs_A")),
                        new XElement("DATE", new XAttribute("Pref", "/"), new XText(src_header.Rows[0].Field<string>("num_date_A"))),
                        new XElement("NUM", new XAttribute("Pref", "/"), new XText(src_header.Rows[0].Field<string>("num_counter_A")))
                    }),

                    new XElement("G_8_1", src_header.Rows[0].Field<string>("G140")),
                    new XElement("G_8_50", src_header.Rows[0].Field<string>("G1431N")),
                    new XElement("G_8_6", src_header.Rows[0].Field<string>("G141") + "/" + src_header.Rows[0].Field<string>("G147")),
                    new XElement("G_8_7", src_header.Rows[0].Field<string>("G1431")),
                    new XElement("G_8_NAM", src_header.Rows[0].Field<string>("G142")),
                    new XElement("G_8_POS", src_header.Rows[0].Field<string>("G143POST")),
                    new XElement("G_8_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                    new XElement("G_8_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                    new XElement("G_8_STR", src_header.Rows[0].Field<string>("G143STREET")),
                    new XElement("G_8_BLD", src_header.Rows[0].Field<string>("G143BUILD")),
                    new XElement("G_8_SM14", "true"),

                    new XElement("G_9_1", src_header.Rows[0].Field<string>("G140")),
                    new XElement("G_9_CN", src_header.Rows[0].Field<string>("G1431N")),
                    new XElement("G_9_4", src_header.Rows[0].Field<string>("G141") + "/" + src_header.Rows[0].Field<string>("G147")),
                    new XElement("G_9_CC", src_header.Rows[0].Field<string>("G1431")),
                    new XElement("G_9_NAM", src_header.Rows[0].Field<string>("G142")),
                    new XElement("G_9_POS", src_header.Rows[0].Field<string>("G143POST")),
                    new XElement("G_9_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                    new XElement("G_9_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                    new XElement("G_9_STR", src_header.Rows[0].Field<string>("G143STREET")),
                    new XElement("G_9_BLD", src_header.Rows[0].Field<string>("G143BUILD")),
                    new XElement("G_9_SM14", "true"),
                    new XElement("G_9_7", src_header.Rows[0].Field<string>("G1431")),

                    new XElement("G_11_1", src_header.Rows[0].Field<string>("G11")),

                    new XElement("G_14_1", src_header.Rows[0].Field<string>("G140")),
                    new XElement("G_14_CN", src_header.Rows[0].Field<string>("G1431N")),
                    new XElement("G_14_4", src_header.Rows[0].Field<string>("G141") + "/" + src_header.Rows[0].Field<string>("G147")),
                    new XElement("G_14_CC", src_header.Rows[0].Field<string>("G1431")),
                    new XElement("G_14_NAM", src_header.Rows[0].Field<string>("G142")),
                    new XElement("G_14_POS", src_header.Rows[0].Field<string>("G143POST")),
                    new XElement("G_14_SUB", src_header.Rows[0].Field<string>("G143SUBD")),
                    new XElement("G_14_CIT", src_header.Rows[0].Field<string>("G143CITY")),
                    new XElement("G_14_STR", src_header.Rows[0].Field<string>("G143STREET")),
                    new XElement("G_14_BLD", src_header.Rows[0].Field<string>("G143BUILD")),

                    new XElement("G_15_1", src_header.Rows[0].Field<string>("G15")),
                    new XElement("G_15A_1", src_header.Rows[0].Field<string>("G15A")),

                    new XElement("G_16_1", src_header.Rows[0].Field<string>("country_name_16")),
                    new XElement("G_16_2", src_header.Rows[0].Field<string>("country_code_16")),

                    new XElement("G_17_1", "РОССИЯ"),
                    new XElement("G_17A_1", "RU"),

                    new XElement("G_18_0", src_header.Rows[0].Field<int>("count_transport_18")),
                    new XElement("G_18", src_header.Rows[0].Field<string>("man_TrainTransportDesc")),

                    new XElement("G_19_1", src_header.Rows[0].Field<int>("container_sign")),

                    new XElement("G_20_20", src_header.Rows[0].Field<string>("G202")),
                    new XElement("G_20_21", src_header.Rows[0].Field<string>("G2021")),
                    new XElement("G_21_0", "1"),
                    new XElement("G_22_1", src_header.Rows[0].Field<string>("currency_code")),
                    new XElement("G_22_2", src_header.Rows[0].Field<decimal>("price_sum_22")),
                    new XElement("G_22_3", src_header.Rows[0].Field<string>("currency_22")),

                    new XElement("G_23_1", Decimal.Round(src_header.Rows[0].Field<decimal>("currency_rate_this"), 4)),
                    new XElement("G_23_2", Decimal.Round(src_header.Rows[0].Field<decimal>("currency_rate_this"), 4)),

                    new XElement("G_25_1", src_header.Rows[0].Field<string>("transport_code_25")),
                    new XElement("G_26_1", src_header.Rows[0].Field<string>("transport_code_26")),
                    new XElement("G_28_12", src_header.Rows[0].Field<string>("G28212")),
                    new XElement("G_28_21", src_header.Rows[0].Field<string>("G28221")),

                    new XElement("G_29_1", src_header.Rows[0].Field<string>("customscode_border")),
                    new XElement("G_29_2", src_header.Rows[0].Field<string>("customsname_border")),

                    new XElement("G_30_0", src_header.Rows[0].Field<DateTime?>("G5411D") != null ? ((DateTime.Now - src_header.Rows[0].Field<DateTime>("G5411D")).TotalHours > 8 ? "11" : "99") : "99"),
                    new XElement("G_30_1", src_header.Rows[0].Field<DateTime?>("G5411D") != null ? ((DateTime.Now - src_header.Rows[0].Field<DateTime>("G5411D")).TotalHours > 8 ? "2" : "") : ""),
                    new XElement("G_30_1", src_header.Rows[0].Field<DateTime?>("G5411D") != null ? ((DateTime.Now - src_header.Rows[0].Field<DateTime>("G5411D")).TotalHours > 8 ? src_header.Rows[0].Field<string>("term_NLIC") : "") : ""),

                    new XElement("G_30_DATE", src_header.Rows[0].Field<DateTime?>("G5411D") != null ? ((DateTime.Now - src_header.Rows[0].Field<DateTime>("G5411D")).TotalHours > 8 ? src_header.Rows[0].Field<string>("term_DBEGIN") : "") : ""),

                    new XElement("G_30_CC", src_header.Rows[0].Field<string>("term_G30A")),
                    new XElement("G_30_SUB", src_header.Rows[0].Field<string>("term_G30SUBD")),
                    new XElement("G_30_CIT", src_header.Rows[0].Field<string>("term_G30CITY")),
                    new XElement("G_30_STR", src_header.Rows[0].Field<string>("term_G30STREET")),
                    new XElement("G_30_BLD", src_header.Rows[0].Field<string>("term_G30BUILD")),
                    new XElement("G_30_12", src_header.Rows[0].Field<string>("term_G3012")),
                    new XElement("G_30_DOP", "false"),

                    new XElement("VES_BR_S", Decimal.Round(src_header.Rows[0].Field<decimal>("overall_gross"), 3)),
                    new XElement("VES_NT_S", Decimal.Round(src_header.Rows[0].Field<decimal>("overall_net"), 3)),

                    block.Elements("BLOCK"),

                    new XElement("G_54_1", "Г. ЯРЦЕВО"),
                    new XElement("G_54_21", "8(905)502-00-15, 8(929)681-92-75, 8(926)539-89-18"),
                    new XElement("G_54_3", "ПЕТРОВА"),
                    new XElement("G_54_3NM", "ОЛЬГА"),
                    new XElement("G_54_3MD", "АЛЕКСАНДРОВНА"),
                    new XElement("G_54_4", "ДОВЕРЕННОСТЬ"),
                    new XElement("G_54_5", "31"),
                    new XElement("G_54_60", "2020-02-11"),
                    new XElement("G_54_61", "2020-06-17"),
                    new XElement("G_54_7", "МЛАДШИЙ СПЕЦИАЛИСТ ПО ОФОРМЛ. ТАМ. ДЕКЛАРАЦИЙ"),
                    new XElement("G_54_8", "RU01001"),
                    new XElement("G_54_9", "ПАСПОРТ"),
                    new XElement("G_54_100", "506346"),
                    new XElement("G_54_101", "2009-11-23"),
                    new XElement("G_54_0", "false"),
                    new XElement("G_54_110", src_header.Rows[0].Field<string>("G5411")),
                    new XElement("G_54_111", src_header.Rows[0].Field<DateTime?>("G5411D") != null ? src_header.Rows[0].Field<DateTime?>("G5411D").Value.ToString("yyyy-MM-dd") : null),
                    new XElement("G_54_12", "66 09"),
                    new XElement("G_54_13", "ОТДЕЛОМ ВНУТРЕННИХ ДЕЛ ЯРЦЕВСКОГО РАЙОНА СМОЛЕНСКОЙ ОБЛАСТИ"),
                    new XElement("G_54_150", "0035"),
                    new XElement("G_54_15", "7728219369/772701001"),

                    new XElement("___PRIM", new XAttribute("Name", "&&PRIM"), new XText(src_header.Rows[0].Field<string>("Delivery"))),

                    new XElement("___DR", new XAttribute("Name", "&&DR"), src_header.Rows[0].Field<string>("currency_rate_date")),
                    new XElement("___RUSD", new XAttribute("Name", "&&RUSD"), Decimal.Round(src_header.Rows[0].Field<decimal>("currency_rate_usd"), 4)),
                    new XElement("___REUR", new XAttribute("Name", "&&REUR"), Decimal.Round(src_header.Rows[0].Field<decimal>("currency_rate_eur"), 4)),
                    new XElement("___RR", new XAttribute("Name", "&&RR"), "true")

            }));             

            string num = src_header.Rows[0].Field<string>("num_counter_A").Trim();
            declaration.Save(@"\\10.10.0.28\alta\Robot\Alta_import\" + "decl_" + num + ".xml");

            using (SqlConnection con = new SqlConnection(connBuilder.ConnectionString))
            {
                string insert_query = @"INSERT [automation].[dbo].[created_documents] ([request_guid],[doctype],[docnum],[docdate]) VALUES ('" + guid + "','GTD','" + num + "','" + DateTime.Now.ToString("yyyy-MM-dd") + "')";
                SqlCommand command = new SqlCommand(insert_query, con);
                command.Connection.Open();
                command.ExecuteNonQuery();
            }
        }

    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_2ddf136998d34a069af3162643bf2062.dll">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
ACtzHgAACqIlGXLhHwBwKBoAAAoDcuEfAHAoAgAAK3MeAAAKoiUacu0fAHAoGgAACgNy9x8AcCgI
AAArChIAKEAAAAotAxQrIANy9x8AcCgIAAArChIAKEMAAAoLEgFyAwIAcCgkAAAKcx4AAAqiJRty
CyAAcCgaAAAKA3IVIABwKAgAACsKEgAoQAAACi0DFCsgA3IVIABwKAgAACsKEgAoQwAACgsSAXID
AgBwKCQAAApzHgAACqIlHHIlIABwKBoAAAoDciUgAHAoAgAAK3MeAAAKoiUdci8gAHAoGgAACnI5
IABwcx4AAAqiJR5yPSAAcCgaAAAKcn8QAHBzHgAACqIlHwlySyAAcCgaAAAKA3JLIABwKAIAACtz
HgAACqIlHwpyVyAAcCgaAAAKcn8QAHBzHgAACqIlHwtyZyAAcCgaAAAKctcRAHBzHgAACqIlHwxy
cSAAcCgaAAAKA3KBIABwKAIAACtzHgAACqJzJwAACqIqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMw
MzE5AAAAAAUAbAAAAOQIAAAjfgAAUAkAAJAKAAAjU3RyaW5ncwAAAADgEwAAjCAAACNVUwBsNAAA
EAAAACNHVUlEAAAAfDQAAEQEAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAABC
AAAACwAAABIAAAAdAAAADQAAAFwAAAACAAAAFAAAAAUAAAACAAAAAwAAAAQAAAAJAAAAAQAAAAgA
AAABAAAABAAAAAwAAAAAAAwGAQAAAAAABgB5BAIIBgAIBQIIBgDFA+8HDwB2CAAABgDyA84GBgBc
BM4GBgA9BM4GBgDvBM4GBgCZBM4GBgCyBM4GBgAJBM4GBgAkBFwFBgC3CUIGCgBxB90JCgBQArQB
DgDzCTsHCgC5B90JBgCmAkIGCgAOB90JBgCNAwIIBgDWAEIGCgA7CrQBBgDcBUIGBgBQAEIGBgCD
ANEBBgBjBkIGEgDdAEsHFgDNBLMFFgAiA7MFBgBSBkIGBgCoA+8HBgCQByIIBgAvB6oGGgBtA/YF
GgDZA/YFGgA+A5UGBgCNBUIGCgBXBxwHCgCrBxwHBgBwAkIGDgCgAjsHHgDRCLQBHgBpALQBHgDl
CLQBDgCIBjsHCgDgBrQBHgAlCbQBDgCCAzsHDgAtCjsHBgCUAEIGDgCgBzsHBgBbANEBDgAICjsH
CgABAt0JCgABBxwHCgD3ARwHEgBlAksHDgBKAjsHBgDIBzcJFgDkBbMFIgC+CK8CIgBaAq8CBgDb
AkIGBgB8AkIGBgBXCs4GBgD8CUIGAAAAAG0BAAAAAAEAAQAAABAAHwKaADUAAQABAAAAEACJBpoA
NQABAAMAAQAQAHEGmgB1AAEABQAAAQAAaQmaAHkAAQAHAAAAEAApCIsINQAEAAcAAAEQAMgIiwiR
AAYACwADIRAAzQEAADUABwAOAAMBEAAZAAAANQAJABEAAwEQAC4AAAA1AAsAEwADIRAAzQEAADUA
DAAWAAYGoAHiAlaAWQnlAlaA8gLlAhEAVwbpAhEAEgPuAhEAKwLzAjYAaQH3AhYAAQD7AgYAmgkF
AwYAjAkFAwYAqAEJAzYAaQESAxYAAQAWAxYAvgAfAxYA7AAfAxYABwEfAxYALAH7AhYAUQH7AlAg
AAAAAJYAZgMpAwEAXC4AAAAAhhjiBwYAAgBkLgAAAACWAGYDKQMCAFwuAAAAAIYY4gcGAAMAnEUA
AAAAhgB3BgYAAwDIRQAAAACGGOIHBgADAFwuAAAAAIMY4gcGAAMA0EUAAAAAkwiMBy4DAwD8RQAA
AACTCPoCNAMDAANGAAAAAJMIBgM6AwMAC0YAAAAAlgjRCUEDBAASRgAAAACGGOIHBgAEABpGAAAA
AJEY6AdGAwQAJkYAAAAAkRjoB0YDBABcLgAAAACGGOIHBgAEADRGAAAAAIMACgBKAwQAXC4AAAAA
hhjiBwYABQB4TgAAAACDAEMAUQMFAFwuAAAAAIYY4gcGAAYArVMAAAAAgwAfAV0DBgCtUwAAAACD
AEQBXQMHAMdTAAAAAJEY6AdGAwgAXC4AAAAAhhjiBwYACADTUwAAAACDAAoAYwMIAOBTAAAAAIMA
xwBpAwkA7VMAAAAAgwD1AGkDCgD6UwAAAACDABABaQMLAAhUAAAAAIMANQFKAwwAjFYAAAAAgwBa
AUoDDQAAAAEA7AEAAAEA7AEAAAEAPQUAAAEAqAEAAAEAqAEAAAEA6QAAAAEABAEAAAEAkQAAAAEA
wAEAAAEAwAEAAAEAwAEAAAEArAEAAAEAsAEJAOIHAQARAOIHBgAZAOIHCgApAOIHEAAxAOIHEAA5
AOIHEABBAOIHEABJAOIHEABRAOIHEABZAOIHEABhAOIHEAChAOIHBgDhAOIHBgD5AOIHBgAZAeIH
FQBxAOIHBgBxADsCEABxAHYBEABxABICEAApAbAJMQB5AOIHBgAxAXYFOACJAOIHPAA5ATQGQgBB
AVYDBgBJAcUJSABRAWMCTwAMAOIHZABhAb4JagCBAOIHiwBpAeIHkwB5AKcJmgBxATkGoAB5AfEB
pgCRADMKswCRAIsFuACBAeIHiwCJAeIHEACBAOIHvQCZAYMJygCpAeIH1wApAUkGOACpAUMFEACZ
AOIHEAApAbAJ4ACxAeIH5gCxAfIG7QC5AWwGBgDBAWAK8gBpAOIHBgAUAOIHZADJAUMKJAEcAOIH
ZADJAb4JWAGZAXcJygDJAV4DfgEkANQHnQEsABIKrQGZAYUIsgHRAU8FvQHRAUgFBgDZASQKwgG5
AAwCywE0ADAFwgGRAL8G6AHRAEoJ8QE0ACYFrQHpAGEJ9QHhAboI+wHpATkGAQLxASYFCALpAOIH
BgD5AY4CDAL5AVMKFQIBAeIHGwIhAeIHBgC5AHAKMAK5AIsFuAC5AHwGOAIpAXAKQQLJAR4KTQIR
As8CXwIpAbAJYwKRAYsFOAApAbAJaQIpAYoKcQIpAXwKQQI8AEsKrQFEAOIHZADJAU4GhQJMAOIH
ZABhAeACogIIAAgA2AIIAAwA3QIpAHsAqQMuAAsAgQMuABMAigMuABsAqQMuACMAsgMuACsA2wMu
ADMA2wMuADsA2wMuAEMAsgMuAEsA4QMuAFMA2wMuAFsA+ANJAHsAqQODAGsA3QLBAGMA3QLDAHMA
3QIDAWMA3QIjAWMA3QJDAWMA3QJjAWMA3QIcAPYAIwJHArsCBgABAAcAAwAAAJAHcAMAABoDdgMA
ANUJfAMCAAgAAwACAAkABQABAAoABQACAAsABwBbABwBSgGVAaYB3AF0AnwCmgIEgAAAAQAAAN0c
eEkAAAAAAACaAAAABAAAAAAAAAAAAAAAxgLEAQAAAAAEAAAAAAAAAAAAAADGArQBAAAAAAQAAAAA
AAAAAAAAAMYCOwcAAAAABAAAAAAAAAAAAAAAxgLmAgAAAAANAAAAAAAAAAAAAADPApQFAAAAAAQA
AAAAAAAAAAAAAMYCQgYAAAAABAAAAAAAAAAAAAAAxgIHCQAAAAANAAAAAAAAAAAAAADPAoEBAAAA
AAAAAAABAAAAMwgAAAgAAgAJAAMACgADAAsAAwA7AIQARQCvAEUAxgBpAEQBbQByAXEAkAFFAMYB
RQDTAUUA4wGjAFoCtQBaArkAWgIAAAAAADw+OV9fMF8wADxDcmVhdGU+Yl9fMF8wADw+Y19fRGlz
cGxheUNsYXNzMF8wADw+Y19fRGlzcGxheUNsYXNzMF8xADxDcmVhdGU+Yl9fMQBOdWxsYWJsZWAx
AElFbnVtZXJhYmxlYDEARW51bWVyYWJsZVJvd0NvbGxlY3Rpb25gMQBJRW51bWVyYXRvcmAxAGcx
AEludDMyAFNUXzJkZGYxMzY5OThkMzRhMDY5YWYzMTYyNjQzYmYyMDYyADw+OV9fMF8yADxDcmVh
dGU+Yl9fMF8yAEZ1bmNgMgBJR3JvdXBpbmdgMgBnMgA8PjlfXzBfMwA8Q3JlYXRlPmJfXzBfMwBn
MwA8PjlfXzBfNAA8Q3JlYXRlPmJfXzBfNAA8Q3JlYXRlPmJfXzUAPD45X18wXzYAPENyZWF0ZT5i
X18wXzYAPENyZWF0ZT5iX183ADw+OV9fMF84ADxDcmVhdGU+Yl9fMF84ADw+OQA8TW9kdWxlPgBz
ZXRfVXNlcklEAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAGcxYQBnMmEA
ZzNhAFN5c3RlbS5EYXRhAGcxYgBtc2NvcmxpYgA8PmMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVy
aWMAZ3VpZABGaWVsZABEYkNvbW1hbmQAU3FsQ29tbWFuZABSb3VuZABzZXRfUGFzc3dvcmQAQWx0
YUludm9pY2UAZGVmYXVsdEluc3RhbmNlAHNldF9EYXRhU291cmNlAFhOb2RlAERhdGFUYWJsZQBW
YXJpYWJsZQBBc0VudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlw
ZUZyb21IYW5kbGUAWE5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGlt
ZQBnZXRfTmV3TGluZQBUeXBlAFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUA
c2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBB
cHBsaWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAFJldmVyc2UAQ3JlYXRlAEVkaXRvckJyb3dz
YWJsZVN0YXRlAFhBdHRyaWJ1dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJO
b25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBnZXRfSGFzVmFsdWUAdmFs
dWUAU2F2ZQBSZW1vdmUAQWRkQWZ0ZXJTZWxmAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAZ2V0
X0Nvbm5lY3Rpb25TdHJpbmcAVG9TdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sARGVjaW1hbABTY3JpcHRP
YmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMmRkZjEzNjk5OGQzNGEwNjlhZjMx
NjI2NDNiZjIwNjIuZGxsAEZpbGwAZ2V0X0l0ZW0AU3lzdGVtAFRyaW0AU3VtAEVudW0AcmVzb3Vy
Y2VNYW4AVGltZVNwYW4AT3BlbgBTY3JpcHRNYWluAG9wX0RpdmlzaW9uAFhEZWNsYXJhdGlvbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBvcF9TdWJ0cmFjdGlvbgBT
eXN0ZW0uUmVmbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBnZXRfQ29ubmVjdGlvbgBEYkNvbm5l
Y3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AU3lzdGVt
LlhtbC5MaW5xAFN5c3RlbS5MaW5xAERiQ29ubmVjdGlvblN0cmluZ0J1aWxkZXIAU3FsQ29ubmVj
dGlvblN0cmluZ0J1aWxkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBYQ29udGFpbmVyAERiRGF0YUFk
YXB0ZXIAU3FsRGF0YUFkYXB0ZXIASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0
b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lz
dGVtLlJlc291cmNlcwBTVF8yZGRmMTM2OTk4ZDM0YTA2OWFmMzE2MjY0M2JmMjA2Mi5Qcm9wZXJ0
aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMATm9kZXMAU1RfMmRkZjEzNjk5
OGQzNGEwNjlhZjMxNjI2NDNiZjIwNjIuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNldHRpbmdz
AERhdGFUYWJsZUV4dGVuc2lvbnMARW51bWVyYWJsZVJvd0NvbGxlY3Rpb25FeHRlbnNpb25zAFN5
c3RlbS5EYXRhLkRhdGFTZXRFeHRlbnNpb25zAERhdGFSb3dFeHRlbnNpb25zAFN5c3RlbS5Db2xs
ZWN0aW9ucwBnZXRfVG90YWxIb3VycwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBEZXNj
ZW5kYW50cwBFbGVtZW50cwBzcmNfZG9jdW1lbnRzAHNyY19jb250ZW50cwBnZXRfUm93cwBDb25j
YXQAT2JqZWN0AFNlbGVjdABvcF9JbXBsaWNpdABnZXRfRGVmYXVsdABTeXN0ZW0uRGF0YS5TcWxD
bGllbnQAWEVsZW1lbnQARW52aXJvbm1lbnQAWERvY3VtZW50AGdldF9DdXJyZW50AEZpcnN0AE1v
dmVOZXh0AFhUZXh0AGdldF9Ob3cARGF0YVJvdwBHcm91cEJ5AGdldF9LZXkAZ2V0X0Fzc2VtYmx5
AEV4ZWN1dGVOb25RdWVyeQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5AEVtcHR5AAAVMQAwAC4A
MQAwAC4AMAAuADIAOAAAD3AAaABwAHUAcwBlAHIAABFnAG4AUQBDAFUARQBsAFUAAICJUwBFAEwA
RQBDAFQAIAAqACAARgBSAE8ATQAgAFsAYQB1AHQAbwBtAGEAdABpAG8AbgBdAC4AWwBkAGIAbwBd
AC4AWwByAGUAcQB1AGUAcwB0AF8AYwBvAG4AdABlAG4AdABzAF0AIABXAEgARQBSAEUAIABbAGcA
dQBpAGQAXQAgAD0AIAAnAAEvJwAgAE8AUgBEAEUAUgAgAEIAWQAgAFsAcgBvAHcAXwBpAGQAXQAg
AEEAUwBDAAGAhVMARQBMAEUAQwBUACAAKgAgAEYAUgBPAE0AIABbAGEAdQB0AG8AbQBhAHQAaQBv
AG4AXQAuAFsAZABiAG8AXQAuAFsAcgBlAHEAdQBlAHMAdABfAGgAZQBhAGQAZQByAF0AIABXAEgA
RQBSAEUAIABbAGcAdQBpAGQAXQAgAD0AIAAnAAEDJwABE1QARQBNAFAAXwBSAE8ATwBUAAAHMQAu
ADAAABl3AGkAbgBkAG8AdwBzAC0AMQAyADUAMQABD0EAbAB0AGEASQBOAFYAAA9JAE4AVgBfAE4A
VQBNAAAbbgB1AG0AXwBjAG8AdQBuAHQAZQByAF8AQQAAEUkATgBWAF8ARABBAFQARQAAFXkAeQB5
AHkALQBNAE0ALQBkAGQAAQ9fAF8AXwBQAFIASQBNAAAJTgBhAG0AZQAADSYAJgBQAFIASQBNAAAR
RABlAGwAaQB2AGUAcgB5AAARRwBfADIAXwBOAEEATQBFAAAJRwAwADIAMgAAFUcAXwAyAF8ASwBP
AEQAUwBUAFIAAAtHADAAMgAzADEAAA9HAF8AMgBfAFAATwBTAAARRwAwADIAMwBQAE8AUwBUAAAP
RwBfADIAXwBTAFUAQgAAEUcAMAAyADMAUwBVAEIARAAAD0cAXwAyAF8AQwBJAFQAABFHADAAMgAz
AEMASQBUAFkAABVHAF8AMgBfAFMAVABSAEUARQBUAAAVRwAwADIAMwBTAFQAUgBFAEUAVAAAD0cA
XwAyAF8AQgBMAEQAABNHADAAMgAzAEIAVQBJAEwARAAAC0cAXwA4AF8AMQAACUcAMQA0ADAAAA9H
AF8AOABfAFMAVABSAAANRwAxADQAMwAxAE4AAA9HAF8AOABfAEkATgBOAAAJRwAxADQAMQAAD0cA
XwA4AF8ASwBQAFAAAAlHADEANAA3AAAVRwBfADgAXwBLAE8ARABTAFQAUgAAC0cAMQA0ADMAMQAA
EUcAXwA4AF8ATgBBAE0ARQAACUcAMQA0ADIAAA9HAF8AOABfAFAATwBTAAARRwAxADQAMwBQAE8A
UwBUAAAPRwBfADgAXwBTAFUAQgAAEUcAMQA0ADMAUwBVAEIARAAAD0cAXwA4AF8AQwBJAFQAABFH
ADEANAAzAEMASQBUAFkAABVHAF8AOABfAFMAVABSAEUARQBUAAAVRwAxADQAMwBTAFQAUgBFAEUA
VAAAD0cAXwA4AF8AQgBMAEQAABNHADEANAAzAEIAVQBJAEwARAAAC0cAXwA5AF8AMQAAD0cAXwA5
AF8AUwBUAFIAAA9HAF8AOQBfAEkATgBOAAAPRwBfADkAXwBLAFAAUAAAFUcAXwA5AF8ASwBPAEQA
UwBUAFIAABFHAF8AOQBfAE4AQQBNAEUAAA9HAF8AOQBfAFAATwBTAAAPRwBfADkAXwBTAFUAQgAA
D0cAXwA5AF8AQwBJAFQAABVHAF8AOQBfAFMAVABSAEUARQBUAAAPRwBfADkAXwBCAEwARAAADUcA
XwAxADQAXwAxAAARRwBfADEANABfAFMAVABSAAARRwBfADEANABfAEkATgBOAAARRwBfADEANABf
AEsAUABQAAAXRwBfADEANABfAEsATwBEAFMAVABSAAATRwBfADEANABfAE4AQQBNAEUAABFHAF8A
MQA0AF8AUABPAFMAABFHAF8AMQA0AF8AUwBVAEIAABFHAF8AMQA0AF8AQwBJAFQAABdHAF8AMQA0
AF8AUwBUAFIARQBFAFQAABFHAF8AMQA0AF8AQgBMAEQAABFCAFUAWQBfAE8ARwBSAE4AAA9CAFUA
WQBfAFMAVABSAAAPQgBVAFkAXwBJAE4ATgAAD0IAVQBZAF8ASwBQAFAAABVCAFUAWQBfAEsATwBE
AFMAVABSAAARQgBVAFkAXwBOAEEATQBFAAAPQgBVAFkAXwBQAE8AUwAAD0IAVQBZAF8AUwBVAEIA
AA9CAFUAWQBfAEMASQBUAAAVQgBVAFkAXwBTAFQAUgBFAEUAVAAAD0IAVQBZAF8AQgBMAEQAAA1E
AEUAUABBAFIAVAAAB0cAMQA1AAAXRABFAFAAQQBSAFQAXwBBAEwARgBBAAAJRwAxADUAQQAAC0YA
SQBOAEEATAAADSAEHgQhBCEEGAQvBAEVRgBJAE4AQQBMAF8AQQBMAEYAQQAABVIAVQAADU8AUgBJ
AEcASQBOAAAfYwBvAHUAbgB0AHIAeQBfAG4AYQBtAGUAXwAxADYAABdPAFIASQBHAEkATgBfAEEA
TABGAEEAAB9jAG8AdQBuAHQAcgB5AF8AYwBvAGQAZQBfADEANgAAF1QAUgBBAEQARQBSAF8AQQBM
AEYAQQAAB0cAMQAxAAALRwBfADEAXwAxAAAFGAQcBAELRwBfADEAXwAyAAAFNAAwAAALRwBfADEA
XwAzAAAVcAB0AGQAXwBzAGkAZwBuAF8ANwAADUcAXwAxAF8AMwAxAAAJdAByAHUAZQAADUcAXwAy
ADIAXwAxAAAbYwB1AHIAcgBlAG4AYwB5AF8AYwBvAGQAZQAADUcAXwAyADIAXwAzAAAXYwB1AHIA
cgBlAG4AYwB5AF8AMgAyAAANRwBfADIANABfADEAAA1HADIAOAAyADEAMgAADUcAXwAyADQAXwAy
AAANRwAyADgAMgAyADEAAA1NAEUAVABIAE8ARAAAAzEAAA1HAF8ANAAzAF8AMQAADUcAXwAzADcA
XwAxAAAPNAAwADAAMAAwADAAMAAADVYASQBEAFQAXwAxAAAjdAByAGEAbgBzAHAAbwByAHQAXwBj
AG8AZABlAF8AMgA2AAAJTgBVAE0AVAAALW0AYQBuAF8AVAByAGEAaQBuAFQAcgBhAG4AcwBwAG8A
cgB0AEQAZQBzAGMAAA1RAFUAQQBOAFQAVAAAJWMAbwB1AG4AdABfAHQAcgBhAG4AcwBwAG8AcgB0
AF8AMQA4AAAHVQBTAEwAAAlHADIAMAAyAAAPRwBfADIAMABfADIAMQAAC0cAMgAwADIAMQAAC0IA
TABPAEMASwAAUVwAXAAxADAALgAxADAALgAwAC4AMgA4AFwAYQBsAHQAYQBcAFIAbwBiAG8AdABc
AEEAbAB0AGEAXwBpAG0AcABvAHIAdABcAGkAbgB2AF8AAAkuAHgAbQBsAACAy0kATgBTAEUAUgBU
ACAAWwBhAHUAdABvAG0AYQB0AGkAbwBuAF0ALgBbAGQAYgBvAF0ALgBbAGMAcgBlAGEAdABlAGQA
XwBkAG8AYwB1AG0AZQBuAHQAcwBdACAAKABbAHIAZQBxAHUAZQBzAHQAXwBnAHUAaQBkAF0ALABb
AGQAbwBjAHQAeQBwAGUAXQAsAFsAZABvAGMAbgB1AG0AXQAsAFsAZABvAGMAZABhAHQAZQBdACkA
IABWAEEATABVAEUAUwAgACgAJwABEycALAAnAEkATgBWACcALAAnAAEHJwAsACcAAQUnACkAAVUn
ACAATwBSAEQARQBSACAAQgBZACAAWwBpAHQAZQBtAF8AbgB1AG0AXQAgAEEAUwBDACwAIABbAGcA
cgBvAHUAcABfAG4AdQBtAF0AIABBAFMAQwABgItTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAA
WwBhAHUAdABvAG0AYQB0AGkAbwBuAF0ALgBbAGQAYgBvAF0ALgBbAHIAZQBxAHUAZQBzAHQAXwBk
AG8AYwB1AG0AZQBuAHQAcwBdACAAVwBIAEUAUgBFACAAWwBnAHUAaQBkAF0AIAA9ACAAJwABKycA
IABPAFIARABFAFIAIABCAFkAIABbAEcANAA0ADEAXQAgAEEAUwBDAAETVABFAE0AUABfAFQATwBW
AEcAABFUAEUATQBQAF8ARwA0ADQAAA9BAGwAdABhAEcAVABEAAAFLQQUBAEPRwBfADIAXwBOAEEA
TQAAC0cAXwAyAF8ANwAAD0cAXwAyAF8AUwBUAFIAAAtHAF8AMwBfADEAAAtHAF8AMwBfADIAAA9m
AG8AcgBtAHMAXwAzAAALRwBfADUAXwAxAAATdABvAHYAXwBxAHQAeQBfADUAAAtHAF8ANgBfADEA
ABVwAGEAYwBrAF8AcQB0AHkAXwA2AAALRwBfADcAXwAxAAAJUABPAFMAVAAAG24AdQBtAF8AYwB1
AHMAdABvAG0AcwBfAEEAAAlEAEEAVABFAAAJUAByAGUAZgAAAy8AABVuAHUAbQBfAGQAYQB0AGUA
XwBBAAAHTgBVAE0AAA1HAF8AOABfADUAMAAAC0cAXwA4AF8ANgAAC0cAXwA4AF8ANwAAD0cAXwA4
AF8ATgBBAE0AABFHAF8AOABfAFMATQAxADQAAA1HAF8AOQBfAEMATgAAC0cAXwA5AF8ANAAADUcA
XwA5AF8AQwBDAAAPRwBfADkAXwBOAEEATQAAEUcAXwA5AF8AUwBNADEANAAAC0cAXwA5AF8ANwAA
DUcAXwAxADEAXwAxAAAPRwBfADEANABfAEMATgAADUcAXwAxADQAXwA0AAAPRwBfADEANABfAEMA
QwAAEUcAXwAxADQAXwBOAEEATQAADUcAXwAxADUAXwAxAAAPRwBfADEANQBBAF8AMQAADUcAXwAx
ADYAXwAxAAANRwBfADEANgBfADIAAA1HAF8AMQA3AF8AMQAAD0cAXwAxADcAQQBfADEAAA1HAF8A
MQA4AF8AMAAACUcAXwAxADgAAA1HAF8AMQA5AF8AMQAAHWMAbwBuAHQAYQBpAG4AZQByAF8AcwBp
AGcAbgAAD0cAXwAyADAAXwAyADAAAA1HAF8AMgAxAF8AMAAADUcAXwAyADIAXwAyAAAZcAByAGkA
YwBlAF8AcwB1AG0AXwAyADIAAA1HAF8AMgAzAF8AMQAAJWMAdQByAHIAZQBuAGMAeQBfAHIAYQB0
AGUAXwB0AGgAaQBzAAANRwBfADIAMwBfADIAAA1HAF8AMgA1AF8AMQAAI3QAcgBhAG4AcwBwAG8A
cgB0AF8AYwBvAGQAZQBfADIANQAADUcAXwAyADYAXwAxAAAPRwBfADIAOABfADEAMgAAD0cAXwAy
ADgAXwAyADEAAA1HAF8AMgA5AF8AMQAAJWMAdQBzAHQAbwBtAHMAYwBvAGQAZQBfAGIAbwByAGQA
ZQByAAANRwBfADIAOQBfADIAACVjAHUAcwB0AG8AbQBzAG4AYQBtAGUAXwBiAG8AcgBkAGUAcgAA
DUcAXwAzADAAXwAwAAANRwA1ADQAMQAxAEQAAAU5ADkAAAUxADEAAA1HAF8AMwAwAF8AMQAAAQAD
MgAAE3QAZQByAG0AXwBOAEwASQBDAAATRwBfADMAMABfAEQAQQBUAEUAABd0AGUAcgBtAF8ARABC
AEUARwBJAE4AAA9HAF8AMwAwAF8AQwBDAAATdABlAHIAbQBfAEcAMwAwAEEAABFHAF8AMwAwAF8A
UwBVAEIAABl0AGUAcgBtAF8ARwAzADAAUwBVAEIARAAAEUcAXwAzADAAXwBDAEkAVAAAGXQAZQBy
AG0AXwBHADMAMABDAEkAVABZAAARRwBfADMAMABfAFMAVABSAAAddABlAHIAbQBfAEcAMwAwAFMA
VABSAEUARQBUAAARRwBfADMAMABfAEIATABEAAAbdABlAHIAbQBfAEcAMwAwAEIAVQBJAEwARAAA
D0cAXwAzADAAXwAxADIAABV0AGUAcgBtAF8ARwAzADAAMQAyAAARRwBfADMAMABfAEQATwBQAAAL
ZgBhAGwAcwBlAAARVgBFAFMAXwBCAFIAXwBTAAAbbwB2AGUAcgBhAGwAbABfAGcAcgBvAHMAcwAA
EVYARQBTAF8ATgBUAF8AUwAAF28AdgBlAHIAYQBsAGwAXwBuAGUAdAAADUcAXwA1ADQAXwAxAAAT
EwQuACAALwQgBCYEFQQSBB4EAQ9HAF8ANQA0AF8AMgAxAABjOAAoADkAMAA1ACkANQAwADIALQAw
ADAALQAxADUALAAgADgAKAA5ADIAOQApADYAOAAxAC0AOQAyAC0ANwA1ACwAIAA4ACgAOQAyADYA
KQA1ADMAOQAtADgAOQAtADEAOAABDUcAXwA1ADQAXwAzAAAPHwQVBCIEIAQeBBIEEAQBEUcAXwA1
ADQAXwAzAE4ATQAACx4EGwQsBBMEEAQBEUcAXwA1ADQAXwAzAE0ARAAAGxAEGwQVBBoEIQQQBB0E
FAQgBB4EEgQdBBAEAQ1HAF8ANQA0AF8ANAAAGRQEHgQSBBUEIAQVBB0EHQQeBCEEIgQsBAENRwBf
ADUANABfADUAAAUzADEAAA9HAF8ANQA0AF8ANgAwAAAVMgAwADIAMAAtADAAMgAtADEAMQABD0cA
XwA1ADQAXwA2ADEAABUyADAAMgAwAC0AMAA2AC0AMQA3AAENRwBfADUANABfADcAAFscBBsEEAQU
BCgEGAQZBCAAIQQfBBUEJgQYBBAEGwQYBCEEIgQgAB8EHgQgAB4EJAQeBCAEHAQbBC4AIAAiBBAE
HAQuACAAFAQVBBoEGwQQBCAEEAQmBBgEGQQBDUcAXwA1ADQAXwA4AAAPUgBVADAAMQAwADAAMQAA
DUcAXwA1ADQAXwA5AAAPHwQQBCEEHwQeBCAEIgQBEUcAXwA1ADQAXwAxADAAMAAADTUAMAA2ADMA
NAA2AAARRwBfADUANABfADEAMAAxAAAVMgAwADAAOQAtADEAMQAtADIAMwABDUcAXwA1ADQAXwAw
AAARRwBfADUANABfADEAMQAwAAALRwA1ADQAMQAxAAARRwBfADUANABfADEAMQAxAAAPRwBfADUA
NABfADEAMgAACzYANgAgADAAOQAAD0cAXwA1ADQAXwAxADMAAHceBCIEFAQVBBsEHgQcBCAAEgQd
BCMEIgQgBBUEHQQdBBgEJQQgABQEFQQbBCAALwQgBCYEFQQSBCEEGgQeBBMEHgQgACAEEAQZBB4E
HQQQBCAAIQQcBB4EGwQVBB0EIQQaBB4EGQQgAB4EEQQbBBAEIQQiBBgEARFHAF8ANQA0AF8AMQA1
ADAAAAkwADAAMwA1AAAPRwBfADUANABfADEANQAAKTcANwAyADgAMgAxADkAMwA2ADkALwA3ADcA
MgA3ADAAMQAwADAAMQAAC18AXwBfAEQAUgAACSYAJgBEAFIAACVjAHUAcgByAGUAbgBjAHkAXwBy
AGEAdABlAF8AZABhAHQAZQAAD18AXwBfAFIAVQBTAEQAAA0mACYAUgBVAFMARAAAI2MAdQByAHIA
ZQBuAGMAeQBfAHIAYQB0AGUAXwB1AHMAZAAAD18AXwBfAFIARQBVAFIAAA0mACYAUgBFAFUAUgAA
I2MAdQByAHIAZQBuAGMAeQBfAHIAYQB0AGUAXwBlAHUAcgAAC18AXwBfAFIAUgAACSYAJgBSAFIA
AFNcAFwAMQAwAC4AMQAwAC4AMAAuADIAOABcAGEAbAB0AGEAXABSAG8AYgBvAHQAXABBAGwAdABh
AF8AaQBtAHAAbwByAHQAXABkAGUAYwBsAF8AABMnACwAJwBHAFQARAAnACwAJwABG1UAcwBlAHIA
OgA6AGQAbwBjAGcAdQBpAGQAAHFTAFQAXwAyAGQAZABmADEAMwA2ADkAOQA4AGQAMwA0AGEAMAA2
ADkAYQBmADMAMQA2ADIANgA0ADMAYgBmADIAMAA2ADIALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4A
UgBlAHMAbwB1AHIAYwBlAHMAAA9HAF8ANwBfAE4AVQBNAAARRwBfADMAMgBfAE4AVQBNAAARaQB0
AGUAbQBfAG4AdQBtAAAbRwBfADMAMQBfAEQARQBTAEMAUgBJAFAAVAAAG2QAZQBjAGwAXwB0AG8A
dgBnAF8AZABlAHMAABVHAF8AMwAxAF8ARgBJAFIATQBBAAAZbQBhAG4AdQBmAGEAYwB0AHUAcgBl
AHIAAA9HAF8AMwAxAF8AVABNAAAVdAByAGEAZABlAF8AbQBhAHIAawAAFUcAXwAzADEAXwBNAE8A
RABFAEwAAAttAG8AZABlAGwAABlHAF8AMwAxAF8AQQBSAFQASQBDAFUATAAAD2EAcgB0AGkAYwBs
AGUAAA1HAF8AMwAyAF8AMQAADXIAbwB3AF8AaQBkAAANRwBfADMAMwBfADEAABlkAGUAYwBsAF8A
aABzAF8AYwBvAGQAZQAADUcAXwAzADMAXwAyAAAhZABlAGMAbABfAGgAcwBfAGMAbwBkAGUAXwBh
AGQAZAAADUcAXwAzADQAXwAxAAAhYwBvAHUAbgB0AHIAeQBfAGMAbwBkAGUAXwBuAHUAbQAAE0cA
XwAzADQAXwBBAEwARgBBAAAhYwBvAHUAbgB0AHIAeQBfAGMAbwBkAGUAXwBsAGUAdAAAE0cAXwAz
ADQAXwBUAEUAWABUAAAPYwBvAHUAbgB0AHIAeQAAE0cAXwAzADEAXwBRAFUATgBUAAAHcQB0AHkA
ABNHAF8AMwAxAF8AVABFAFgAVAAAIXUAbgBpAHQAXwBtAGUAYQBzAHUAcgBlAG0AZQBuAHQAABdH
AF8AMwAxAF8ARQBEAEMATwBEAEUAABt1AG4AaQB0AF8AYwBvAGQAZQBfAG4AdQBtAAANRwBfADMA
NQBfADEAAAtnAHIAbwBzAHMAAAswAC4AMAAwADAAABdHAF8AMwA1AF8AUwBIAFQAVQBLAEEAAA0w
AC4AMAAwADAAMAAADUcAXwAzADgAXwAxAAAHbgBlAHQAABdHAF8AMwA4AF8AUwBIAFQAVQBLAEEA
ABVHAF8ANAAyAF8AWgBBAFMAVQBNAAALcAByAGkAYwBlAAAJMAAuADAAMAAAG0cAXwA0ADIAXwBa
AEEARQBEAEkATgBJAEMAABlHAF8AMwAxAF8AVABBAFIAQQBTAFUATQAAG2kAdABlAG0AXwBwAGEA
YwBrAGEAZwBlAHMAABlHAF8AMwAxAF8AVABBAFIAQQBMAEYAQQAAGXAAYQBjAGsAaQBuAGcAXwBj
AG8AZABlAAARUABFAFgAVABBAEwARgBBAAANRwA0ADQAMQBfADQAAAswADQAMAAyADEAAA1HADQA
NAAyAF8ANAAAD2kAbgB2AF8AbgB1AG0AAA1HADQANAAzAF8ANAAAEWkAbgB2AF8AZABhAHQAZQAA
D0cANAA0ADEAXwAxADAAAAswADMAMAAxADEAAA9HADQANAAyAF8AMQAwAAAZYwBvAG4AdAByAGEA
YwB0AF8AbgB1AG0AAA9HADQANAAzAF8AMQAwAAAbYwBvAG4AdAByAGEAYwB0AF8AZABhAHQAZQAA
DUcANAA0ADEAXwA2AAAZZABlAGMAbABfAHMAZwByAF8AbgB1AG0AAAswADEAMgAwADYAAA1HADQA
NAAyAF8ANgAADUcANAA0ADMAXwA2AAAbZABlAGMAbABfAHMAZwByAF8AZgByAG8AbQAADUcANAA0
ADYAXwA2AAANRwA0ADQANwBfADYAABdkAGUAYwBsAF8AcwBnAHIAXwB0AG8AAA1HADQANAAxAF8A
NwAAG2QAZQBjAGwAXwBzAGUAcgB0AF8AbgB1AG0AAAswADEAMQA5ADEAAA1HADQANAAyAF8ANwAA
DUcANAA0ADMAXwA3AAAdZABlAGMAbABfAHMAZQByAHQAXwBmAHIAbwBtAAANRwA0ADQANgBfADcA
AA1HADQANAA3AF8ANwAAGWQAZQBjAGwAXwBzAGUAcgB0AF8AdABvAAAJRwBfADMAMQAACU4AQQBN
AEUAAAUxAC0AAR9kAGUAYwBsAF8AYwBvAG0AbQBvAG4AXwBkAGUAcwAABVAATAAACQ0ACgAyAC0A
AQtQAEwAQQBDAEUAAA1QAEwAQQBDAEUAMgAABSwAIAAAAy0AAQlLAE8ATgBUAAAfaQB0AGUAbQBf
AGMAbwBuAHQAYQBpAG4AZQByAHMAAAkNAAoAMwAtAAEFQwBOAAALSwBPAE4AVAAyAAAHIAAgACAA
AB1xAHQAeQBfAGMAbwBuAHQAYQBpAG4AZQByAHMAAAU6ACAAAA1HAF8ANAAyAF8AMQAACUcAXwA0
ADQAABshBBwELgAUBB4EHwQeBBsEHQQVBB0EGAQVBAEVUABBAFIARQBOAFQAXwBQAE8AUwAAFVAA
QQBSAEUATgBUAF8ARwBOAE0AAAlUAE8AVgBHAAAJRwAzADIARwAAE2cAcgBvAHUAcABfAG4AdQBt
AAALRwAzADEAXwAxAAANRwAzADEAXwAxADEAAA1HADMAMQBfADEAMgAAFUcAMwAxAF8AMQA1AF8A
TQBPAEQAAA1HADMAMQBfADEANQAAC0sATwBMAFYATwAAEUMATwBEAEUAXwBFAEQASQAAEU4AQQBN
AEUAXwBFAEQASQAADUcAMwAxAF8AMwA1AAANRwAzADEAXwAzADgAAA1HADMAMQBfADQAMgAAFUkA
TgBWAE8ASQBDAEMATwBTAFQAAAdHADQANAAAC0cANAA0ADAAMwAACUcANAA0ADEAAAlHADQANAAy
AAALRwA0ADQAMgBSAAAJRwA0ADQAMwAAE0cANAA0ADMAXwBGAFIATwBNAAAJRwA0ADQANwAAD0cA
NAA0ADMAXwBUAE8AAAlHADQANAA0AAAJQgBBAEMASwAAAzAAAA1FAEQAXwBUAFkAUAAAC0UARABf
AEkARAAAD0UARABfAFMAVABBAFQAAAlGAEEAQwBFAAAPRABPAEMAVABFAFgAVAAACWMAbwBuAGMA
AACp1/3cYAsVSZOLejAzvTxIAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAiRQHChI5DhI9Ej0S
QQ4SRRJFEUkSTQYAAw4ODg4DIAAOBSACAQ4OBSABCBI9BgABEoClDgsAARUSgK0BElkSPQgVElUC
ElkdHAUgAgEcGBkQAgIVEoCtAR4BFRKArQEeABUSVQIeAB4BBgoCElkdHAcgAgESgKUcBiADAQ4O
DgUgABKAuQUgARJZCAgQAQIeABJZDgMKAQ4EAAARSQQgAQ4OCCACARKApR0cAwoBCAwgARUSgNEB
EkESgKUIIAIBEoC1HRwFAAEOHQ4GIAIBDhJNBCAAEk0DIAAIJQcPEiQSOQ4OEj0SQQ4SRRJFEkUV
EmUBEkEVEWEBEUkRaRFJEk0HFRJVAhJZCB8QAgIVEoDRARUSbQIeAR4AFRKA0QEeABUSVQIeAB4B
BQoCElkIDRUSVQIVEm0CCBJZHRwZEAICFRKA0QEeARUSgNEBHgAVElUCHgAeAQsKAhUSbQIIElkd
HBEQAQEVEoDRAR4AFRKA0QEeAAQKARJBBxUSgNEBEkEIIAAVEmUBEwAGFRJlARJBBCAAEwAKIAAV
EoDRARKA6QQgAQEcAyAAAgQKARFdBwACEV0RXQgICgEVEWEBEUkGFRFhARFJBAoBEUkIAAIRaRFJ
EUkDIAANBSAAEoDxBSAAEoD1BiABEoD5HAMgABwIAAESgP0RgQEFIAASgQUHIAIBDhKBBQwHAxFd
FRFhARFJEUkHAAICEV0RXQgAAhFdEV0RXQUAAgIODgUHAhIoCAwQAQEeABUSgNEBHgAECgESWQMA
AA4FAAIODg4HAAQODg4ODgIGDgcVEm0CCBJZCBUSVQISWRFdFBABAhFdFRKA0QEeABUSVQIeABFd
BxUSVQISWQIYEAECFRKArQEeABUSgK0BHgAVElUCHgACCgcCFRFhARFJEUkIt3pcVhk04IkIiYRd
zYCAzJEEAAAAAAQBAAAAAgYIAwYRFAQGEoCBBAYSgIUDBhIcAwYSIAkGFRJVAhJZHRwDBhI9CAYV
Em0CCBJZAwYSLAgGFRJVAhJZCAkGFRJVAhJZEV0EAAEBDgUAABKAgQUAABKAhQYAAQESgIUEAAAS
HAMAAAEGIAEdHBJZCyABHRwVEm0CCBJZBSABAhJZBSABCBJZBiABEV0SWQUIABKAgQUIABKAhQQI
ABIcCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNT
VF8yZGRmMTM2OTk4ZDM0YTA2OWFmMzE2MjY0M2JmMjA2MgAABQEAAAAAFgEAEUNvcHlyaWdodCBA
ICAyMDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3Bs
YXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3Vy
Y2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5S
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAABiSAAAAAAAAAAAAADKSAAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkkgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUu
ZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAA
AAAAAQAAAAAASAAAAFigAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8A
SQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAeEndHAAAAQB4Sd0cPwAAAAAAAAAEAAAAAgAAAAAAAAAA
AAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwA
YQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMA
AAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMA
bwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0
AGkAbwBuAAAAAABTAFQAXwAyAGQAZABmADEAMwA2ADkAOQA4AGQAMwA0AGEAMAA2ADkAYQBmADMA
MQA2ADIANgA0ADMAYgBmADIAMAA2ADIAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAA
ADEALgAwAC4ANwAzADgAOQAuADEAOAA4ADAAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4A
YQBtAGUAAABTAFQAXwAyAGQAZABmADEAMwA2ADkAOQA4AGQAMwA0AGEAMAA2ADkAYQBmADMAMQA2
ADIANgA0ADMAYgBmADIAMAA2ADIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIA
aQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBn
AGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYA
aQBsAGUAbgBhAG0AZQAAAFMAVABfADIAZABkAGYAMQAzADYAOQA5ADgAZAAzADQAYQAwADYAOQBh
AGYAMwAxADYAMgA2ADQAMwBiAGYAMgAwADYAMgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMA
dABOAGEAbQBlAAAAAABTAFQAXwAyAGQAZABmADEAMwA2ADkAOQA4AGQAMwA0AGEAMAA2ADkAYQBm
ADMAMQA2ADIANgA0ADMAYgBmADIAMAA2ADIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADcAMwA4ADkALgAxADgAOAAwADgAAAAAAEYADwABAEEAcwBzAGUAbQBi
AGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA4ADkALgAxADgAOAAwADgAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAM
AAAARDIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Delete request file"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{B39F137C-3E06-49B9-BF7A-37811F8A488F}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Delete request file"
          DTS:ThreadHint="4">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_20d805f1ea644a19a60abfc518354d5c"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::excelpath">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Settings.get_Default():ST_20d805f1ea644a19a60abfc518354d5c.Properties.Sett" +
    "ings")]

namespace ST_20d805f1ea644a19a60abfc518354d5c.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion
using System.IO;

namespace ST_20d805f1ea644a19a60abfc518354d5c
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string path = (string)Dts.Variables["User::excelpath"].Value;
			
            if (File.Exists(path) && path.Contains(@"\\10.10.0.28\alta\Robot\Temp"))
            {
                File.Delete(path);
            }
			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_20d805f1ea644a19a60abfc518354d5c.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{e908a586-7798-49cb-8acb-a56255081cec}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_20d805f1ea644a19a60abfc518354d5c</RootNamespace>
    <AssemblyName>ST_20d805f1ea644a19a60abfc518354d5c</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_20d805f1ea644a19a60abfc518354d5c</msb:CodeName>
		<msb:DisplayName>ST_20d805f1ea644a19a60abfc518354d5c</msb:DisplayName>
		<msb:ProjectId>{D88DDAA4-3E89-4A68-B7AD-30F676B8DBCB}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_20d805f1ea644a19a60abfc518354d5c.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_20d805f1ea644a19a60abfc518354d5c")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_20d805f1ea644a19a60abfc518354d5c")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_20d805f1ea644a19a60abfc518354d5c.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_20d805f1ea644a19a60abfc518354d5c.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAHmYV14AAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAJi4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANQtAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAALA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAI
LgAAAAAAAEgAAAACAAUADCEAABAMAAABAAAAAAAAABwtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAgBIAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKdBsAAAEKBigUAAAKLBMGciEAAHBvFQAACiwGBigWAAAKAigQAAAKFm8XAAAKKh4CKBgAAAoq
HgIoGQAACiqufgEAAAQtHnJbAABw0AMAAAIoGgAACm8bAAAKcxwAAAqAAQAABH4BAAAEKhp+AgAA
BCoeAoACAAAEKhp+AwAABCoeAigdAAAKKi5zCAAABoADAAAEKgAAQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAA1AMAACN+AABABAAAgAUAACNTdHJpbmdzAAAAAMAJAADQAAAAI1VT
AJAKAAAQAAAAI0dVSUQAAACgCgAAcAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMAFgAA
AQAAAB8AAAAFAAAABgAAAAkAAAABAAAAHQAAAAIAAAAQAAAAAQAAAAIAAAADAAAABAAAAAEAAAAE
AAAAAQAAAAEAAAAAAIkDAQAAAAAABgA7AlkEBgDKAlkEBgCHAUYEDwDNBAAABgC0AQcEBgAeAgcE
BgD/AQcEBgCxAgcEBgBbAgcEBgB0AgcEBgDLAQcEBgDmAfgCCgCPAjgDCgD/ADgDBgDBA7oDBgBq
AUYEBgBQBboDBgApBHkEBgAZBPIDDgAzAXMDDgCbAXMDDgAbAd0DBgBPAVkECgBhAzgDEgAPBaoA
EgB4AKoABgASA7oDBgClAAoABgDKALoDBgCBALoDBgB2BQcEAAAAAAEAAAAAAAEAAQABABAA0gNE
ADkAAQABAAAAEACABNwERQABAAMAAAEQABkF3ARZAAMABwADAQAAOwUAAD0ABAAKABEAxgNxABEA
7wB1ABEAaAB5AAYGMwB9AFaAKwWAAFaAzwCAAFAgAAAAAIYA2AMGAAEApCAAAAAAhhg5BAYAAQCs
IAAAAACDGDkEBgABALQgAAAAAJMIJQSEAAEA4CAAAAAAkwjXAIkAAQDnIAAAAACTCOMAjgABAO8g
AAAAAJYIVwWUAAIA9iAAAAAAhhg5BAYAAgD+IAAAAACRGD8EmQACAAAAAQDyAgkAOQQBABEAOQQG
ABkAOQQKACkAOQQQADEAOQQQADkAOQQQAEEAOQQQAEkAOQQQAFEAOQQQAFkAOQQQAGEAOQQQAGkA
OQQGAIEAOQQGAKkAOQQVALkAOQQGAHEAMwUfAMEACwUkAMkAsQMpANEA6AIvAOEASQUzANkAIgU4
AOEASAE9AMEAYwUBAHEAOQQGAIkAOQQGAOkAkwBCAOkAcgVJAJEAOQROALEAOQQGAAgAFABnAAgA
GABsACkAcwDUAC4ACwCsAC4AEwC1AC4AGwDUAC4AIwDdAC4AKwAGAS4AMwAGAS4AOwAGAS4AQwDd
AC4ASwAMAS4AUwAGAS4AWwAjAUMAYwBsAEkAcwDUAGEAewBsAGMAawBsABsAAwABAAQAAwAAACkE
nQAAAPcAogAAAFsFpwACAAQAAwACAAUABQABAAYABQACAAcABwAEgAAAAQAAAMIcFF4AAAAAAABE
AAAABAAAAAAAAAAAAAAAVQA7AAAAAAANAAAAAAAAAAAAAABeABkDAAAAAAQAAAAAAAAAAAAAAFUA
ugMAAAAADQAAAAAAAAAAAAAAXgAUAAAAAAAAAAAAAQAAAIoEAAAFAAIAAAAAPE1vZHVsZT4AU3lz
dGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29ybGliAFNU
XzIwZDgwNWYxZWE2NDRhMTlhNjBhYmZjNTE4MzU0ZDVjAGRlZmF1bHRJbnN0YW5jZQBWYXJpYWJs
ZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJl
c291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0
aW5nc0Jhc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUARGVsZXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0
cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBF
ZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRy
YWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1
cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25S
ZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUA
dmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZl
ci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2Ny
aXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzIwZDgwNWYxZWE2NDRhMTlh
NjBhYmZjNTE4MzU0ZDVjLmRsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3Jp
cHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5S
ZWZsZWN0aW9uAEN1bHR1cmVJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIALmN0b3IALmNjdG9yAFN5
c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5S
ZXNvdXJjZXMAU1RfMjBkODA1ZjFlYTY0NGExOWE2MGFiZmM1MTgzNTRkNWMuUHJvcGVydGllcy5S
ZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzIwZDgwNWYxZWE2NDRhMTlhNjBh
YmZjNTE4MzU0ZDVjLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0aW5ncwBDb250YWlucwBT
dWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBFeGlzdHMAT2JqZWN0AGdldF9EZWZhdWx0AHNl
dF9UYXNrUmVzdWx0AGdldF9Bc3NlbWJseQAAAB9VAHMAZQByADoAOgBlAHgAYwBlAGwAcABhAHQA
aAAAOVwAXAAxADAALgAxADAALgAwAC4AMgA4AFwAYQBsAHQAYQBcAFIAbwBiAG8AdABcAFQAZQBt
AHAAAHFTAFQAXwAyADAAZAA4ADAANQBmADEAZQBhADYANAA0AGEAMQA5AGEANgAwAGEAYgBmAGMA
NQAxADgAMwA1ADQAZAA1AGMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBl
AHMAAAAAAJ83fQZgVWFCjsXnWchK28MABCABAQgDIAABBSABARERBCABAQ4FIAEBEVEDBwEOBCAA
EmEEIAASZQUgARJpHAMgABwEAAECDgQgAQIOBAABAQ4GAAESdRF5BCAAEn0GIAIBDhJ9CLd6XFYZ
NOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEkkDBhJNAwYSEAIGCAMGERQEAAASSQQAABJNBQABARJN
BAAAEhADAAABBAgAEkkECAASTQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9u
VGhyb3dzAQgBAAIAAAAAACgBACNTVF8yMGQ4MDVmMWVhNjQ0YTE5YTYwYWJmYzUxODM1NGQ1YwAA
BQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAALQAAADOyu++
AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNp
b249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRl
MDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFE
ULQAAAD8LQAAAAAAAAAAAAAWLgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC4AAAAAAAAAAAAA
AABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQAUXsIcAAABABRewhw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfADIAMABkADgAMAA1AGYAMQBlAGEANgA0ADQAYQAxADkAYQA2ADAAYQBiAGYAYwA1
ADEAOAAzADUANABkADUAYwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA3ADMANgAyAC4AMgA0ADAAOAA0AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfADIAMABkADgAMAA1AGYAMQBlAGEANgA0ADQAYQAxADkAYQA2ADAAYQBiAGYAYwA1ADEA
OAAzADUANABkADUAYwAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAwAAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AMgAwAGQAOAAwADUAZgAxAGUAYQA2ADQANABhADEAOQBhADYAMABhAGIA
ZgBjADUAMQA4ADMANQA0AGQANQBjAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADIAMABkADgAMAA1AGYAMQBlAGEANgA0ADQAYQAxADkAYQA2ADAAYQBiAGYA
YwA1ADEAOAAzADUANABkADUAYwAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANwAzADYAMgAuADIANAAwADgANAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAzADYAMgAuADIANAAwADgANAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAoPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Development notification"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:DelayValidation="True"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{e633c87a-8985-4050-bca4-4c4ad91346a9}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Development notification"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="FileAttachments">@[User::excelpath]</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="ToLine">@[User::sendermail]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{38CB1C84-40CD-41BC-8A75-875E136A6E39}"
              SendMailTask:From="declaration@eltransplus.ru"
              SendMailTask:BCC="declaration@eltransplus.ru"
              SendMailTask:Subject="Необходимо доработать заявку" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask">
              <SendMailTask:Attachments
                SendMailTask:FileName="\\10.10.0.28\alta\Robot\Data\шаблон.xlsx" />
            </SendMailTask:SendMailTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Failure notification"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:DelayValidation="True"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{52280C02-ED4E-4A53-96A0-34EFACB1511B}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Failure notification"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="FileAttachments">@[User::excelpath] + "|" + "\\\\10.10.0.28\\alta\\Robot\\Data\\шаблон.xlsx"</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="ToLine">@[User::sendermail]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{38CB1C84-40CD-41BC-8A75-875E136A6E39}"
              SendMailTask:From="declaration@eltransplus.ru"
              SendMailTask:BCC="declaration@eltransplus.ru"
              SendMailTask:Subject="Ошибка обработки таблицы"
              SendMailTask:MessageSource="При обработке таблицы произошла ошибка. Проверьте соответствие таблицы вложенному шаблону (порядок и названия заголовков, название листа, отсутствие других листов в файле)." xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask">
              <SendMailTask:Attachments
                SendMailTask:FileName="\\10.10.0.28\alta\Robot\Data\шаблон.xlsx|\\10.10.0.28\alta\Robot\Data\шаблон.xlsx" />
            </SendMailTask:SendMailTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Fill new Excel"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Задача потока данных"
          DTS:DTSID="{78738B72-E012-400D-8AEE-9C84C89224B2}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Fill new Excel"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Process files\Fill new Excel\Contents query"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;10"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Contents query"
                  version="10">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System;
using System.Data.SqlClient;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    IDTSConnectionManager100 connMgr;
    SqlConnection sqlConn;
    SqlDataReader sqlReader;

    public override void AcquireConnections(object Transaction)
    {
        connMgr = this.Connections.phpuserconn;
        sqlConn = (SqlConnection)connMgr.AcquireConnection(null);
    }
    public override void PreExecute()
    {
        
        base.PreExecute();

        string query = @"SELECT 
       COALESCE([article], '')
      ,COALESCE([model], '')
      ,COALESCE([manufacturer], '')
      ,COALESCE([trade_mark], '')
      ,COALESCE([country], '')
      ,COALESCE([qty], 0)
      ,COALESCE([unit_measurement], '')
      ,COALESCE([price], 0)
      ,COALESCE([currency], '')
      ,COALESCE([net], 0)
      ,COALESCE([gross], 0)
      ,COALESCE([packages_qty], 0)
      ,COALESCE([inv_num], '')
      ,[inv_date]
      ,COALESCE([contract_num], '')
      ,[contract_date]
      ,COALESCE([cargoid], '')     
      ,COALESCE([decl_hs_code], '')
      ,COALESCE([decl_hs_code_add], '')
      ,COALESCE([decl_common_des], '')
      ,COALESCE([decl_tovg_des], '')
      ,COALESCE([decl_sert_num], '')
      ,[decl_sert_from]
      ,[decl_sert_to]
      ,COALESCE([decl_sgr_num], '')
      ,[decl_sgr_from]
      ,[decl_sgr_to]
      ,[request_container]
      FROM [automation].[dbo].[request_contents_temp]
       ORDER BY [row_id] ASC";

        SqlCommand cmd = new SqlCommand(query, sqlConn);
        sqlReader = cmd.ExecuteReader();
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        sqlReader.Close();
    }

    public override void CreateNewOutputRows()
    {
        while (sqlReader.Read())
        {
            {
                Output0Buffer.AddRow();
                Output0Buffer.АРТИКУЛ = sqlReader.GetString(0);
                Output0Buffer.МОДЕЛЬ = sqlReader.GetString(1);
                Output0Buffer.ПРОИЗВОДИТЕЛЬ = sqlReader.GetString(2);
                Output0Buffer.ТОРГОВАЯМАРКА = sqlReader.GetString(3);
                Output0Buffer.СТРАНАПРОИСХОЖДЕНИЯ = sqlReader.GetString(4);
                Output0Buffer.КОЛИЧЕСТВО = sqlReader.GetDecimal(5);
                Output0Buffer.ЕДИНИЦАИЗМЕРЕНИЯ = sqlReader.GetString(6);
                Output0Buffer.СТОИМОСТЬ = sqlReader.GetDecimal(7);
                Output0Buffer.ВАЛЮТА = sqlReader.GetString(8);
                Output0Buffer.НЕТТО = sqlReader.GetDecimal(9);
                Output0Buffer.БРУТТО = sqlReader.GetDecimal(10);
                Output0Buffer.КОЛВОМЕСТ = sqlReader.GetDecimal(11);
                Output0Buffer.ИНВОЙС = sqlReader.GetString(12);
                Output0Buffer.ДАТАИНВОЙСА = sqlReader.IsDBNull(13) ? null : sqlReader.GetDateTime(13).ToString("dd.MM.yyyy");
                Output0Buffer.КОНТРАКТ = sqlReader.GetString(14);
                Output0Buffer.ДАТАКОНТРАКТА = sqlReader.IsDBNull(15) ? null : sqlReader.GetDateTime(15).ToString("dd.MM.yyyy");
                Output0Buffer.НОМЕРГРУЗА = sqlReader.GetString(16);
                Output0Buffer.КОДТНВЭД = sqlReader.GetString(17);
                Output0Buffer.ДОПКОД = sqlReader.GetString(18);
                Output0Buffer.ОПИСАНИЕОБЩЕЕ = sqlReader.GetString(19);
                Output0Buffer.ОПИСАНИЕТОВАРА = sqlReader.GetString(20);
                Output0Buffer.СЕРТИФИКАТДСНОМЕР = sqlReader.GetString(21);
                Output0Buffer.СЕРТИФИКАТДСОТ = sqlReader.IsDBNull(22) ? null : sqlReader.GetDateTime(22).ToString("dd.MM.yyyy");
                Output0Buffer.СЕРТИФИКАТДСДО = sqlReader.IsDBNull(23) ? null : sqlReader.GetDateTime(23).ToString("dd.MM.yyyy");
                Output0Buffer.СГРНОМЕР = sqlReader.GetString(24);
                Output0Buffer.СГРОТ = sqlReader.IsDBNull(25) ? null : sqlReader.GetDateTime(25).ToString("dd.MM.yyyy");
                Output0Buffer.СГРДО = sqlReader.IsDBNull(26) ? null : sqlReader.GetDateTime(26).ToString("dd.MM.yyyy");
                Output0Buffer.КОНТЕЙНЕР = sqlReader.GetString(27);
            }
        }
    }

    public override void ReleaseConnections()
    {
        connMgr.ReleaseConnection(sqlConn);
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String СГРДО
    {
        set
        {
            this[0] = value;
        }
    }
    public bool СГРДО_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String СГРОТ
    {
        set
        {
            this[1] = value;
        }
    }
    public bool СГРОТ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String СГРНОМЕР
    {
        set
        {
            this[2] = value;
        }
    }
    public bool СГРНОМЕР_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String СЕРТИФИКАТДСДО
    {
        set
        {
            this[3] = value;
        }
    }
    public bool СЕРТИФИКАТДСДО_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String СЕРТИФИКАТДСОТ
    {
        set
        {
            this[4] = value;
        }
    }
    public bool СЕРТИФИКАТДСОТ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String СЕРТИФИКАТДСНОМЕР
    {
        set
        {
            this[5] = value;
        }
    }
    public bool СЕРТИФИКАТДСНОМЕР_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ОПИСАНИЕТОВАРА
    {
        set
        {
            this[6] = value;
        }
    }
    public bool ОПИСАНИЕТОВАРА_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ОПИСАНИЕОБЩЕЕ
    {
        set
        {
            this[7] = value;
        }
    }
    public bool ОПИСАНИЕОБЩЕЕ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ДОПКОД
    {
        set
        {
            this[8] = value;
        }
    }
    public bool ДОПКОД_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КОДТНВЭД
    {
        set
        {
            this[9] = value;
        }
    }
    public bool КОДТНВЭД_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String НОМЕРГРУЗА
    {
        set
        {
            this[10] = value;
        }
    }
    public bool НОМЕРГРУЗА_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ДАТАКОНТРАКТА
    {
        set
        {
            this[11] = value;
        }
    }
    public bool ДАТАКОНТРАКТА_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КОНТРАКТ
    {
        set
        {
            this[12] = value;
        }
    }
    public bool КОНТРАКТ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ДАТАИНВОЙСА
    {
        set
        {
            this[13] = value;
        }
    }
    public bool ДАТАИНВОЙСА_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ИНВОЙС
    {
        set
        {
            this[14] = value;
        }
    }
    public bool ИНВОЙС_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КОЛВОМЕСТ
    {
        set
        {
            this[15] = value;
        }
    }
    public bool КОЛВОМЕСТ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal БРУТТО
    {
        set
        {
            this[16] = value;
        }
    }
    public bool БРУТТО_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal НЕТТО
    {
        set
        {
            this[17] = value;
        }
    }
    public bool НЕТТО_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ВАЛЮТА
    {
        set
        {
            this[18] = value;
        }
    }
    public bool ВАЛЮТА_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal СТОИМОСТЬ
    {
        set
        {
            this[19] = value;
        }
    }
    public bool СТОИМОСТЬ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ЕДИНИЦАИЗМЕРЕНИЯ
    {
        set
        {
            this[20] = value;
        }
    }
    public bool ЕДИНИЦАИЗМЕРЕНИЯ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КОЛИЧЕСТВО
    {
        set
        {
            this[21] = value;
        }
    }
    public bool КОЛИЧЕСТВО_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String СТРАНАПРОИСХОЖДЕНИЯ
    {
        set
        {
            this[22] = value;
        }
    }
    public bool СТРАНАПРОИСХОЖДЕНИЯ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ТОРГОВАЯМАРКА
    {
        set
        {
            this[23] = value;
        }
    }
    public bool ТОРГОВАЯМАРКА_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ПРОИЗВОДИТЕЛЬ
    {
        set
        {
            this[24] = value;
        }
    }
    public bool ПРОИЗВОДИТЕЛЬ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String МОДЕЛЬ
    {
        set
        {
            this[25] = value;
        }
    }
    public bool МОДЕЛЬ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(25);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String АРТИКУЛ
    {
        set
        {
            this[26] = value;
        }
    }
    public bool АРТИКУЛ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(26);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КОНТЕЙНЕР
    {
        set
        {
            this[27] = value;
        }
    }
    public bool КОНТЕЙНЕР_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(27);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9956234074fd4bcfa816054b8e69a98a.Properties.Settings.get_Default():SC_9956234074fd4bcfa816054b8e69a98a.Properties.Sett" +
    "ings")]

namespace SC_9956234074fd4bcfa816054b8e69a98a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 phpuserconn
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"phpuser_conn").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_9956234074fd4bcfa816054b8e69a98a</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_9956234074fd4bcfa816054b8e69a98a</msb:DisplayName>
		<msb:ProjectId>{0A4BD701-365B-4F1E-91D0-4CC774C9C257}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_9956234074fd4bcfa816054b8e69a98a.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_9956234074fd4bcfa816054b8e69a98a.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4D87C9F5-E290-451E-95BC-21098B511030}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_9956234074fd4bcfa816054b8e69a98a</RootNamespace>
    <AssemblyName>SC_9956234074fd4bcfa816054b8e69a98a</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_9956234074fd4bcfa816054b8e69a98a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_9956234074fd4bcfa816054b8e69a98a")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9956234074fd4bcfa816054b8e69a98a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9956234074fd4bcfa816054b8e69a98a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_9956234074fd4bcfa816054b8e69a98a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_9956234074fd4bcfa816054b8e69a98a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_9956234074fd4bcfa816054b8e69a98a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_9956234074fd4bcfa816054b8e69a98a.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAKzOcF4AAAAAAAAAAOAAIiALATAAADIAAAAIAAAAAAAAulEA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGhRAABPAAAAAGAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAwDEAAAAgAAAAMgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAYAAAAAYAAAA0AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAOgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACc
UQAAAAAAAEgAAAACAAUAjCkAACQnAAABAAAAAAAAALBQAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKYCAnsEAAAEb0kAAAZ9AQAABAICewEAAAQUbxAAAAp0DwAA
AX0CAAAEKgAAEzACACQAAAABAAARAigRAAAKcgEAAHACewIAAARzEgAACgoCBm8TAAAKfQMAAAQq
SgIoFAAACgJ7AwAABG8VAAAKKgATMAMAcgMAAAIAABE4XAMAAAJ7BgAABG9AAAAGAnsGAAAEAnsD
AAAEFm8WAAAKbzwAAAYCewYAAAQCewMAAAQXbxYAAApvOgAABgJ7BgAABAJ7AwAABBhvFgAACm84
AAAGAnsGAAAEAnsDAAAEGW8WAAAKbzYAAAYCewYAAAQCewMAAAQabxYAAApvNAAABgJ7BgAABAJ7
AwAABBtvFwAACm8yAAAGAnsGAAAEAnsDAAAEHG8WAAAKbzAAAAYCewYAAAQCewMAAAQdbxcAAApv
LgAABgJ7BgAABAJ7AwAABB5vFgAACm8sAAAGAnsGAAAEAnsDAAAEHwlvFwAACm8qAAAGAnsGAAAE
AnsDAAAEHwpvFwAACm8oAAAGAnsGAAAEAnsDAAAEHwtvFwAACm8mAAAGAnsGAAAEAnsDAAAEHwxv
FgAACm8kAAAGAnsGAAAEAnsDAAAEHw1vGAAACi0cAnsDAAAEHw1vGQAACgoSAHJ0BwBwKBoAAAor
ARRvIgAABgJ7BgAABAJ7AwAABB8ObxYAAApvIAAABgJ7BgAABAJ7AwAABB8PbxgAAAotHAJ7AwAA
BB8PbxkAAAoKEgBydAcAcCgaAAAKKwEUbx4AAAYCewYAAAQCewMAAAQfEG8WAAAKbxwAAAYCewYA
AAQCewMAAAQfEW8WAAAKbxoAAAYCewYAAAQCewMAAAQfEm8WAAAKbxgAAAYCewYAAAQCewMAAAQf
E28WAAAKbxYAAAYCewYAAAQCewMAAAQfFG8WAAAKbxQAAAYCewYAAAQCewMAAAQfFW8WAAAKbxIA
AAYCewYAAAQCewMAAAQfFm8YAAAKLRwCewMAAAQfFm8ZAAAKChIAcnQHAHAoGgAACisBFG8QAAAG
AnsGAAAEAnsDAAAEHxdvGAAACi0cAnsDAAAEHxdvGQAACgoSAHJ0BwBwKBoAAAorARRvDgAABgJ7
BgAABAJ7AwAABB8YbxYAAApvDAAABgJ7BgAABAJ7AwAABB8ZbxgAAAotHAJ7AwAABB8ZbxkAAAoK
EgBydAcAcCgaAAAKKwEUbwoAAAYCewYAAAQCewMAAAQfGm8YAAAKLRwCewMAAAQfGm8ZAAAKChIA
cnQHAHAoGgAACisBFG8IAAAGAnsGAAAEAnsDAAAEHxtvFgAACm8+AAAGAnsDAAAEbxsAAAo6lPz/
/ypKAnsBAAAEAnsCAAAEbxwAAAoqHgIoQwAABioqAgMEBSgdAAAKKiYCFgMoHgAACipaAywIAhYo
HwAACipyigcAcHMgAAAKeiYCFwMoHgAACipaAywIAhcoHwAACipyigcAcHMgAAAKeiYCGAMoHgAA
CipaAywIAhgoHwAACipyigcAcHMgAAAKeiYCGQMoHgAACipaAywIAhkoHwAACipyigcAcHMgAAAK
eiYCGgMoHgAACipaAywIAhooHwAACipyigcAcHMgAAAKeiYCGwMoHgAACipaAywIAhsoHwAACipy
igcAcHMgAAAKeiYCHAMoHgAACipaAywIAhwoHwAACipyigcAcHMgAAAKeiYCHQMoHgAACipaAywI
Ah0oHwAACipyigcAcHMgAAAKeiYCHgMoHgAACipaAywIAh4oHwAACipyigcAcHMgAAAKeioCHwkD
KB4AAAoqXgMsCQIfCSgfAAAKKnKKBwBwcyAAAAp6KgIfCgMoHgAACipeAywJAh8KKB8AAAoqcooH
AHBzIAAACnoqAh8LAygeAAAKKl4DLAkCHwsoHwAACipyigcAcHMgAAAKeioCHwwDKB4AAAoqXgMs
CQIfDCgfAAAKKnKKBwBwcyAAAAp6KgIfDQMoHgAACipeAywJAh8NKB8AAAoqcooHAHBzIAAACnoq
Ah8OAygeAAAKKl4DLAkCHw4oHwAACipyigcAcHMgAAAKej4CHw8DjBcAAAEoHgAACipeAywJAh8P
KB8AAAoqcooHAHBzIAAACno+Ah8QA4wXAAABKB4AAAoqXgMsCQIfECgfAAAKKnKKBwBwcyAAAAp6
PgIfEQOMFwAAASgeAAAKKl4DLAkCHxEoHwAACipyigcAcHMgAAAKeioCHxIDKB4AAAoqXgMsCQIf
EigfAAAKKnKKBwBwcyAAAAp6PgIfEwOMFwAAASgeAAAKKl4DLAkCHxMoHwAACipyigcAcHMgAAAK
eioCHxQDKB4AAAoqXgMsCQIfFCgfAAAKKnKKBwBwcyAAAAp6PgIfFQOMFwAAASgeAAAKKl4DLAkC
HxUoHwAACipyigcAcHMgAAAKeioCHxYDKB4AAAoqXgMsCQIfFigfAAAKKnKKBwBwcyAAAAp6KgIf
FwMoHgAACipeAywJAh8XKB8AAAoqcooHAHBzIAAACnoqAh8YAygeAAAKKl4DLAkCHxgoHwAACipy
igcAcHMgAAAKeioCHxkDKB4AAAoqXgMsCQIfGSgfAAAKKnKKBwBwcyAAAAp6KgIfGgMoHgAACipe
AywJAh8aKB8AAAoqcooHAHBzIAAACnoqAh8bAygeAAAKKl4DLAkCHxsoHwAACipyigcAcHMgAAAK
eh4CKCEAAAoqHgIoIgAACioeAigjAAAKKn4CKCQAAAoCAnNIAAAGfQQAAAQCAnNKAAAGfQUAAAQq
BipuAnsGAAAELBICewYAAARvQQAABgIUfQYAAAQqAAAAEzAFAEkAAAADAAARFgorLgQGlA4EcicI
AHAoJQAACjMZAgUGmgIEBpQoJgAACg4EcwcAAAZ9BgAABAYXWAoGAzLOAm9HAAAGAm9EAAAGAihF
AAAGKjoCKCcAAAoCA30HAAAEKoICewcAAARvKAAACm8pAAAKcjkIAHBvKgAACm8rAAAKKjoCKCcA
AAoCA30IAAAEKh4CKCcAAAoqrn4JAAAELR5yUwgAcNAHAAACKCwAAApvLQAACnMuAAAKgAkAAAR+
CQAABCoafgoAAAQqHgKACgAABCoafgsAAAQqHgIoLwAACiouc1AAAAaACwAABCoAAEJTSkIBAAEA
AAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAABANAAAjfgAAfA0AAMwOAAAjU3RyaW5ncwAAAABI
HAAAyAgAACNVUwAQJQAAEAAAACNHVUlEAAAAICUAAAQCAAAjQmxvYgAAAAAAAAACAAABVxWiAQkB
AAAA+gEzABYAAAEAAAAnAAAACAAAAAsAAABRAAAAQwAAAC8AAAAQAAAAAwAAAAQAAAA8AAAAPQAA
AAEAAAAHAAAAAQAAAAAA3AMBAAAAAAAGAL8CEAoGAFMDEAoGAAsC/QkPAIQKAAAGADgCCggGAKIC
CggGAIMCCggGADoDCggGAN8CCggGAPgCCggGAE8CCggGAGoCjgMKABMDUgEOAFYAjQkSAGAIbAsS
ABMJbAsGAEoLngcSAOwAbAsGAEkBngcKAFYJUgEWAEcJUgEKAKcIUgEGAL4DngcKAKALUgEGAO4B
/QkGAGcJMAoGAJsI6QcaAL4BxgMaAB8CxgMaAKAB1AcGANMBEAoSAAYJiAgGAG4IngceAAEAtQke
ABoAtQkeAD0AtQkGAHMBngcGAAcBngcGAAUMCggAAAAAbwAAAAAAAQABAAEAEACxBwAAEAABAAEA
AQAQADkJAABRAAQABwABABAAggsAAGEABABDAAEAEAAUCwAARQAHAEgAAQAQAMIKAABFAAgASgAA
ABAANwqTCkUACQBLAAABEADxCpMKeQALAE8AAQDeCbwAAQC8B8AAAQAvCcQABgAUC8gABgDCCswA
BgA5CdAAAQCQC9QAAQCQC9QAEQClB9gAEQCQAdwAEQD3AOAAUCAAAAAAxgD6ClUAAQB8IAAAAADG
AHEDBgACAKwgAAAAAMYAfAMGAAIAwCAAAAAAxgA2CwYAAgA+JAAAAADGAA0LBgACAFEkAAAAAIYY
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
SQdzAGMBaQdzAGMBIAAxAGoAAwABAAUAOQAHADoACAA8AAAAJw0aAQAAcwUeAQAA8A0aAQAAewYe
AQAAdw0aAQAA3wUeAQAANg0aAQAAiQUeAQAA/w0aAQAAkQYeAQAAjA0aAQAA+wUeAQAASgwaAQAA
VwQeAQAA3AwaAQAAEwUeAQAAtgwaAQAA3wQeAQAAxwwaAQAA9wQeAQAAEgwaAQAAEQQeAQAAhgwa
AQAAoQQeAQAA2w0aAQAAXwYeAQAAawwaAQAAfwQeAQAAyg0aAQAARwYeAQAAIA4iAQAAuQYeAQAA
Zg0iAQAAxwUeAQAAVw0iAQAAsQUeAQAApQwaAQAAxwQeAQAAZw4iAQAAFQceAQAAqQ4aAQAAZQce
AQAADg0iAQAAUwUeAQAAfg4aAQAAMwceAQAAKwwaAQAAMQQeAQAASA4aAQAA7wYeAQAANw4aAQAA
1wYeAQAA+wwaAQAAOQUeAQAAsw0aAQAAKQYeAQAAyAcnAQAAZwksAQAAmAExAQAAZAs2AQEACAAD
AAEACQAFAAEACgAHAAEACwAJAAEADAALAAEADQANAAEADgAPAAEADwARAAEAEAATAAEAEQAVAAEA
EgAXAAEAEwAZAAEAFAAbAAEAFQAdAAEAFgAfAAEAFwAhAAEAGAAjAAEAGQAlAAEAGgAnAAEAGwAp
AAEAHAArAAEAHQAtAAEAHgAvAAEAHwAxAAEAIAAzAAEAIQA1AAEAIgA3AAEAIwA5AAEAJAA7AAEA
JQA9AAEAJgA/AAEAJwBBAAEAKABDAAEAKQBFAAEAKgBHAAEAKwBJAAEALABLAAEALQBNAAEALgBP
AAEALwBRAAEAMABTAAEAMQBVAAEAMgBXAAEAMwBZAAEANABbAAEANQBdAAEANgBfAAEANwBhAAEA
OABjAAEAOQBlAAEAOgBnAAEAOwBpAAEAPABrAAEAPQBtAAEAPgBvAAEAPwBxAAIASQBzAAIATAB1
AAIATQB3AAEATgB3AAIATwB5AASAAAABAAAAAAAAAAAAAAAAAIQAAAAEAAAAAAAAAAAAAACqAMoA
AAAAAA0AAAAAAAAAAAAAALMAsAsAAAAADQAAAAAAAAAAAAAAswC/CAAAAAAEAAAAAAAAAAAAAACq
AKgAAAAAAA0AAAAAAAAAAAAAALMAzQsAAAAABAAAAAAAAAAAAAAAqgCeBwAAAAANAAAAAAAAAAAA
AACzAOIIAAAAAAAAAAABAAAAQQoAAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTUnVu
dGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uMTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbjEwMABJRFRT
Q29ubmVjdGlvbk1hbmFnZXIxMDAAPE1vZHVsZT4AR2V0T3V0cHV0SUQAU0NfOTk1NjIzNDA3NGZk
NGJjZmE4MTYwNTRiOGU2OWE5OGEAU3lzdGVtLkRhdGEAZ2V0X0NvbXBvbmVudE1ldGFEYXRhAG1z
Y29ybGliAFJlYWQATWFya091dHB1dHNGaW5pc2hlZABTcWxDb21tYW5kAGRlZmF1bHRJbnN0YW5j
ZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBHZXRSdW50aW1lQ29ubmVjdGlv
bkJ5TmFtZQBHZXREYXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBUeXBl
AGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBBcHBsaWNhdGlvblNldHRp
bmdzQmFzZQBDbG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJp
YnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJh
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVs
YXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJp
Z2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2Vt
Ymx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVj
dXRlAFBvc3RFeGVjdXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcA
R2V0U3RyaW5nAEdldERlY2ltYWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNDXzk5NTYyMzQwNzRm
ZDRiY2ZhODE2MDU0YjhlNjlhOThhLmRsbABJc0RCTnVsbABzZXRf0J3QntCc0JXQoNCT0KDQo9CX
0JBfSXNOdWxsAHNldF/QotCe0KDQk9Ce0JLQkNCv0JzQkNCg0JrQkF9Jc051bGwAc2V0X9Ce0J/Q
mNCh0JDQndCY0JXQotCe0JLQkNCg0JBfSXNOdWxsAHNldF/QlNCQ0KLQkNCY0J3QktCe0JnQodCQ
X0lzTnVsbABzZXRf0JTQkNCi0JDQmtCe0J3QotCg0JDQmtCi0JBfSXNOdWxsAHNldF/QktCQ0JvQ
rtCi0JBfSXNOdWxsAHNldF/QlNCe0J/QmtCe0JRfSXNOdWxsAHNldF/QmtCe0JTQotCd0JLQrdCU
X0lzTnVsbABzZXRf0J7Qn9CY0KHQkNCd0JjQldCe0JHQqdCV0JVfSXNOdWxsAHNldF/QkNCg0KLQ
mNCa0KPQm19Jc051bGwAc2V0X9Ca0J7Qm9CY0KfQldCh0KLQktCeX0lzTnVsbABzZXRf0KHQk9Cg
0JTQnl9Jc051bGwAc2V0X9Ch0JXQoNCi0JjQpNCY0JrQkNCi0JTQodCU0J5fSXNOdWxsAHNldF/Q
ndCV0KLQotCeX0lzTnVsbABzZXRf0JHQoNCj0KLQotCeX0lzTnVsbABzZXRf0KHQk9Cg0J3QntCc
0JXQoF9Jc051bGwAc2V0X9Ch0JXQoNCi0JjQpNCY0JrQkNCi0JTQodCd0J7QnNCV0KBfSXNOdWxs
AHNldF/QmtCe0J3QotCV0JnQndCV0KBfSXNOdWxsAHNldF/QmNCd0JLQntCZ0KFfSXNOdWxsAHNl
dF/QmtCe0J3QotCg0JDQmtCiX0lzTnVsbABzZXRf0KHQk9Cg0J7Qol9Jc051bGwAc2V0X9Ch0JXQ
oNCi0JjQpNCY0JrQkNCi0JTQodCe0KJfSXNOdWxsAHNldF/QmtCe0JvQktCe0JzQldCh0KJfSXNO
dWxsAHNldF/QnNCe0JTQldCb0KxfSXNOdWxsAHNldF/Qn9Cg0J7QmNCX0JLQntCU0JjQotCV0JvQ
rF9Jc051bGwAc2V0X9Ch0KLQntCY0JzQntCh0KLQrF9Jc051bGwAc2V0X9Ch0KLQoNCQ0J3QkNCf
0KDQntCY0KHQpdCe0JbQlNCV0J3QmNCvX0lzTnVsbABzZXRf0JXQlNCY0J3QmNCm0JDQmNCX0JzQ
ldCg0JXQndCY0K9fSXNOdWxsAFNldE51bGwAc2V0X0l0ZW0AU3lzdGVtAHJlc291cmNlTWFuAFNj
cmlwdE1haW4Ac3FsQ29ubgBnZXRfcGhwdXNlcmNvbm4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AZ2V0X1J1bnRp
bWVDb25uZWN0aW9uQ29sbGVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBSZWxlYXNlQ29ubmVjdGlv
bgBTcWxDb25uZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29t
bW9uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAARGJE
YXRhUmVhZGVyAFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBzcWxSZWFkZXIAT3V0cHV0MEJ1
ZmZlcgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRf
Q29ubmVjdGlvbk1hbmFnZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVy
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIAY29ubk1ncgAuY3RvcgAu
Y2N0b3IAT3V0cHV0SURzAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxl
clNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfOTk1NjIzNDA3NGZkNGJjZmE4MTYwNTRiOGU2
OWE5OGEuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNDXzk5
NTYyMzQwNzRmZDRiY2ZhODE2MDU0YjhlNjlhOThhLlByb3BlcnRpZXMAVmFyaWFibGVzAEJ1ZmZl
ckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBBY3F1aXJlQ29ubmVjdGlv
bnMAUmVsZWFzZUNvbm5lY3Rpb25zAEJ1ZmZlcnMARmluaXNoT3V0cHV0cwBDcmVhdGVOZXdPdXRw
dXRSb3dzAE9iamVjdABTZXRFbmRPZlJvd3NldABnZXRfRGVmYXVsdABTeXN0ZW0uRGF0YS5TcWxD
bGllbnQAVXNlckNvbXBvbmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBlbGluZUhvc3QA
UHJpbWVPdXRwdXQAQWRkUm93AGdldF9Bc3NlbWJseQBzZXRf0J3QntCc0JXQoNCT0KDQo9CX0JAA
c2V0X9Ci0J7QoNCT0J7QktCQ0K/QnNCQ0KDQmtCQAHNldF/QntCf0JjQodCQ0J3QmNCV0KLQntCS
0JDQoNCQAHNldF/QlNCQ0KLQkNCY0J3QktCe0JnQodCQAHNldF/QlNCQ0KLQkNCa0J7QndCi0KDQ
kNCa0KLQkABzZXRf0JLQkNCb0K7QotCQAHNldF/QlNCe0J/QmtCe0JQAc2V0X9Ca0J7QlNCi0J3Q
ktCt0JQAc2V0X9Ce0J/QmNCh0JDQndCY0JXQntCR0KnQldCVAHNldF/QkNCg0KLQmNCa0KPQmwBz
ZXRf0JrQntCb0JjQp9CV0KHQotCS0J4Ac2V0X9Ch0JPQoNCU0J4Ac2V0X9Ch0JXQoNCi0JjQpNCY
0JrQkNCi0JTQodCU0J4Ac2V0X9Cd0JXQotCi0J4Ac2V0X9CR0KDQo9Ci0KLQngBzZXRf0KHQk9Cg
0J3QntCc0JXQoABzZXRf0KHQldCg0KLQmNCk0JjQmtCQ0KLQlNCh0J3QntCc0JXQoABzZXRf0JrQ
ntCd0KLQldCZ0J3QldCgAHNldF/QmNCd0JLQntCZ0KEAc2V0X9Ca0J7QndCi0KDQkNCa0KIAc2V0
X9Ch0JPQoNCe0KIAc2V0X9Ch0JXQoNCi0JjQpNCY0JrQkNCi0JTQodCe0KIAc2V0X9Ca0J7Qm9CS
0J7QnNCV0KHQogBzZXRf0JzQntCU0JXQm9CsAHNldF/Qn9Cg0J7QmNCX0JLQntCU0JjQotCV0JvQ
rABzZXRf0KHQotCe0JjQnNCe0KHQotCsAHNldF/QodCi0KDQkNCd0JDQn9Cg0J7QmNCh0KXQntCW
0JTQldCd0JjQrwBzZXRf0JXQlNCY0J3QmNCm0JDQmNCX0JzQldCg0JXQndCY0K8AAAAAh3FTAEUA
TABFAEMAVAAgAAoAIAAgACAAIAAgACAAIABDAE8AQQBMAEUAUwBDAEUAKABbAGEAcgB0AGkAYwBs
AGUAXQAsACAAJwAnACkACgAgACAAIAAgACAAIAAsAEMATwBBAEwARQBTAEMARQAoAFsAbQBvAGQA
ZQBsAF0ALAAgACcAJwApAAoAIAAgACAAIAAgACAALABDAE8AQQBMAEUAUwBDAEUAKABbAG0AYQBu
AHUAZgBhAGMAdAB1AHIAZQByAF0ALAAgACcAJwApAAoAIAAgACAAIAAgACAALABDAE8AQQBMAEUA
UwBDAEUAKABbAHQAcgBhAGQAZQBfAG0AYQByAGsAXQAsACAAJwAnACkACgAgACAAIAAgACAAIAAs
AEMATwBBAEwARQBTAEMARQAoAFsAYwBvAHUAbgB0AHIAeQBdACwAIAAnACcAKQAKACAAIAAgACAA
IAAgACwAQwBPAEEATABFAFMAQwBFACgAWwBxAHQAeQBdACwAIAAwACkACgAgACAAIAAgACAAIAAs
AEMATwBBAEwARQBTAEMARQAoAFsAdQBuAGkAdABfAG0AZQBhAHMAdQByAGUAbQBlAG4AdABdACwA
IAAnACcAKQAKACAAIAAgACAAIAAgACwAQwBPAEEATABFAFMAQwBFACgAWwBwAHIAaQBjAGUAXQAs
ACAAMAApAAoAIAAgACAAIAAgACAALABDAE8AQQBMAEUAUwBDAEUAKABbAGMAdQByAHIAZQBuAGMA
eQBdACwAIAAnACcAKQAKACAAIAAgACAAIAAgACwAQwBPAEEATABFAFMAQwBFACgAWwBuAGUAdABd
ACwAIAAwACkACgAgACAAIAAgACAAIAAsAEMATwBBAEwARQBTAEMARQAoAFsAZwByAG8AcwBzAF0A
LAAgADAAKQAKACAAIAAgACAAIAAgACwAQwBPAEEATABFAFMAQwBFACgAWwBwAGEAYwBrAGEAZwBl
AHMAXwBxAHQAeQBdACwAIAAwACkACgAgACAAIAAgACAAIAAsAEMATwBBAEwARQBTAEMARQAoAFsA
aQBuAHYAXwBuAHUAbQBdACwAIAAnACcAKQAKACAAIAAgACAAIAAgACwAWwBpAG4AdgBfAGQAYQB0
AGUAXQAKACAAIAAgACAAIAAgACwAQwBPAEEATABFAFMAQwBFACgAWwBjAG8AbgB0AHIAYQBjAHQA
XwBuAHUAbQBdACwAIAAnACcAKQAKACAAIAAgACAAIAAgACwAWwBjAG8AbgB0AHIAYQBjAHQAXwBk
AGEAdABlAF0ACgAgACAAIAAgACAAIAAsAEMATwBBAEwARQBTAEMARQAoAFsAYwBhAHIAZwBvAGkA
ZABdACwAIAAnACcAKQAgACAAIAAgACAACgAgACAAIAAgACAAIAAsAEMATwBBAEwARQBTAEMARQAo
AFsAZABlAGMAbABfAGgAcwBfAGMAbwBkAGUAXQAsACAAJwAnACkACgAgACAAIAAgACAAIAAsAEMA
TwBBAEwARQBTAEMARQAoAFsAZABlAGMAbABfAGgAcwBfAGMAbwBkAGUAXwBhAGQAZABdACwAIAAn
ACcAKQAKACAAIAAgACAAIAAgACwAQwBPAEEATABFAFMAQwBFACgAWwBkAGUAYwBsAF8AYwBvAG0A
bQBvAG4AXwBkAGUAcwBdACwAIAAnACcAKQAKACAAIAAgACAAIAAgACwAQwBPAEEATABFAFMAQwBF
ACgAWwBkAGUAYwBsAF8AdABvAHYAZwBfAGQAZQBzAF0ALAAgACcAJwApAAoAIAAgACAAIAAgACAA
LABDAE8AQQBMAEUAUwBDAEUAKABbAGQAZQBjAGwAXwBzAGUAcgB0AF8AbgB1AG0AXQAsACAAJwAn
ACkACgAgACAAIAAgACAAIAAsAFsAZABlAGMAbABfAHMAZQByAHQAXwBmAHIAbwBtAF0ACgAgACAA
IAAgACAAIAAsAFsAZABlAGMAbABfAHMAZQByAHQAXwB0AG8AXQAKACAAIAAgACAAIAAgACwAQwBP
AEEATABFAFMAQwBFACgAWwBkAGUAYwBsAF8AcwBnAHIAXwBuAHUAbQBdACwAIAAnACcAKQAKACAA
IAAgACAAIAAgACwAWwBkAGUAYwBsAF8AcwBnAHIAXwBmAHIAbwBtAF0ACgAgACAAIAAgACAAIAAs
AFsAZABlAGMAbABfAHMAZwByAF8AdABvAF0ACgAgACAAIAAgACAAIAAsAFsAcgBlAHEAdQBlAHMA
dABfAGMAbwBuAHQAYQBpAG4AZQByAF0ACgAgACAAIAAgACAAIABGAFIATwBNACAAWwBhAHUAdABv
AG0AYQB0AGkAbwBuAF0ALgBbAGQAYgBvAF0ALgBbAHIAZQBxAHUAZQBzAHQAXwBjAG8AbgB0AGUA
bgB0AHMAXwB0AGUAbQBwAF0ACgAgACAAIAAgACAAIAAgAE8AUgBEAEUAUgAgAEIAWQAgAFsAcgBv
AHcAXwBpAGQAXQAgAEEAUwBDAAEVZABkAC4ATQBNAC4AeQB5AHkAeQAAgJtJAHMATgB1AGwAbAAg
AHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEA
bABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBv
AGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AABFPAHUAdABwAHUAdAAgADAAABlwAGgAcAB1AHMA
ZQByAF8AYwBvAG4AbgAAcVMAQwBfADkAOQA1ADYAMgAzADQAMAA3ADQAZgBkADQAYgBjAGYAYQA4
ADEANgAwADUANABiADgAZQA2ADkAYQA5ADgAYQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAAAAAAqq3q1V5aL02s67TiH/XG9wAEIAEBCAMgAAEFIAEBEREEIAEBDgUg
AQERcQQgARwcBAcBEkkGIAIBDhI9BCAAEkEEBwERTQQgAQ4IBSABEV0IBCABAggFIAERTQgEIAEO
DgMgAAIEIAEBHAkgAwESVR0IElkFIAIBCBwDBwEIBgACCBJZDgUgAR0ICAUgABKAiQUgABKAjQYg
ARKAkQ4EIAASOQgAARKAlRGAmQUgABKAnQcgAgEOEoCdCLd6XFYZNOCJCImEXc2AgMyRAwYSOQMG
Ej0DBhJBAwYSFAMGEhgDBhIMAwYSYQMGEmkDBhJtAwYSIAQgAQECBSABARFdCyAEAQgdCB0SVRJZ
BSABARJhBAAAEmkEAAASbQUAAQESbQQAABIgAwAAAQMoAA4DKAACBCgAEV0EKAASOQQIABJpBAgA
Em0ECAASIAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAo
AQAjU0NfOTk1NjIzNDA3NGZkNGJjZmE4MTYwNTRiOGU2OWE5OGEAAAUBAAAAABYBABFDb3B5cmln
aHQgQCAgMjAyMAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtE
aXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUEAQAAAAAAALQAAADOyu++AQAAAJEAAABsU3lz
dGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwg
Q3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5S
ZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACQUQAAAAAA
AAAAAACqUQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnFEAAAAAAAAAAAAAAABfQ29yRGxsTWFp
bgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAADsAwAAAAAA
AAAAAADsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
AAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAETAMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgAB
AAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAA
AAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwA5ADkANQA2
ADIAMwA0ADAANwA0AGYAZAA0AGIAYwBmAGEAOAAxADYAMAA1ADQAYgA4AGUANgA5AGEAOQA4AGEA
AAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAABwACgAAQBJ
AG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADkAOQA1ADYAMgAzADQAMAA3ADQAZgBkADQA
YgBjAGYAYQA4ADEANgAwADUANABiADgAZQA2ADkAYQA5ADgAYQAuAGQAbABsAAAASAASAAEATABl
AGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAA
MgAwAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBP
AHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AOQA5ADUANgAyADMANAAwADcA
NABmAGQANABiAGMAZgBhADgAMQA2ADAANQA0AGIAOABlADYAOQBhADkAOABhAC4AZABsAGwAAABo
ACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfADkAOQA1ADYAMgAzADQAMAA3ADQA
ZgBkADQAYgBjAGYAYQA4ADEANgAwADUANABiADgAZQA2ADkAYQA5ADgAYQAAADQACAABAFAAcgBv
AGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0A
YgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAvDEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_9956234074fd4bcfa816054b8e69a98a</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">4526609dcfb2d3b3c551bc571ffd59c3</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">e71d60dac9156218f62ff927ec0047cc4cded69b</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Process files\Fill new Excel\Contents query.Connections[phpuser_conn]"
                      connectionManagerID="{76382CC5-2C1A-4767-958A-4AFC8DEA4336}:external"
                      connectionManagerRefId="Project.ConnectionManagers[10.10.0.28.automation.phpuser]"
                      name="phpuser_conn" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР ДО]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР ДО]"
                          name="СГР ДО" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР ОТ]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР ОТ]"
                          name="СГР ОТ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР НОМЕР]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР НОМЕР]"
                          name="СГР НОМЕР" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС ДО]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС ДО]"
                          name="СЕРТИФИКАТ/ДС ДО" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          name="СЕРТИФИКАТ/ДС ОТ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          name="СЕРТИФИКАТ/ДС НОМЕР" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ОПИСАНИЕ ТОВАРА]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ОПИСАНИЕ ТОВАРА]"
                          name="ОПИСАНИЕ ТОВАРА" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          dataType="wstr"
                          length="4000"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          name="ОПИСАНИЕ ОБЩЕЕ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДОП.КОД]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДОП.КОД]"
                          name="ДОП.КОД" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОД ТНВЭД]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОД ТНВЭД]"
                          name="КОД ТНВЭД" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[НОМЕР ГРУЗА]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[НОМЕР ГРУЗА]"
                          name="НОМЕР ГРУЗА" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДАТА КОНТРАКТА]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДАТА КОНТРАКТА]"
                          name="ДАТА КОНТРАКТА" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОНТРАКТ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОНТРАКТ]"
                          name="КОНТРАКТ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДАТА ИНВОЙСА]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДАТА ИНВОЙСА]"
                          name="ДАТА ИНВОЙСА" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ИНВОЙС]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ИНВОЙС]"
                          name="ИНВОЙС" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОЛ-ВО МЕСТ]"
                          dataType="decimal"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОЛ-ВО МЕСТ]"
                          name="КОЛ-ВО МЕСТ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[БРУТТО]"
                          dataType="decimal"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[БРУТТО]"
                          name="БРУТТО" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[НЕТТО]"
                          dataType="decimal"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[НЕТТО]"
                          name="НЕТТО" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ВАЛЮТА]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ВАЛЮТА]"
                          name="ВАЛЮТА" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СТОИМОСТЬ]"
                          dataType="decimal"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СТОИМОСТЬ]"
                          name="СТОИМОСТЬ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          name="ЕДИНИЦА ИЗМЕРЕНИЯ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОЛИЧЕСТВО]"
                          dataType="decimal"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОЛИЧЕСТВО]"
                          name="КОЛИЧЕСТВО" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          name="СТРАНА ПРОИСХОЖДЕНИЯ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ТОРГОВАЯ МАРКА]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ТОРГОВАЯ МАРКА]"
                          name="ТОРГОВАЯ МАРКА" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ПРОИЗВОДИТЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ПРОИЗВОДИТЕЛЬ]"
                          name="ПРОИЗВОДИТЕЛЬ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[МОДЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[МОДЕЛЬ]"
                          name="МОДЕЛЬ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[АРТИКУЛ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[АРТИКУЛ]"
                          name="АРТИКУЛ" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОНТЕЙНЕР]"
                          dataType="wstr"
                          length="100"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОНТЕЙНЕР]"
                          name="КОНТЕЙНЕР" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Process files\Fill new Excel\New template"
                  componentClassID="Microsoft.ExcelDestination"
                  contactInfo="Назначение &quot;Excel&quot;;Корпорация Майкрософт. Microsoft SQL Server. (C) Корпорация Майкрософт (Microsoft Corporation). Все права защищены. http://www.microsoft.com/sql/support;0"
                  description="Назначение &quot;Excel&quot;"
                  name="New template"
                  usesDispositions="true">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Время ожидания команды, в секундах. Величина 0 означает неограниченное время ожидания."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Указывает имя объекта базы данных, используемого для открытия набора строк."
                      name="OpenRowset">шаблон$</property>
                    <property
                      dataType="System.String"
                      description="Указывает переменную, содержащую имя объекта базы данных, используемого для открытия набора строк."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="Команда SQL для выполнения."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.Int32"
                      description="Указывает используемый режим доступа к базе данных."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.Boolean"
                      description="Указывает, должны ли значения в столбцах идентификаторов копироваться в назначение. Если свойство имеет значение false, значения в столбцах идентификаторов будут созданы автоматически в месте назначения. Применяется только в том случае, если включена быстрая загрузка."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Указывает, будут ли в назначение вставляться значения NULL для столбцов, содержащих их. Значение false показывает, что если столбец имеет значение NULL, то в назначение будет вставлено его значение по умолчанию. Применяется только в случае, если включена быстрая загрузка."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Задает параметры быстрой загрузки. Применяется только в том случае, если включена быстрая загрузка."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Задает, когда выдаются сообщения о фиксации транзакции в ходе вставки данных. Значение 0 задает, что по окончании вставки данных будет выдано одно сообщение о фиксации транзакции. Применяется только в том случае, если включена быстрая загрузка."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Process files\Fill new Excel\New template.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[Диспетчер соединений Excel]"
                      connectionManagerRefId="Package.ConnectionManagers[Диспетчер соединений Excel]"
                      description="Соединение OLE DB среды выполнения, используемое для доступа к базе данных."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;]"
                      errorOrTruncationOperation="Вставить"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="Вход назначения &quot;Excel&quot;">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СГР ДО]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="СГР ДО"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СГР ДО]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР ДО]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СГР ОТ]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="СГР ОТ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СГР ОТ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР ОТ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СГР НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="СГР НОМЕР"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СГР НОМЕР]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СГР НОМЕР]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ДО]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="СЕРТИФИКАТ/ДС ДО"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ДО]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС ДО]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="СЕРТИФИКАТ/ДС ОТ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ОТ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС ОТ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="СЕРТИФИКАТ/ДС НОМЕР"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС НОМЕР]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СЕРТИФИКАТ/ДС НОМЕР]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ОПИСАНИЕ ТОВАРА]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="ОПИСАНИЕ ТОВАРА"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ТОВАРА]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ОПИСАНИЕ ТОВАРА]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="ОПИСАНИЕ ОБЩЕЕ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ОБЩЕЕ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ОПИСАНИЕ ОБЩЕЕ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[КОД ТНВЭД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="КОД ТНВЭД"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОД ТНВЭД]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОД ТНВЭД]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[НОМЕР ГРУЗА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="НОМЕР ГРУЗА"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[НОМЕР ГРУЗА]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[НОМЕР ГРУЗА]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ДАТА КОНТРАКТА]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ДАТА КОНТРАКТА"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ДАТА КОНТРАКТА]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДАТА КОНТРАКТА]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[КОНТРАКТ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="КОНТРАКТ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОНТРАКТ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОНТРАКТ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ДАТА ИНВОЙСА]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ДАТА ИНВОЙСА"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ДАТА ИНВОЙСА]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДАТА ИНВОЙСА]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ИНВОЙС]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ИНВОЙС"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ИНВОЙС]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ИНВОЙС]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[КОЛ-ВО МЕСТ]"
                          cachedDataType="decimal"
                          cachedName="КОЛ-ВО МЕСТ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОЛ-ВО МЕСТ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОЛ-ВО МЕСТ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[БРУТТО]"
                          cachedDataType="decimal"
                          cachedName="БРУТТО"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[БРУТТО]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[БРУТТО]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[НЕТТО]"
                          cachedDataType="decimal"
                          cachedName="НЕТТО"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[НЕТТО]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[НЕТТО]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ВАЛЮТА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ВАЛЮТА"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ВАЛЮТА]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ВАЛЮТА]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СТОИМОСТЬ]"
                          cachedDataType="decimal"
                          cachedName="СТОИМОСТЬ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СТОИМОСТЬ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СТОИМОСТЬ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ЕДИНИЦА ИЗМЕРЕНИЯ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[КОЛИЧЕСТВО]"
                          cachedDataType="decimal"
                          cachedName="КОЛИЧЕСТВО"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОЛИЧЕСТВО]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОЛИЧЕСТВО]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="СТРАНА ПРОИСХОЖДЕНИЯ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ТОРГОВАЯ МАРКА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ТОРГОВАЯ МАРКА"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ТОРГОВАЯ МАРКА]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ТОРГОВАЯ МАРКА]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ПРОИЗВОДИТЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ПРОИЗВОДИТЕЛЬ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ПРОИЗВОДИТЕЛЬ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ПРОИЗВОДИТЕЛЬ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[МОДЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="МОДЕЛЬ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[МОДЕЛЬ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[МОДЕЛЬ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[АРТИКУЛ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="АРТИКУЛ"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[АРТИКУЛ]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[АРТИКУЛ]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[ДОП.КОД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ДОП.КОД"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ДОП#КОД]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[ДОП.КОД]" />
                        <inputColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].Columns[КОНТЕЙНЕР]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="КОНТЕЙНЕР"
                          externalMetadataColumnId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОНТЕЙНЕР]"
                          lineageId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0].Columns[КОНТЕЙНЕР]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[АРТИКУЛ]"
                          dataType="wstr"
                          length="255"
                          name="АРТИКУЛ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[МОДЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          name="МОДЕЛЬ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ПРОИЗВОДИТЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          name="ПРОИЗВОДИТЕЛЬ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ТОРГОВАЯ МАРКА]"
                          dataType="wstr"
                          length="255"
                          name="ТОРГОВАЯ МАРКА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          name="СТРАНА ПРОИСХОЖДЕНИЯ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОЛИЧЕСТВО]"
                          dataType="r8"
                          name="КОЛИЧЕСТВО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          name="ЕДИНИЦА ИЗМЕРЕНИЯ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СТОИМОСТЬ]"
                          dataType="r8"
                          name="СТОИМОСТЬ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ВАЛЮТА]"
                          dataType="wstr"
                          length="255"
                          name="ВАЛЮТА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[НЕТТО]"
                          dataType="wstr"
                          length="255"
                          name="НЕТТО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[БРУТТО]"
                          dataType="wstr"
                          length="255"
                          name="БРУТТО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОЛ-ВО МЕСТ]"
                          dataType="r8"
                          name="КОЛ-ВО МЕСТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ИНВОЙС]"
                          dataType="wstr"
                          length="255"
                          name="ИНВОЙС" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ДАТА ИНВОЙСА]"
                          dataType="date"
                          name="ДАТА ИНВОЙСА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОНТРАКТ]"
                          dataType="wstr"
                          length="255"
                          name="КОНТРАКТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ДАТА КОНТРАКТА]"
                          dataType="date"
                          name="ДАТА КОНТРАКТА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[НОМЕР ГРУЗА]"
                          dataType="wstr"
                          length="255"
                          name="НОМЕР ГРУЗА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОД ТНВЭД]"
                          dataType="wstr"
                          length="255"
                          name="КОД ТНВЭД" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ДОП#КОД]"
                          dataType="wstr"
                          length="255"
                          name="ДОП#КОД" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ОБЩЕЕ]"
                          dataType="nText"
                          name="ОПИСАНИЕ ОБЩЕЕ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ТОВАРА]"
                          dataType="nText"
                          name="ОПИСАНИЕ ТОВАРА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС НОМЕР]"
                          dataType="wstr"
                          length="255"
                          name="СЕРТИФИКАТ/ДС НОМЕР" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ОТ]"
                          dataType="date"
                          name="СЕРТИФИКАТ/ДС ОТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ДО]"
                          dataType="date"
                          name="СЕРТИФИКАТ/ДС ДО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СГР НОМЕР]"
                          dataType="wstr"
                          length="255"
                          name="СГР НОМЕР" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СГР ОТ]"
                          dataType="date"
                          name="СГР ОТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[СГР ДО]"
                          dataType="date"
                          name="СГР ДО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F29]"
                          dataType="wstr"
                          length="255"
                          name="F29" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F30]"
                          dataType="wstr"
                          length="255"
                          name="F30" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F31]"
                          dataType="wstr"
                          length="255"
                          name="F31" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F32]"
                          dataType="wstr"
                          length="255"
                          name="F32" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F33]"
                          dataType="wstr"
                          length="255"
                          name="F33" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F34]"
                          dataType="wstr"
                          length="255"
                          name="F34" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F35]"
                          dataType="wstr"
                          length="255"
                          name="F35" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F36]"
                          dataType="wstr"
                          length="255"
                          name="F36" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F37]"
                          dataType="wstr"
                          length="255"
                          name="F37" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F38]"
                          dataType="wstr"
                          length="255"
                          name="F38" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F39]"
                          dataType="wstr"
                          length="255"
                          name="F39" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F40]"
                          dataType="wstr"
                          length="255"
                          name="F40" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F41]"
                          dataType="wstr"
                          length="255"
                          name="F41" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F42]"
                          dataType="wstr"
                          length="255"
                          name="F42" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F43]"
                          dataType="wstr"
                          length="255"
                          name="F43" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F44]"
                          dataType="wstr"
                          length="255"
                          name="F44" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F45]"
                          dataType="wstr"
                          length="255"
                          name="F45" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F46]"
                          dataType="wstr"
                          length="255"
                          name="F46" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F47]"
                          dataType="wstr"
                          length="255"
                          name="F47" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F48]"
                          dataType="wstr"
                          length="255"
                          name="F48" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F49]"
                          dataType="wstr"
                          length="255"
                          name="F49" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F50]"
                          dataType="wstr"
                          length="255"
                          name="F50" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F51]"
                          dataType="wstr"
                          length="255"
                          name="F51" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[КОНТЕЙНЕР]"
                          dataType="wstr"
                          length="255"
                          name="КОНТЕЙНЕР" />
                        <externalMetadataColumn
                          refId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;].ExternalColumns[F52]"
                          dataType="wstr"
                          length="255"
                          name="F52" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Process files\Fill new Excel\New template.Outputs[Вывод ошибок назначения &quot;Excel&quot;]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Вывод ошибок назначения &quot;Excel&quot;"
                      synchronousInputId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\New template.Outputs[Вывод ошибок назначения &quot;Excel&quot;].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Process files\Fill new Excel\New template.Outputs[Вывод ошибок назначения &quot;Excel&quot;].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Process files\Fill new Excel\New template.Outputs[Вывод ошибок назначения &quot;Excel&quot;].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Process files\Fill new Excel\New template.Outputs[Вывод ошибок назначения &quot;Excel&quot;].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Process files\Fill new Excel.Paths[Output 0]"
                  endId="Package\Process files\Fill new Excel\New template.Inputs[Вход назначения &quot;Excel&quot;]"
                  name="Output 0"
                  startId="Package\Process files\Fill new Excel\Contents query.Outputs[Output 0]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Insert request_contents"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:DelayValidation="True"
          DTS:Description="Задача потока данных"
          DTS:DTSID="{6d1d2e5e-53a7-475f-9d8a-ac143960956c}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Insert request_contents"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Process files\Insert request_contents.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DelayValidation="True"
              DTS:DTSID="{D7771547-0C9D-42B3-88BB-993828CD2CE6}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="Свойство распространения события"
                  DTS:DTSID="{689FDC81-2AC6-4EE7-A68F-4199E8DBD053}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
            <DTS:EventHandler
              DTS:refId="Package\Process files\Insert request_contents.EventHandlers[OnTaskFailed]"
              DTS:CreationName="OnTaskFailed"
              DTS:DTSID="{1188D600-CA11-42DF-9395-AD7431D333B7}"
              DTS:EventID="0"
              DTS:EventName="OnTaskFailed"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="Свойство распространения события"
                  DTS:DTSID="{F288BFCD-E118-4CEA-BCDA-72A826CFDE27}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Process files\Insert request_contents\Excel request load"
                  componentClassID="Microsoft.ExcelSource"
                  contactInfo="Источник &quot;Excel&quot;;Корпорация Майкрософт. Microsoft SQL Server. (C) Корпорация Майкрософт (Microsoft Corporation). Все права защищены. http://www.microsoft.com/sql/support;1"
                  description="Источник &quot;Excel&quot;"
                  name="Excel request load"
                  usesDispositions="true"
                  validateExternalMetadata="False"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Время ожидания команды, в секундах. Величина 0 означает неограниченное время ожидания."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Указывает имя объекта базы данных, используемого для открытия набора строк."
                      name="OpenRowset">шаблон$</property>
                    <property
                      dataType="System.String"
                      description="Указывает переменную, содержащую имя объекта базы данных, используемого для открытия набора строк."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="Команда SQL для выполнения."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.String"
                      description="Переменная, содержащая команду SQL для выполнения."
                      name="SqlCommandVariable"></property>
                    <property
                      dataType="System.Int32"
                      description="Указывает используемый режим доступа к базе данных."
                      name="AccessMode"
                      typeConverter="AccessMode">0</property>
                    <property
                      dataType="System.String"
                      description="Сопоставление между параметрами в команде SQL и переменными."
                      name="ParameterMapping"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Process files\Insert request_contents\Excel request load.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[Диспетчер соединений Excel]"
                      connectionManagerRefId="Package.ConnectionManagers[Диспетчер соединений Excel]"
                      description="Соединение OLE DB среды выполнения, используемое для доступа к базе данных."
                      name="OleDbConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;]"
                      name="Выход источника &quot;Excel&quot;">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[АРТИКУЛ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[АРТИКУЛ]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[АРТИКУЛ]"
                          name="АРТИКУЛ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[МОДЕЛЬ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[МОДЕЛЬ]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[МОДЕЛЬ]"
                          name="МОДЕЛЬ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ПРОИЗВОДИТЕЛЬ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ПРОИЗВОДИТЕЛЬ]"
                          length="500"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ПРОИЗВОДИТЕЛЬ]"
                          name="ПРОИЗВОДИТЕЛЬ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ТОРГОВАЯ МАРКА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ТОРГОВАЯ МАРКА]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ТОРГОВАЯ МАРКА]"
                          name="ТОРГОВАЯ МАРКА"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОЛИЧЕСТВО]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОЛИЧЕСТВО]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОЛИЧЕСТВО]"
                          name="КОЛИЧЕСТВО"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          name="ЕДИНИЦА ИЗМЕРЕНИЯ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СТОИМОСТЬ]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СТОИМОСТЬ]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СТОИМОСТЬ]"
                          name="СТОИМОСТЬ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ВАЛЮТА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ВАЛЮТА]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ВАЛЮТА]"
                          name="ВАЛЮТА"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[НЕТТО]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[НЕТТО]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[НЕТТО]"
                          name="НЕТТО"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[БРУТТО]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[БРУТТО]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[БРУТТО]"
                          name="БРУТТО"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОЛ-ВО МЕСТ]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОЛ-ВО МЕСТ]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОЛ-ВО МЕСТ]"
                          name="КОЛ-ВО МЕСТ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ИНВОЙС]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ИНВОЙС]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ИНВОЙС]"
                          name="ИНВОЙС"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДАТА ИНВОЙСА]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ДАТА ИНВОЙСА]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДАТА ИНВОЙСА]"
                          name="ДАТА ИНВОЙСА"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОНТРАКТ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОНТРАКТ]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОНТРАКТ]"
                          name="КОНТРАКТ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДАТА КОНТРАКТА]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ДАТА КОНТРАКТА]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДАТА КОНТРАКТА]"
                          name="ДАТА КОНТРАКТА"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[НОМЕР ГРУЗА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[НОМЕР ГРУЗА]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[НОМЕР ГРУЗА]"
                          name="НОМЕР ГРУЗА"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          name="СТРАНА ПРОИСХОЖДЕНИЯ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОД ТНВЭД]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОД ТНВЭД]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОД ТНВЭД]"
                          name="КОД ТНВЭД"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДОП#КОД]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ДОП#КОД]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДОП#КОД]"
                          name="ДОП#КОД"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС НОМЕР]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          name="СЕРТИФИКАТ/ДС НОМЕР"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ОТ]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          name="СЕРТИФИКАТ/ДС ОТ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ДО]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ДО]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ДО]"
                          name="СЕРТИФИКАТ/ДС ДО"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР НОМЕР]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СГР НОМЕР]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР НОМЕР]"
                          name="СГР НОМЕР"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР ОТ]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СГР ОТ]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР ОТ]"
                          name="СГР ОТ"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР ДО]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СГР ДО]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР ДО]"
                          name="СГР ДО"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ТОВАРА]"
                          dataType="nText"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ТОВАРА]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ТОВАРА]"
                          name="ОПИСАНИЕ ТОВАРА"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          dataType="nText"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ОБЩЕЕ]"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          name="ОПИСАНИЕ ОБЩЕЕ"
                          truncationRowDisposition="FailComponent" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОНТЕЙНЕР]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОНТЕЙНЕР]"
                          length="100"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОНТЕЙНЕР]"
                          name="КОНТЕЙНЕР"
                          truncationRowDisposition="IgnoreFailure" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[F41]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F41]"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[F41]"
                          name="F41"
                          truncationRowDisposition="FailComponent" />
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[АРТИКУЛ]"
                          dataType="wstr"
                          length="255"
                          name="АРТИКУЛ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[МОДЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          name="МОДЕЛЬ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ПРОИЗВОДИТЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          name="ПРОИЗВОДИТЕЛЬ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ТОРГОВАЯ МАРКА]"
                          dataType="wstr"
                          length="255"
                          name="ТОРГОВАЯ МАРКА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОЛИЧЕСТВО]"
                          dataType="r8"
                          name="КОЛИЧЕСТВО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          name="ЕДИНИЦА ИЗМЕРЕНИЯ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СТОИМОСТЬ]"
                          dataType="r8"
                          name="СТОИМОСТЬ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ВАЛЮТА]"
                          dataType="wstr"
                          length="255"
                          name="ВАЛЮТА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[НЕТТО]"
                          dataType="wstr"
                          length="255"
                          name="НЕТТО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[БРУТТО]"
                          dataType="wstr"
                          length="255"
                          name="БРУТТО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОЛ-ВО МЕСТ]"
                          dataType="r8"
                          name="КОЛ-ВО МЕСТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ИНВОЙС]"
                          dataType="wstr"
                          length="255"
                          name="ИНВОЙС" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ДАТА ИНВОЙСА]"
                          dataType="date"
                          name="ДАТА ИНВОЙСА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОНТРАКТ]"
                          dataType="wstr"
                          length="255"
                          name="КОНТРАКТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ДАТА КОНТРАКТА]"
                          dataType="date"
                          name="ДАТА КОНТРАКТА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[НОМЕР ГРУЗА]"
                          dataType="wstr"
                          length="255"
                          name="НОМЕР ГРУЗА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          name="СТРАНА ПРОИСХОЖДЕНИЯ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОД ТНВЭД]"
                          dataType="wstr"
                          length="255"
                          name="КОД ТНВЭД" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ДОП#КОД]"
                          dataType="wstr"
                          length="255"
                          name="ДОП#КОД" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС НОМЕР]"
                          dataType="wstr"
                          length="255"
                          name="СЕРТИФИКАТ/ДС НОМЕР" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ОТ]"
                          dataType="date"
                          name="СЕРТИФИКАТ/ДС ОТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СЕРТИФИКАТ/ДС ДО]"
                          dataType="date"
                          name="СЕРТИФИКАТ/ДС ДО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СГР НОМЕР]"
                          dataType="wstr"
                          length="255"
                          name="СГР НОМЕР" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СГР ОТ]"
                          dataType="date"
                          name="СГР ОТ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[СГР ДО]"
                          dataType="date"
                          name="СГР ДО" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F29]"
                          dataType="wstr"
                          length="255"
                          name="F29" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F30]"
                          dataType="wstr"
                          length="255"
                          name="F30" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F31]"
                          dataType="wstr"
                          length="255"
                          name="F31" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F32]"
                          dataType="wstr"
                          length="255"
                          name="F32" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F33]"
                          dataType="wstr"
                          length="255"
                          name="F33" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F34]"
                          dataType="wstr"
                          length="255"
                          name="F34" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F35]"
                          dataType="wstr"
                          length="255"
                          name="F35" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F36]"
                          dataType="wstr"
                          length="255"
                          name="F36" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F37]"
                          dataType="wstr"
                          length="255"
                          name="F37" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F38]"
                          dataType="wstr"
                          length="255"
                          name="F38" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F39]"
                          dataType="wstr"
                          length="255"
                          name="F39" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F40]"
                          dataType="wstr"
                          length="255"
                          name="F40" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F41]"
                          dataType="wstr"
                          length="255"
                          name="F41" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F42]"
                          dataType="wstr"
                          length="255"
                          name="F42" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F43]"
                          dataType="wstr"
                          length="255"
                          name="F43" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F44]"
                          dataType="wstr"
                          length="255"
                          name="F44" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F45]"
                          dataType="wstr"
                          length="255"
                          name="F45" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F46]"
                          dataType="wstr"
                          length="255"
                          name="F46" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F47]"
                          dataType="wstr"
                          length="255"
                          name="F47" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F48]"
                          dataType="wstr"
                          length="255"
                          name="F48" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F49]"
                          dataType="wstr"
                          length="255"
                          name="F49" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F50]"
                          dataType="wstr"
                          length="255"
                          name="F50" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ТОВАРА]"
                          dataType="nText"
                          name="ОПИСАНИЕ ТОВАРА" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F51]"
                          dataType="wstr"
                          length="255"
                          name="F51" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[ОПИСАНИЕ ОБЩЕЕ]"
                          dataType="nText"
                          name="ОПИСАНИЕ ОБЩЕЕ" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[КОНТЕЙНЕР]"
                          dataType="wstr"
                          length="255"
                          name="КОНТЕЙНЕР" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].ExternalColumns[F52]"
                          dataType="wstr"
                          length="255"
                          name="F52" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;]"
                      isErrorOut="true"
                      name="Вывод ошибок источника &quot;Excel&quot;">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[АРТИКУЛ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[АРТИКУЛ]"
                          name="АРТИКУЛ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[МОДЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[МОДЕЛЬ]"
                          name="МОДЕЛЬ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ПРОИЗВОДИТЕЛЬ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ПРОИЗВОДИТЕЛЬ]"
                          name="ПРОИЗВОДИТЕЛЬ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ТОРГОВАЯ МАРКА]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ТОРГОВАЯ МАРКА]"
                          name="ТОРГОВАЯ МАРКА" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          name="СТРАНА ПРОИСХОЖДЕНИЯ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОЛИЧЕСТВО]"
                          dataType="r8"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОЛИЧЕСТВО]"
                          name="КОЛИЧЕСТВО" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          name="ЕДИНИЦА ИЗМЕРЕНИЯ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СТОИМОСТЬ]"
                          dataType="r8"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СТОИМОСТЬ]"
                          name="СТОИМОСТЬ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ВАЛЮТА]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ВАЛЮТА]"
                          name="ВАЛЮТА" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[НЕТТО]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[НЕТТО]"
                          name="НЕТТО" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[БРУТТО]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[БРУТТО]"
                          name="БРУТТО" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОЛ-ВО МЕСТ]"
                          dataType="r8"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОЛ-ВО МЕСТ]"
                          name="КОЛ-ВО МЕСТ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ИНВОЙС]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ИНВОЙС]"
                          name="ИНВОЙС" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ДАТА ИНВОЙСА]"
                          dataType="date"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ДАТА ИНВОЙСА]"
                          name="ДАТА ИНВОЙСА" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОНТРАКТ]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОНТРАКТ]"
                          name="КОНТРАКТ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ДАТА КОНТРАКТА]"
                          dataType="date"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ДАТА КОНТРАКТА]"
                          name="ДАТА КОНТРАКТА" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОНТЕЙНЕР]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОНТЕЙНЕР]"
                          name="КОНТЕЙНЕР" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[НОМЕР ГРУЗА]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[НОМЕР ГРУЗА]"
                          name="НОМЕР ГРУЗА" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОД ТНВЭД]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[КОД ТНВЭД]"
                          name="КОД ТНВЭД" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ДОП#КОД]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ДОП#КОД]"
                          name="ДОП#КОД" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          dataType="nText"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          name="ОПИСАНИЕ ОБЩЕЕ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ТОВАРА]"
                          dataType="nText"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ТОВАРА]"
                          name="ОПИСАНИЕ ТОВАРА" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          name="СЕРТИФИКАТ/ДС НОМЕР" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          dataType="date"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          name="СЕРТИФИКАТ/ДС ОТ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ДО]"
                          dataType="date"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ДО]"
                          name="СЕРТИФИКАТ/ДС ДО" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СГР НОМЕР]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СГР НОМЕР]"
                          name="СГР НОМЕР" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СГР ОТ]"
                          dataType="date"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СГР ОТ]"
                          name="СГР ОТ" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СГР ДО]"
                          dataType="date"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[СГР ДО]"
                          name="СГР ДО" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[F41]"
                          dataType="wstr"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Вывод ошибок источника &quot;Excel&quot;].Columns[F41]"
                          name="F41" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Process files\Insert request_contents\INSERT request_contents"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination.;Microsoft Corporation; Microsoft SQL Server; © Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination."
                  name="INSERT request_contents"
                  usesDispositions="true"
                  version="2">
                  <properties>
                    <property
                      dataType="System.String"
                      description="The Destination database table name."
                      expressionType="Notify"
                      name="TableOrViewName"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">"dbo"."request_contents"</property>
                    <property
                      dataType="System.Int32"
                      description="Specify the number of rows per batch. The default is 0 which uses the same size as SSIS internal buffer. "
                      expressionType="Notify"
                      name="BatchSize">0</property>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out. A value of 0 indicates infinite time-out. "
                      expressionType="Notify"
                      name="CommandTimeout">30</property>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether to use the SqlBulkCopy interface to improve the performance of bulk insert operations. Only certain providers support this interface."
                      expressionType="Notify"
                      name="UseBulkInsertWhenPossible">true</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ADONETDestination</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Process files\Insert request_contents\INSERT request_contents.Connections[IDbConnection]"
                      connectionManagerID="{76382CC5-2C1A-4767-958A-4AFC8DEA4336}:external"
                      connectionManagerRefId="Project.ConnectionManagers[10.10.0.28.automation.phpuser]"
                      description="Managed connection manager"
                      name="IDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input]"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="ADO NET Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[guid]"
                          cachedDataType="guid"
                          cachedName="guid"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[guid]"
                          lineageId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0].Columns[guid]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[rowid]"
                          cachedDataType="i4"
                          cachedName="rowid"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[row_id]"
                          lineageId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0].Columns[rowid]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия АРТИКУЛ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия АРТИКУЛ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[article]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия АРТИКУЛ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия МОДЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия МОДЕЛЬ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[model]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия МОДЕЛЬ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ПРОИЗВОДИТЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="500"
                          cachedName="Копия ПРОИЗВОДИТЕЛЬ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[manufacturer]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ПРОИЗВОДИТЕЛЬ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ТОРГОВАЯ МАРКА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ТОРГОВАЯ МАРКА"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[trade_mark]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ТОРГОВАЯ МАРКА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СТРАНА ПРОИСХОЖДЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия СТРАНА ПРОИСХОЖДЕНИЯ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[country]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТРАНА ПРОИСХОЖДЕНИЯ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия КОЛИЧЕСТВО]"
                          cachedDataType="decimal"
                          cachedName="Копия КОЛИЧЕСТВО"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[qty]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛИЧЕСТВО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ЕДИНИЦА ИЗМЕРЕНИЯ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[unit_measurement]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ЕДИНИЦА ИЗМЕРЕНИЯ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СТОИМОСТЬ]"
                          cachedDataType="decimal"
                          cachedName="Копия СТОИМОСТЬ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[price]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТОИМОСТЬ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ВАЛЮТА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ВАЛЮТА"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[currency]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ВАЛЮТА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия НЕТТО]"
                          cachedDataType="decimal"
                          cachedName="Копия НЕТТО"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[net]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НЕТТО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия БРУТТО]"
                          cachedDataType="decimal"
                          cachedName="Копия БРУТТО"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[gross]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия БРУТТО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия КОЛ-ВО МЕСТ]"
                          cachedDataType="decimal"
                          cachedName="Копия КОЛ-ВО МЕСТ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[packages_qty]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛ-ВО МЕСТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ИНВОЙС]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ИНВОЙС"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[inv_num]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ИНВОЙС]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ДАТА ИНВОЙСА]"
                          cachedDataType="date"
                          cachedName="Копия ДАТА ИНВОЙСА"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[inv_date]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА ИНВОЙСА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия КОНТРАКТ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия КОНТРАКТ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[contract_num]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТРАКТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ДАТА КОНТРАКТА]"
                          cachedDataType="date"
                          cachedName="Копия ДАТА КОНТРАКТА"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[contract_date]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА КОНТРАКТА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия НОМЕР ГРУЗА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия НОМЕР ГРУЗА"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[cargoid]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НОМЕР ГРУЗА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия КОД ТНВЭД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия КОД ТНВЭД"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_hscode]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОД ТНВЭД]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ДОП#КОД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ДОП#КОД"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_addcode]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДОП#КОД]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ОПИСАНИЕ ОБЩЕЕ]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="Копия ОПИСАНИЕ ОБЩЕЕ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_des_common]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ОБЩЕЕ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия ОПИСАНИЕ ТОВАРА]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="Копия ОПИСАНИЕ ТОВАРА"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_des_tovg]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ТОВАРА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СЕРТИФИКАТ/ДС НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия СЕРТИФИКАТ/ДС НОМЕР"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sert_num]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС НОМЕР]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СЕРТИФИКАТ/ДС ОТ]"
                          cachedDataType="date"
                          cachedName="Копия СЕРТИФИКАТ/ДС ОТ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sert_from]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ОТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СЕРТИФИКАТ/ДС ДО]"
                          cachedDataType="date"
                          cachedName="Копия СЕРТИФИКАТ/ДС ДО"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sert_to]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ДО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СГР НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия СГР НОМЕР"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sgr_num]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР НОМЕР]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СГР ОТ]"
                          cachedDataType="date"
                          cachedName="Копия СГР ОТ"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sgr_from]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ОТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия СГР ДО]"
                          cachedDataType="date"
                          cachedName="Копия СГР ДО"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sgr_to]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ДО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].Columns[Копия КОНТЕЙНЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия КОНТЕЙНЕР"
                          externalMetadataColumnId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[request_container]"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТЕЙНЕР]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[guid]"
                          dataType="guid"
                          name="guid" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[row_id]"
                          dataType="i4"
                          name="row_id" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[article]"
                          dataType="wstr"
                          length="255"
                          name="article" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[model]"
                          dataType="wstr"
                          length="255"
                          name="model" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[manufacturer]"
                          dataType="wstr"
                          length="500"
                          name="manufacturer" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[trade_mark]"
                          dataType="wstr"
                          length="255"
                          name="trade_mark" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[country]"
                          dataType="wstr"
                          length="255"
                          name="country" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[qty]"
                          dataType="numeric"
                          name="qty"
                          precision="19"
                          scale="255" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[unit_measurement]"
                          dataType="wstr"
                          length="255"
                          name="unit_measurement" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[price]"
                          dataType="numeric"
                          name="price"
                          precision="19"
                          scale="255" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[currency]"
                          dataType="wstr"
                          length="255"
                          name="currency" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[net]"
                          dataType="numeric"
                          name="net"
                          precision="19"
                          scale="255" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[gross]"
                          dataType="numeric"
                          name="gross"
                          precision="19"
                          scale="255" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[packages_qty]"
                          dataType="numeric"
                          name="packages_qty"
                          precision="19"
                          scale="255" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[inv_num]"
                          dataType="wstr"
                          length="255"
                          name="inv_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[inv_date]"
                          dataType="dbTimeStamp"
                          name="inv_date" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[contract_num]"
                          dataType="wstr"
                          length="255"
                          name="contract_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[contract_date]"
                          dataType="dbTimeStamp"
                          name="contract_date" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[cargoid]"
                          dataType="wstr"
                          length="255"
                          name="cargoid" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_hscode]"
                          dataType="wstr"
                          length="255"
                          name="man_hscode" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_addcode]"
                          dataType="wstr"
                          length="255"
                          name="man_addcode" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_des_common]"
                          dataType="wstr"
                          length="4000"
                          name="man_des_common" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_des_tovg]"
                          dataType="wstr"
                          length="4000"
                          name="man_des_tovg" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sert_num]"
                          dataType="wstr"
                          length="255"
                          name="man_sert_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sert_from]"
                          dataType="dbTimeStamp"
                          name="man_sert_from" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sert_to]"
                          dataType="dbTimeStamp"
                          name="man_sert_to" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sgr_num]"
                          dataType="wstr"
                          length="255"
                          name="man_sgr_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sgr_from]"
                          dataType="dbTimeStamp"
                          name="man_sgr_from" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_sgr_to]"
                          dataType="dbTimeStamp"
                          name="man_sgr_to" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_TERMINAL_NAME]"
                          dataType="wstr"
                          length="100"
                          name="man_TERMINAL_NAME" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_TrainTransportDesc]"
                          dataType="wstr"
                          length="500"
                          name="man_TrainTransportDesc" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_DELIVERY_SVX_DATE_TIME]"
                          dataType="dbTimeStamp"
                          name="man_DELIVERY_SVX_DATE_TIME" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_TCD_DATE_TIME]"
                          dataType="dbTimeStamp"
                          name="man_TCD_DATE_TIME" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[man_TransportDeliveryCloseDateTimeCaption]"
                          dataType="dbTimeStamp"
                          name="man_TransportDeliveryCloseDateTimeCaption" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[Delivery]"
                          dataType="wstr"
                          length="100"
                          name="Delivery" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[Terminal_NAV]"
                          dataType="wstr"
                          length="100"
                          name="Terminal_NAV" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[Transport_Method_NAV]"
                          dataType="wstr"
                          length="100"
                          name="Transport_Method_NAV" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[VAT]"
                          dataType="wstr"
                          length="100"
                          name="VAT" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[currency_code]"
                          dataType="wstr"
                          length="100"
                          name="currency_code" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_hs_code]"
                          dataType="wstr"
                          length="100"
                          name="auto_hs_code" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_hs_code_add]"
                          dataType="wstr"
                          length="100"
                          name="auto_hs_code_add" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_common_des]"
                          dataType="wstr"
                          length="4000"
                          name="auto_common_des" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_tovg_des]"
                          dataType="wstr"
                          length="4000"
                          name="auto_tovg_des" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_sert_num]"
                          dataType="wstr"
                          length="100"
                          name="auto_sert_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_sert_from]"
                          dataType="dbTimeStamp"
                          name="auto_sert_from" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_sert_to]"
                          dataType="dbTimeStamp"
                          name="auto_sert_to" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_sgr_num]"
                          dataType="wstr"
                          length="100"
                          name="auto_sgr_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_sgr_from]"
                          dataType="dbTimeStamp"
                          name="auto_sgr_from" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[auto_sgr_to]"
                          dataType="dbTimeStamp"
                          name="auto_sgr_to" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_hs_code]"
                          dataType="wstr"
                          length="100"
                          name="decl_hs_code" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_hs_code_add]"
                          dataType="wstr"
                          length="100"
                          name="decl_hs_code_add" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_common_des]"
                          dataType="wstr"
                          length="4000"
                          name="decl_common_des" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_tovg_des]"
                          dataType="wstr"
                          length="4000"
                          name="decl_tovg_des" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_sert_num]"
                          dataType="wstr"
                          length="100"
                          name="decl_sert_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_sert_from]"
                          dataType="dbTimeStamp"
                          name="decl_sert_from" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_sert_to]"
                          dataType="dbTimeStamp"
                          name="decl_sert_to" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_sgr_num]"
                          dataType="wstr"
                          length="100"
                          name="decl_sgr_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_sgr_from]"
                          dataType="dbTimeStamp"
                          name="decl_sgr_from" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[decl_sgr_to]"
                          dataType="dbTimeStamp"
                          name="decl_sgr_to" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[country_code_let]"
                          dataType="wstr"
                          length="50"
                          name="country_code_let" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[country_code_num]"
                          dataType="wstr"
                          length="50"
                          name="country_code_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[unit_code_num]"
                          dataType="wstr"
                          length="50"
                          name="unit_code_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[packing_code]"
                          dataType="wstr"
                          length="50"
                          name="packing_code" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[transport_doc]"
                          dataType="wstr"
                          length="50"
                          name="transport_doc" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[group_num]"
                          dataType="i4"
                          name="group_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[item_num]"
                          dataType="i4"
                          name="item_num" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[item_gross]"
                          dataType="numeric"
                          name="item_gross"
                          precision="18"
                          scale="6" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[item_net]"
                          dataType="numeric"
                          name="item_net"
                          precision="18"
                          scale="6" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[item_packages]"
                          dataType="i4"
                          name="item_packages" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[item_price]"
                          dataType="numeric"
                          name="item_price"
                          precision="18"
                          scale="6" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[concat_44]"
                          dataType="wstr"
                          length="2147483647"
                          name="concat_44" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[distinct_code]"
                          dataType="i4"
                          name="distinct_code" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[ref_regnum]"
                          dataType="wstr"
                          length="100"
                          name="ref_regnum" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[ref_G32]"
                          dataType="wstr"
                          length="100"
                          name="ref_G32" />
                        <externalMetadataColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input].ExternalColumns[request_container]"
                          dataType="wstr"
                          length="100"
                          name="request_container" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Process files\Insert request_contents\INSERT request_contents.Outputs[ADO NET Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="ADO NET Destination Error Output"
                      synchronousInputId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Outputs[ADO NET Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\INSERT request_contents.Outputs[ADO NET Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\INSERT request_contents.Outputs[ADO NET Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\INSERT request_contents.Outputs[ADO NET Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Process files\Insert request_contents\Row filter"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Условное разбиение;Корпорация Майкрософт. Microsoft SQL Server. (C) Корпорация Майкрософт (Microsoft Corporation). Все права защищены. http://www.microsoft.com/sql/support;0"
                  description="Распределяет строки данных по разным выходам в зависимости от содержимого данных. Используйте условие (выражения SSIS), чтобы указать распределяемые строки. Пример: разделение записей, которые необходимо очистить, от подготовленных к загрузке или распределение только подмножества записей."
                  name="Row filter"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения]"
                      description="Ввод преобразования &quot;Условное разбиение&quot;"
                      name="Вход условного разбиения">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения].Columns[АРТИКУЛ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="АРТИКУЛ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[АРТИКУЛ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения].Columns[МОДЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="МОДЕЛЬ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[МОДЕЛЬ]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Process files\Insert request_contents\Row filter.Outputs[Product]"
                      description="Вывод 1 преобразования &quot;Условное разбиение&quot;"
                      errorOrTruncationOperation="Вычисление"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Product"
                      synchronousInputId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Указывает выражение. Версия этого выражения использует вместо имен столбцов идентификаторы журнала обращений и преобразований."
                          name="Expression">!(([ISNULL](#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[АРТИКУЛ]}) || [TRIM](#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[АРТИКУЛ]}) == "" || #{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[АРТИКУЛ]} == "ААААААААААААААА") &amp;&amp; ([ISNULL](#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[МОДЕЛЬ]}) || [TRIM](#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[МОДЕЛЬ]}) == "" || #{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[МОДЕЛЬ]} == "ААААААААААААААА"))</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Задает понятную версию выражения. Эта версия выражения использует имена столбцов."
                          expressionType="Notify"
                          name="FriendlyExpression">!((ISNULL([АРТИКУЛ]) || TRIM([АРТИКУЛ]) == "" || [АРТИКУЛ] == "ААААААААААААААА") &amp;&amp; (ISNULL([МОДЕЛЬ]) || TRIM([МОДЕЛЬ]) == "" || [МОДЕЛЬ] == "ААААААААААААААА"))</property>
                        <property
                          dataType="System.Int32"
                          description="Указывает положение условия в списке условий, который вычисляется преобразованием. Вычисление производится в порядке от меньшего к большему значению."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Process files\Insert request_contents\Row filter.Outputs[Default]"
                      description="Выход по умолчанию преобразования &quot;Условное разбиение&quot;"
                      exclusionGroup="1"
                      name="Default"
                      synchronousInputId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Process files\Insert request_contents\Row filter.Outputs[Вывод ошибок условного разбиения]"
                      description="Вывод ошибок преобразования &quot;Условное разбиение&quot;"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Вывод ошибок условного разбиения"
                      synchronousInputId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Row filter.Outputs[Вывод ошибок условного разбиения].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\Row filter.Outputs[Вывод ошибок условного разбиения].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Row filter.Outputs[Вывод ошибок условного разбиения].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\Row filter.Outputs[Вывод ошибок условного разбиения].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;10"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Row ID, GUID, UCASE"
                  validateExternalMetadata="False"
                  version="10">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_4b8d02b79fea4a9398efb4b6cfd97e44.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{fd31a447-02fb-44a3-a4c4-b0a51dccbb56}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_4b8d02b79fea4a9398efb4b6cfd97e44</RootNamespace>
    <AssemblyName>SC_4b8d02b79fea4a9398efb4b6cfd97e44</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_4b8d02b79fea4a9398efb4b6cfd97e44" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion
    public static int counter;

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        counter = 1;
    }
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        Row.rowid = counter++;
        Row.guid = Guid.Parse(Variables.docguid);
        
        if (!Row.КопияАРТИКУЛ_IsNull) { Row.КопияАРТИКУЛ = Row.КопияАРТИКУЛ.ToUpper(); }
        if (!Row.КопияМОДЕЛЬ_IsNull) { Row.КопияМОДЕЛЬ = Row.КопияМОДЕЛЬ.ToUpper(); }
        if (!Row.КопияТОРГОВАЯМАРКА_IsNull) { Row.КопияТОРГОВАЯМАРКА = Row.КопияТОРГОВАЯМАРКА.ToUpper(); }
        if (!Row.КопияПРОИЗВОДИТЕЛЬ_IsNull) { Row.КопияПРОИЗВОДИТЕЛЬ = Row.КопияПРОИЗВОДИТЕЛЬ.ToUpper(); }
        if (!Row.КопияСТРАНАПРОИСХОЖДЕНИЯ_IsNull) { Row.КопияСТРАНАПРОИСХОЖДЕНИЯ = Row.КопияСТРАНАПРОИСХОЖДЕНИЯ.ToUpper(); }
        if (!Row.КопияЕДИНИЦАИЗМЕРЕНИЯ_IsNull) { Row.КопияЕДИНИЦАИЗМЕРЕНИЯ = Row.КопияЕДИНИЦАИЗМЕРЕНИЯ.ToUpper(); }
        if (!Row.КопияИНВОЙС_IsNull) { Row.КопияИНВОЙС = Row.КопияИНВОЙС.ToUpper(); }
        if (!Row.КопияКОНТРАКТ_IsNull) { Row.КопияКОНТРАКТ = Row.КопияКОНТРАКТ.ToUpper(); }
        if (!Row.КопияВАЛЮТА_IsNull) { Row.КопияВАЛЮТА = Row.КопияВАЛЮТА.ToUpper(); }
        if (!Row.КопияНОМЕРГРУЗА_IsNull) { Row.КопияНОМЕРГРУЗА = Row.КопияНОМЕРГРУЗА.ToUpper(); }
        if (!Row.КопияОПИСАНИЕОБЩЕЕ_IsNull) { Row.КопияОПИСАНИЕОБЩЕЕ = Row.КопияОПИСАНИЕОБЩЕЕ.ToUpper(); }
        if (!Row.КопияОПИСАНИЕТОВАРА_IsNull) { Row.КопияОПИСАНИЕТОВАРА = Row.КопияОПИСАНИЕТОВАРА.ToUpper(); }
        if (!Row.КопияСЕРТИФИКАТДСНОМЕР_IsNull) { Row.КопияСЕРТИФИКАТДСНОМЕР = Row.КопияСЕРТИФИКАТДСНОМЕР.ToUpper(); }
        if (!Row.КопияСГРНОМЕР_IsNull) { Row.КопияСГРНОМЕР = Row.КопияСГРНОМЕР.ToUpper(); }
        if(!Row.КопияКОНТЕЙНЕР_IsNull) { Row.КопияКОНТЕЙНЕР = Row.КопияКОНТЕЙНЕР.ToUpper(); }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String КопияАРТИКУЛ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool КопияАРТИКУЛ_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияМОДЕЛЬ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
        set
        {
            this[1] = value;
        }
    }
    public bool КопияМОДЕЛЬ_IsNull
    {
        get
        {
            return IsNull(1);
        }
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияПРОИЗВОДИТЕЛЬ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
        set
        {
            this[2] = value;
        }
    }
    public bool КопияПРОИЗВОДИТЕЛЬ_IsNull
    {
        get
        {
            return IsNull(2);
        }
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияТОРГОВАЯМАРКА
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
        set
        {
            this[3] = value;
        }
    }
    public bool КопияТОРГОВАЯМАРКА_IsNull
    {
        get
        {
            return IsNull(3);
        }
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КопияКОЛИЧЕСТВО
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[4]);
        }
        set
        {
            this[4] = value;
        }
    }
    public bool КопияКОЛИЧЕСТВО_IsNull
    {
        get
        {
            return IsNull(4);
        }
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияЕДИНИЦАИЗМЕРЕНИЯ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
        set
        {
            this[5] = value;
        }
    }
    public bool КопияЕДИНИЦАИЗМЕРЕНИЯ_IsNull
    {
        get
        {
            return IsNull(5);
        }
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КопияСТОИМОСТЬ
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[6]);
        }
        set
        {
            this[6] = value;
        }
    }
    public bool КопияСТОИМОСТЬ_IsNull
    {
        get
        {
            return IsNull(6);
        }
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияВАЛЮТА
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
        set
        {
            this[7] = value;
        }
    }
    public bool КопияВАЛЮТА_IsNull
    {
        get
        {
            return IsNull(7);
        }
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КопияНЕТТО
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[8]);
        }
        set
        {
            this[8] = value;
        }
    }
    public bool КопияНЕТТО_IsNull
    {
        get
        {
            return IsNull(8);
        }
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КопияБРУТТО
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[9]);
        }
        set
        {
            this[9] = value;
        }
    }
    public bool КопияБРУТТО_IsNull
    {
        get
        {
            return IsNull(9);
        }
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal КопияКОЛВОМЕСТ
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[10]);
        }
        set
        {
            this[10] = value;
        }
    }
    public bool КопияКОЛВОМЕСТ_IsNull
    {
        get
        {
            return IsNull(10);
        }
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияИНВОЙС
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
        set
        {
            this[11] = value;
        }
    }
    public bool КопияИНВОЙС_IsNull
    {
        get
        {
            return IsNull(11);
        }
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime КопияДАТАИНВОЙСА
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[12]);
        }
        set
        {
            this[12] = value;
        }
    }
    public bool КопияДАТАИНВОЙСА_IsNull
    {
        get
        {
            return IsNull(12);
        }
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияКОНТРАКТ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
        set
        {
            this[13] = value;
        }
    }
    public bool КопияКОНТРАКТ_IsNull
    {
        get
        {
            return IsNull(13);
        }
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime КопияДАТАКОНТРАКТА
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[14]);
        }
        set
        {
            this[14] = value;
        }
    }
    public bool КопияДАТАКОНТРАКТА_IsNull
    {
        get
        {
            return IsNull(14);
        }
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияНОМЕРГРУЗА
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
        set
        {
            this[15] = value;
        }
    }
    public bool КопияНОМЕРГРУЗА_IsNull
    {
        get
        {
            return IsNull(15);
        }
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияСТРАНАПРОИСХОЖДЕНИЯ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
        set
        {
            this[16] = value;
        }
    }
    public bool КопияСТРАНАПРОИСХОЖДЕНИЯ_IsNull
    {
        get
        {
            return IsNull(16);
        }
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияДОПКОД
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
        set
        {
            this[17] = value;
        }
    }
    public bool КопияДОПКОД_IsNull
    {
        get
        {
            return IsNull(17);
        }
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияКОДТНВЭД
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[18]);
        }
        set
        {
            this[18] = value;
        }
    }
    public bool КопияКОДТНВЭД_IsNull
    {
        get
        {
            return IsNull(18);
        }
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияСЕРТИФИКАТДСНОМЕР
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[19]);
        }
        set
        {
            this[19] = value;
        }
    }
    public bool КопияСЕРТИФИКАТДСНОМЕР_IsNull
    {
        get
        {
            return IsNull(19);
        }
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime КопияСЕРТИФИКАТДСОТ
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[20]);
        }
        set
        {
            this[20] = value;
        }
    }
    public bool КопияСЕРТИФИКАТДСОТ_IsNull
    {
        get
        {
            return IsNull(20);
        }
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime КопияСЕРТИФИКАТДСДО
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[21]);
        }
        set
        {
            this[21] = value;
        }
    }
    public bool КопияСЕРТИФИКАТДСДО_IsNull
    {
        get
        {
            return IsNull(21);
        }
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияСГРНОМЕР
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[22]);
        }
        set
        {
            this[22] = value;
        }
    }
    public bool КопияСГРНОМЕР_IsNull
    {
        get
        {
            return IsNull(22);
        }
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime КопияСГРОТ
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[23]);
        }
        set
        {
            this[23] = value;
        }
    }
    public bool КопияСГРОТ_IsNull
    {
        get
        {
            return IsNull(23);
        }
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime КопияСГРДО
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[24]);
        }
        set
        {
            this[24] = value;
        }
    }
    public bool КопияСГРДО_IsNull
    {
        get
        {
            return IsNull(24);
        }
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияОПИСАНИЕТОВАРА
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[25]);
        }
        set
        {
            this[25] = value;
        }
    }
    public bool КопияОПИСАНИЕТОВАРА_IsNull
    {
        get
        {
            return IsNull(25);
        }
        set
        {
            if (value)
            {
                SetNull(25);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияОПИСАНИЕОБЩЕЕ
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[26]);
        }
        set
        {
            this[26] = value;
        }
    }
    public bool КопияОПИСАНИЕОБЩЕЕ_IsNull
    {
        get
        {
            return IsNull(26);
        }
        set
        {
            if (value)
            {
                SetNull(26);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String КопияКОНТЕЙНЕР
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[27]);
        }
        set
        {
            this[27] = value;
        }
    }
    public bool КопияКОНТЕЙНЕР_IsNull
    {
        get
        {
            return IsNull(27);
        }
        set
        {
            if (value)
            {
                SetNull(27);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Guid guid
    {
        set
        {
            this[28] = value;
        }
    }
    public bool guid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(28);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 rowid
    {
        set
        {
            this[29] = value;
        }
    }
    public bool rowid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(29);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties.Settings.get_Default():SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties.Sett" +
    "ings")]

namespace SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String docguid
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["docguid"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_4b8d02b79fea4a9398efb4b6cfd97e44</msb:CodeName>
		<msb:DisplayName>SC_4b8d02b79fea4a9398efb4b6cfd97e44</msb:DisplayName>
		<msb:ProjectId>{ECF13CD0-962E-4E2D-86D5-0CE37ABECC95}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_4b8d02b79fea4a9398efb4b6cfd97e44.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_4b8d02b79fea4a9398efb4b6cfd97e44")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_4b8d02b79fea4a9398efb4b6cfd97e44")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_4b8d02b79fea4a9398efb4b6cfd97e44.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_4b8d02b79fea4a9398efb4b6cfd97e44.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
OwBaKQAAAACGCCQVEAA7AGUpAAAAAIYILglTADwAbykAAAAAhghWCckAPACHKQAAAACGCIMA5AA9
AJcpAAAAAIYIiQPJAD4ArykAAAAAhgiYAAEAPwC/KQAAAACGCJkDyQBAANcpAAAAAIYAWBBTAEEA
3ykAAAAAhgBlD1MAQQDnKQAAAACGGDUOBgBBAAcqAAAAAMYA8A/qAEEALCoAAAAAxgHpD8MARQA/
KgAAAADGAUEQwwBGAEEqAAAAAIYYNQ70AEcAUCoAAAAAhhg1DvQASABfKgAAAACGCIwAIQBJAIUq
AAAAAIMYNQ4GAEkAjSoAAAAAkwjpDfoASQC5KgAAAACTCBIB/wBJAMAqAAAAAJMIHgEEAUkAyCoA
AAAAlghxDwoBSgDPKgAAAACGGDUOBgBKANcqAAAAAJEYOw4PAUoAAAABAFwQAAABAOINAAACAB0P
AAADAJMNAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAAB
ABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYD
AAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAAB
ABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYD
AAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAAB
ABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYDAAABABYD
AAABABYDAAABABYDAAABABYDAAABABYDAAABAG0AAAACANYAAAADAOINAAAEAJMNAAABAOINAAAB
AFwQAAABAKEPAAABAKEPAAABABYDCQA1DgEAEQA1DgYAGQA1DgoAKQA1DhAAMQA1DhAAOQA1DhAA
QQA1DhAASQA1DhAAUQA1DhAAWQA1DhAAYQA1DhAAaQA1DgYAsQA1DgYA0QA1DhUA4QA1DgYAoQAL
AwYAmQBSARsA6QD9DSEAcQA1DiUAcQDiDS8AcQAdDzMAeQA2AzcAcQDrDDwAcQDTDEIAcQDaDAEA
8QA1DhAAeQBAA0cAeQDgAE0AcQBYEFMAcQBlD1MAoQA1DgYA6QBLD1cAoQAxD18AqQA1DgYAoQAH
D2UACQHiDGsAoQAsEHIAEQH9D3gAKQHEAH8AKQFgEIgAuQA1Do4A2QA1DgYALgALAD0BLgATAEYB
LgAbAGUBLgAjAG4BLgArAJcBLgAzAJcBLgA7AJcBLgBDAG4BLgBLAJ0BLgBTAJcBLgBbALQBQwBj
AP4B4wBrAP4BAQF7AP4ByQdzAGUB6QdzAGUBAwABAAYAPQAHAD4ACABAAAAAFBMTAQAA1gYXAQAA
ohYTAQAAKAsXAQAA5hYTAQAAegsXAQAA4BATAQAAMgQXAQAAVBMbAQAAJAcXAQAA6hcTAQAAqAwX
AQAAMBcbAQAA0gsXAQAAFhITAQAAoAUXAQAAGBQbAQAAEggXAQAATBQbAQAAVAgXAQAAZhYbAQAA
3goXAQAAZBUTAQAApAkXAQAAhBEgAQAA8gQXAQAAnhUTAQAA7AkXAQAA0hEgAQAATgUXAQAAlBAT
AQAA2AMXAQAAhhcTAQAANgwXAQAATBITAQAA5AUXAQAAhhITAQAALAYXAQAA1hQTAQAA+ggXAQAA
GhYgAQAAhAoXAQAA1BMgAQAAwAcXAQAAhhQTAQAAnAgXAQAA1hUgAQAAMgoXAQAAkBMgAQAAbgcX
AQAANBETAQAAlAQXAQAAzhITAQAAggYXAQAAKBUTAQAAWgkXAQAAkwAlAQAAjQMXAQAAnAAqAQAA
nQMXAQAAkAATAQAA7Q0uAQAAMgEzAQAAdQ84AQIABQADAAEABgADAAIABwAFAAEACAAFAAIACQAH
AAEACgAHAAIACwAJAAEADAAJAAIADQALAAEADgALAAIADwANAAEAEAANAAIAEQAPAAEAEgAPAAIA
EwARAAEAFAARAAIAFQATAAEAFgATAAIAFwAVAAEAGAAVAAIAGQAXAAEAGgAXAAIAGwAZAAEAHAAZ
AAIAHQAbAAEAHgAbAAIAHwAdAAEAIAAdAAIAIQAfAAEAIgAfAAIAIwAhAAEAJAAhAAIAJQAjAAEA
JgAjAAIAJwAlAAEAKAAlAAIAKQAnAAEAKgAnAAIAKwApAAEALAApAAIALQArAAEALgArAAIALwAt
AAEAMAAtAAIAMQAvAAEAMgAvAAIAMwAxAAEANAAxAAIANQAzAAEANgAzAAIANwA1AAEAOAA1AAIA
OQA3AAEAOgA3AAIAOwA5AAEAPAA5AAIAPQA7AAEAPgA7AAIAPwA9AAEAQAA9AAIAQQA/AAEAQgA/
AAIAQwBBAAEARABBAAIARQBDAAEARgBDAAIARwBFAAEASABFAAIASQBHAAEASgBHAAIASwBJAAEA
TABJAAIATQBLAAEATgBLAAIATwBNAAEAUABNAAIAUQBPAAEAUgBPAAIAUwBRAAEAVABRAAIAVQBT
AAEAVgBTAAIAVwBVAAEAWABVAAIAWQBXAAEAWgBXAAIAWwBZAAEAXABZAAIAXQBbAAEAXgBbAAIA
XwBdAAEAYABdAAIAYQBfAAEAYgBfAAIAYwBhAAEAZABhAAIAZQBjAAEAZgBjAAIAZwBlAAEAaABl
AAIAaQBnAAEAagBnAAIAawBpAAEAbABpAAIAbQBrAAEAbgBrAAIAbwBtAAEAcABtAAIAcQBvAAEA
cgBvAAIAcwBxAAEAdABxAAEAdQBzAAEAdgB1AAEAdwB3AAEAeAB5AAIAgQB7AAIAgwB9AAIAhAB/
AAEAhQB/AAIAhgCBAASAAAABAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAAAAAAAAACWAHUAAAAAAA0A
AAAAAAAAAAAAAJ8Aqw8AAAAADQAAAAAAAAAAAAAAnwDIDwAAAAAEAAAAAAAAAAAAAACWAPQMAAAA
AA0AAAAAAAAAAAAAAJ8AnQ0AAAAAAAAAAAEAAACGDgAAAAAASURUU1ZhcmlhYmxlMTAwAElEVFNW
YXJpYWJsZXMxMDAASURUU0V2YWx1YXRvckNvbnRleHQxMDAASW50MzIAU0NfNGI4ZDAyYjc5ZmVh
NGE5Mzk4ZWZiNGI2Y2ZkOTdlNDQAPE1vZHVsZT4ASW5wdXRJRABtc2NvcmxpYgBHdWlkAHNldF9n
dWlkAGdldF9kb2NndWlkAHNldF9yb3dpZABkZWZhdWx0SW5zdGFuY2UAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAEdldERhdGVUaW1lAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VD
dWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAFBhcnNlAEVkaXRvckJyb3dzYWJsZVN0YXRl
AENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUA
RGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRy
aWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25B
dHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RB
dHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVudEVu
dHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRp
YmlsaXR5QXR0cmlidXRlAFByZUV4ZWN1dGUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmlu
ZwBHZXRTdHJpbmcAR2V0RGVjaW1hbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfNGI4ZDAyYjc5
ZmVhNGE5Mzk4ZWZiNGI2Y2ZkOTdlNDQuZGxsAHNldF9ndWlkX0lzTnVsbABzZXRfcm93aWRfSXNO
dWxsAGdldF/QmtC+0L/QuNGP0J3QntCc0JXQoNCT0KDQo9CX0JBfSXNOdWxsAHNldF/QmtC+0L/Q
uNGP0J3QntCc0JXQoNCT0KDQo9CX0JBfSXNOdWxsAGdldF/QmtC+0L/QuNGP0KLQntCg0JPQntCS
0JDQr9Cc0JDQoNCa0JBfSXNOdWxsAHNldF/QmtC+0L/QuNGP0KLQntCg0JPQntCS0JDQr9Cc0JDQ
oNCa0JBfSXNOdWxsAGdldF/QmtC+0L/QuNGP0J7Qn9CY0KHQkNCd0JjQldCi0J7QktCQ0KDQkF9J
c051bGwAc2V0X9Ca0L7Qv9C40Y/QntCf0JjQodCQ0J3QmNCV0KLQntCS0JDQoNCQX0lzTnVsbABn
ZXRf0JrQvtC/0LjRj9CU0JDQotCQ0JjQndCS0J7QmdCh0JBfSXNOdWxsAHNldF/QmtC+0L/QuNGP
0JTQkNCi0JDQmNCd0JLQntCZ0KHQkF9Jc051bGwAZ2V0X9Ca0L7Qv9C40Y/QlNCQ0KLQkNCa0J7Q
ndCi0KDQkNCa0KLQkF9Jc051bGwAc2V0X9Ca0L7Qv9C40Y/QlNCQ0KLQkNCa0J7QndCi0KDQkNCa
0KLQkF9Jc051bGwAZ2V0X9Ca0L7Qv9C40Y/QktCQ0JvQrtCi0JBfSXNOdWxsAHNldF/QmtC+0L/Q
uNGP0JLQkNCb0K7QotCQX0lzTnVsbABnZXRf0JrQvtC/0LjRj9CU0J7Qn9Ca0J7QlF9Jc051bGwA
c2V0X9Ca0L7Qv9C40Y/QlNCe0J/QmtCe0JRfSXNOdWxsAGdldF/QmtC+0L/QuNGP0JrQntCU0KLQ
ndCS0K3QlF9Jc051bGwAc2V0X9Ca0L7Qv9C40Y/QmtCe0JTQotCd0JLQrdCUX0lzTnVsbABnZXRf
0JrQvtC/0LjRj9Ce0J/QmNCh0JDQndCY0JXQntCR0KnQldCVX0lzTnVsbABzZXRf0JrQvtC/0LjR
j9Ce0J/QmNCh0JDQndCY0JXQntCR0KnQldCVX0lzTnVsbABnZXRf0JrQvtC/0LjRj9CQ0KDQotCY
0JrQo9CbX0lzTnVsbABzZXRf0JrQvtC/0LjRj9CQ0KDQotCY0JrQo9CbX0lzTnVsbABnZXRf0JrQ
vtC/0LjRj9Ca0J7Qm9CY0KfQldCh0KLQktCeX0lzTnVsbABzZXRf0JrQvtC/0LjRj9Ca0J7Qm9CY
0KfQldCh0KLQktCeX0lzTnVsbABnZXRf0JrQvtC/0LjRj9Ch0JPQoNCU0J5fSXNOdWxsAHNldF/Q
mtC+0L/QuNGP0KHQk9Cg0JTQnl9Jc051bGwAZ2V0X9Ca0L7Qv9C40Y/QodCV0KDQotCY0KTQmNCa
0JDQotCU0KHQlNCeX0lzTnVsbABzZXRf0JrQvtC/0LjRj9Ch0JXQoNCi0JjQpNCY0JrQkNCi0JTQ
odCU0J5fSXNOdWxsAGdldF/QmtC+0L/QuNGP0J3QldCi0KLQnl9Jc051bGwAc2V0X9Ca0L7Qv9C4
0Y/QndCV0KLQotCeX0lzTnVsbABnZXRf0JrQvtC/0LjRj9CR0KDQo9Ci0KLQnl9Jc051bGwAc2V0
X9Ca0L7Qv9C40Y/QkdCg0KPQotCi0J5fSXNOdWxsAGdldF/QmtC+0L/QuNGP0KHQk9Cg0J3QntCc
0JXQoF9Jc051bGwAc2V0X9Ca0L7Qv9C40Y/QodCT0KDQndCe0JzQldCgX0lzTnVsbABnZXRf0JrQ
vtC/0LjRj9Ch0JXQoNCi0JjQpNCY0JrQkNCi0JTQodCd0J7QnNCV0KBfSXNOdWxsAHNldF/QmtC+
0L/QuNGP0KHQldCg0KLQmNCk0JjQmtCQ0KLQlNCh0J3QntCc0JXQoF9Jc051bGwAZ2V0X9Ca0L7Q
v9C40Y/QmtCe0J3QotCV0JnQndCV0KBfSXNOdWxsAHNldF/QmtC+0L/QuNGP0JrQntCd0KLQldCZ
0J3QldCgX0lzTnVsbABnZXRf0JrQvtC/0LjRj9CY0J3QktCe0JnQoV9Jc051bGwAc2V0X9Ca0L7Q
v9C40Y/QmNCd0JLQntCZ0KFfSXNOdWxsAGdldF/QmtC+0L/QuNGP0JrQntCd0KLQoNCQ0JrQol9J
c051bGwAc2V0X9Ca0L7Qv9C40Y/QmtCe0J3QotCg0JDQmtCiX0lzTnVsbABnZXRf0JrQvtC/0LjR
j9Ch0JPQoNCe0KJfSXNOdWxsAHNldF/QmtC+0L/QuNGP0KHQk9Cg0J7Qol9Jc051bGwAZ2V0X9Ca
0L7Qv9C40Y/QodCV0KDQotCY0KTQmNCa0JDQotCU0KHQntCiX0lzTnVsbABzZXRf0JrQvtC/0LjR
j9Ch0JXQoNCi0JjQpNCY0JrQkNCi0JTQodCe0KJfSXNOdWxsAGdldF/QmtC+0L/QuNGP0JrQntCb
0JLQntCc0JXQodCiX0lzTnVsbABzZXRf0JrQvtC/0LjRj9Ca0J7Qm9CS0J7QnNCV0KHQol9Jc051
bGwAZ2V0X9Ca0L7Qv9C40Y/QnNCe0JTQldCb0KxfSXNOdWxsAHNldF/QmtC+0L/QuNGP0JzQntCU
0JXQm9CsX0lzTnVsbABnZXRf0JrQvtC/0LjRj9Cf0KDQntCY0JfQktCe0JTQmNCi0JXQm9CsX0lz
TnVsbABzZXRf0JrQvtC/0LjRj9Cf0KDQntCY0JfQktCe0JTQmNCi0JXQm9CsX0lzTnVsbABnZXRf
0JrQvtC/0LjRj9Ch0KLQntCY0JzQntCh0KLQrF9Jc051bGwAc2V0X9Ca0L7Qv9C40Y/QodCi0J7Q
mNCc0J7QodCi0KxfSXNOdWxsAGdldF/QmtC+0L/QuNGP0KHQotCg0JDQndCQ0J/QoNCe0JjQodCl
0J7QltCU0JXQndCY0K9fSXNOdWxsAHNldF/QmtC+0L/QuNGP0KHQotCg0JDQndCQ0J/QoNCe0JjQ
odCl0J7QltCU0JXQndCY0K9fSXNOdWxsAGdldF/QmtC+0L/QuNGP0JXQlNCY0J3QmNCm0JDQmNCX
0JzQldCg0JXQndCY0K9fSXNOdWxsAHNldF/QmtC+0L/QuNGP0JXQlNCY0J3QmNCm0JDQmNCX0JzQ
ldCg0JXQndCY0K9fSXNOdWxsAFNldE51bGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAHJlc291
cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRp
b24AU3lzdGVtLlJlZmxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBTdHJpbmdDb21w
YXJpc29uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRFRTUnVudGltZVdyYXAASW5wdXQwQnVmZmVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1
ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFRvVXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZS5XcmFwcGVyAGNvdW50ZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBT
eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfNGI4ZDAy
Yjc5ZmVhNGE5Mzk4ZWZiNGI2Y2ZkOTdlNDQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2Vz
AERlYnVnZ2luZ01vZGVzAFNDXzRiOGQwMmI3OWZlYTRhOTM5OGVmYjRiNmNmZDk3ZTQ0LlByb3Bl
cnRpZXMAZ2V0X1JlYWRPbmx5VmFyaWFibGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1u
SW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMAQ29ubmVjdGlvbnMAT2JqZWN0AEVuZE9mUm93c2V0AGdl
dF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABN
aWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVI
b3N0AElucHV0MF9Qcm9jZXNzSW5wdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRDb21wb25l
bnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABJbnB1dDBfUHJvY2Vzc0lucHV0Um93
AE5leHRSb3cAZ2V0X0Fzc2VtYmx5AGdldF/QmtC+0L/QuNGP0J3QntCc0JXQoNCT0KDQo9CX0JAA
c2V0X9Ca0L7Qv9C40Y/QndCe0JzQldCg0JPQoNCj0JfQkABnZXRf0JrQvtC/0LjRj9Ci0J7QoNCT
0J7QktCQ0K/QnNCQ0KDQmtCQAHNldF/QmtC+0L/QuNGP0KLQntCg0JPQntCS0JDQr9Cc0JDQoNCa
0JAAZ2V0X9Ca0L7Qv9C40Y/QntCf0JjQodCQ0J3QmNCV0KLQntCS0JDQoNCQAHNldF/QmtC+0L/Q
uNGP0J7Qn9CY0KHQkNCd0JjQldCi0J7QktCQ0KDQkABnZXRf0JrQvtC/0LjRj9CU0JDQotCQ0JjQ
ndCS0J7QmdCh0JAAc2V0X9Ca0L7Qv9C40Y/QlNCQ0KLQkNCY0J3QktCe0JnQodCQAGdldF/QmtC+
0L/QuNGP0JTQkNCi0JDQmtCe0J3QotCg0JDQmtCi0JAAc2V0X9Ca0L7Qv9C40Y/QlNCQ0KLQkNCa
0J7QndCi0KDQkNCa0KLQkABnZXRf0JrQvtC/0LjRj9CS0JDQm9Cu0KLQkABzZXRf0JrQvtC/0LjR
j9CS0JDQm9Cu0KLQkABnZXRf0JrQvtC/0LjRj9CU0J7Qn9Ca0J7QlABzZXRf0JrQvtC/0LjRj9CU
0J7Qn9Ca0J7QlABnZXRf0JrQvtC/0LjRj9Ca0J7QlNCi0J3QktCt0JQAc2V0X9Ca0L7Qv9C40Y/Q
mtCe0JTQotCd0JLQrdCUAGdldF/QmtC+0L/QuNGP0J7Qn9CY0KHQkNCd0JjQldCe0JHQqdCV0JUA
c2V0X9Ca0L7Qv9C40Y/QntCf0JjQodCQ0J3QmNCV0J7QkdCp0JXQlQBnZXRf0JrQvtC/0LjRj9CQ
0KDQotCY0JrQo9CbAHNldF/QmtC+0L/QuNGP0JDQoNCi0JjQmtCj0JsAZ2V0X9Ca0L7Qv9C40Y/Q
mtCe0JvQmNCn0JXQodCi0JLQngBzZXRf0JrQvtC/0LjRj9Ca0J7Qm9CY0KfQldCh0KLQktCeAGdl
dF/QmtC+0L/QuNGP0KHQk9Cg0JTQngBzZXRf0JrQvtC/0LjRj9Ch0JPQoNCU0J4AZ2V0X9Ca0L7Q
v9C40Y/QodCV0KDQotCY0KTQmNCa0JDQotCU0KHQlNCeAHNldF/QmtC+0L/QuNGP0KHQldCg0KLQ
mNCk0JjQmtCQ0KLQlNCh0JTQngBnZXRf0JrQvtC/0LjRj9Cd0JXQotCi0J4Ac2V0X9Ca0L7Qv9C4
0Y/QndCV0KLQotCeAGdldF/QmtC+0L/QuNGP0JHQoNCj0KLQotCeAHNldF/QmtC+0L/QuNGP0JHQ
oNCj0KLQotCeAGdldF/QmtC+0L/QuNGP0KHQk9Cg0J3QntCc0JXQoABzZXRf0JrQvtC/0LjRj9Ch
0JPQoNCd0J7QnNCV0KAAZ2V0X9Ca0L7Qv9C40Y/QodCV0KDQotCY0KTQmNCa0JDQotCU0KHQndCe
0JzQldCgAHNldF/QmtC+0L/QuNGP0KHQldCg0KLQmNCk0JjQmtCQ0KLQlNCh0J3QntCc0JXQoABn
ZXRf0JrQvtC/0LjRj9Ca0J7QndCi0JXQmdCd0JXQoABzZXRf0JrQvtC/0LjRj9Ca0J7QndCi0JXQ
mdCd0JXQoABnZXRf0JrQvtC/0LjRj9CY0J3QktCe0JnQoQBzZXRf0JrQvtC/0LjRj9CY0J3QktCe
0JnQoQBnZXRf0JrQvtC/0LjRj9Ca0J7QndCi0KDQkNCa0KIAc2V0X9Ca0L7Qv9C40Y/QmtCe0J3Q
otCg0JDQmtCiAGdldF/QmtC+0L/QuNGP0KHQk9Cg0J7QogBzZXRf0JrQvtC/0LjRj9Ch0JPQoNCe
0KIAZ2V0X9Ca0L7Qv9C40Y/QodCV0KDQotCY0KTQmNCa0JDQotCU0KHQntCiAHNldF/QmtC+0L/Q
uNGP0KHQldCg0KLQmNCk0JjQmtCQ0KLQlNCh0J7QogBnZXRf0JrQvtC/0LjRj9Ca0J7Qm9CS0J7Q
nNCV0KHQogBzZXRf0JrQvtC/0LjRj9Ca0J7Qm9CS0J7QnNCV0KHQogBnZXRf0JrQvtC/0LjRj9Cc
0J7QlNCV0JvQrABzZXRf0JrQvtC/0LjRj9Cc0J7QlNCV0JvQrABnZXRf0JrQvtC/0LjRj9Cf0KDQ
ntCY0JfQktCe0JTQmNCi0JXQm9CsAHNldF/QmtC+0L/QuNGP0J/QoNCe0JjQl9CS0J7QlNCY0KLQ
ldCb0KwAZ2V0X9Ca0L7Qv9C40Y/QodCi0J7QmNCc0J7QodCi0KwAc2V0X9Ca0L7Qv9C40Y/QodCi
0J7QmNCc0J7QodCi0KwAZ2V0X9Ca0L7Qv9C40Y/QodCi0KDQkNCd0JDQn9Cg0J7QmNCh0KXQntCW
0JTQldCd0JjQrwBzZXRf0JrQvtC/0LjRj9Ch0KLQoNCQ0J3QkNCf0KDQntCY0KHQpdCe0JbQlNCV
0J3QmNCvAGdldF/QmtC+0L/QuNGP0JXQlNCY0J3QmNCm0JDQmNCX0JzQldCg0JXQndCY0K8Ac2V0
X9Ca0L7Qv9C40Y/QldCU0JjQndCY0KbQkNCY0JfQnNCV0KDQldCd0JjQrwAAAAAAgJtJAHMATgB1
AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8A
IABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABl
ACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAwAAAPZABvAGMA
ZwB1AGkAZAAAcVMAQwBfADQAYgA4AGQAMAAyAGIANwA5AGYAZQBhADQAYQA5ADMAOQA4AGUAZgBi
ADQAYgA2AGMAZgBkADkANwBlADQANAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUA
cgBjAGUAcwAAR9UcWoTN6EG/O8yTBXyDyQAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERZQUAARFN
DgMgAA4JIAMBEj0dCBJBAwYSPQMGHQgEIAEOCAUgAgEIHAQgAQIIBSABEUUIBSABEUkIAyAAAgcg
AgIOEYCBBSABHQgIBSAAEoCFBiABEoCJHAUAABKAjQYgARwSgJEIAAESgJURgJkFIAASgJ0HIAIB
DhKAnQi3elxWGTTgiQiJhF3NgIDMkQIGCAMGEhQDBhIYAwYSUQMGEl0DBhJhAwYSIAUgAQESDAQg
AQECBCAAEUUFIAEBEUUEIAARSQUgAQERSQUgAQERTQkgBAEIDhI9EkEFIAEBElEEAAASXQQAABJh
BQABARJhBAAAEiADAAABAygADgMoAAIEKAARRQQoABFJBCgAEU0DKAAIBAgAEl0ECAASYQQIABIg
CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ180
YjhkMDJiNzlmZWE0YTkzOThlZmI0YjZjZmQ5N2U0NAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAy
MDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuNQQBAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291
cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1u
ZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMu
UnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADgWAAAAAAAAAAAAAD6WAAA
ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7FgAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVl
LmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAA
AAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAOwDAAAAAAAAAAAA
AOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAA
AAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJ
AG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAAAQBTAHQA
cgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBD
AG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAA
cAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADQAYgA4AGQAMAAy
AGIANwA5AGYAZQBhADQAYQA5ADMAOQA4AGUAZgBiADQAYgA2AGMAZgBkADkANwBlADQANAAAADAA
CAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0
AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8ANABiADgAZAAwADIAYgA3ADkAZgBlAGEANABhADkA
MwA5ADgAZQBmAGIANABiADYAYwBmAGQAOQA3AGUANAA0AC4AZABsAGwAAABIABIAAQBMAGUAZwBh
AGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAA
AAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBp
AGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwA0AGIAOABkADAAMgBiADcAOQBmAGUA
YQA0AGEAOQAzADkAOABlAGYAYgA0AGIANgBjAGYAZAA5ADcAZQA0ADQALgBkAGwAbAAAAGgAJAAB
AFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8ANABiADgAZAAwADIAYgA3ADkAZgBlAGEA
NABhADkAMwA5ADgAZQBmAGIANABiADYAYwBmAGQAOQA3AGUANAA0AAAANAAIAAEAUAByAG8AZAB1
AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwA
eQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAwAAAAMOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_4b8d02b79fea4a9398efb4b6cfd97e44</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::docguid</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">aed9692909790f7bdc3f6083af12ae3d</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">6e4bfbc453ca15c648a81518198f1bd47160909a</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия АРТИКУЛ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия АРТИКУЛ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия АРТИКУЛ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия МОДЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия МОДЕЛЬ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия МОДЕЛЬ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ПРОИЗВОДИТЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="500"
                          cachedName="Копия ПРОИЗВОДИТЕЛЬ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ПРОИЗВОДИТЕЛЬ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ТОРГОВАЯ МАРКА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ТОРГОВАЯ МАРКА"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ТОРГОВАЯ МАРКА]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия КОЛИЧЕСТВО]"
                          cachedDataType="decimal"
                          cachedName="Копия КОЛИЧЕСТВО"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛИЧЕСТВО]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ЕДИНИЦА ИЗМЕРЕНИЯ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СТОИМОСТЬ]"
                          cachedDataType="decimal"
                          cachedName="Копия СТОИМОСТЬ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТОИМОСТЬ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ВАЛЮТА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ВАЛЮТА"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ВАЛЮТА]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия НЕТТО]"
                          cachedDataType="decimal"
                          cachedName="Копия НЕТТО"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НЕТТО]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия БРУТТО]"
                          cachedDataType="decimal"
                          cachedName="Копия БРУТТО"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия БРУТТО]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия КОЛ-ВО МЕСТ]"
                          cachedDataType="decimal"
                          cachedName="Копия КОЛ-ВО МЕСТ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛ-ВО МЕСТ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ИНВОЙС]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ИНВОЙС"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ИНВОЙС]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ДАТА ИНВОЙСА]"
                          cachedDataType="date"
                          cachedName="Копия ДАТА ИНВОЙСА"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА ИНВОЙСА]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия КОНТРАКТ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия КОНТРАКТ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТРАКТ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ДАТА КОНТРАКТА]"
                          cachedDataType="date"
                          cachedName="Копия ДАТА КОНТРАКТА"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА КОНТРАКТА]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия НОМЕР ГРУЗА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия НОМЕР ГРУЗА"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НОМЕР ГРУЗА]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СТРАНА ПРОИСХОЖДЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия СТРАНА ПРОИСХОЖДЕНИЯ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТРАНА ПРОИСХОЖДЕНИЯ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ДОП#КОД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия ДОП#КОД"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДОП#КОД]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия КОД ТНВЭД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия КОД ТНВЭД"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОД ТНВЭД]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СЕРТИФИКАТ/ДС НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия СЕРТИФИКАТ/ДС НОМЕР"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС НОМЕР]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СЕРТИФИКАТ/ДС ОТ]"
                          cachedDataType="date"
                          cachedName="Копия СЕРТИФИКАТ/ДС ОТ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ОТ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СЕРТИФИКАТ/ДС ДО]"
                          cachedDataType="date"
                          cachedName="Копия СЕРТИФИКАТ/ДС ДО"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ДО]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СГР НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия СГР НОМЕР"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР НОМЕР]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СГР ОТ]"
                          cachedDataType="date"
                          cachedName="Копия СГР ОТ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ОТ]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия СГР ДО]"
                          cachedDataType="date"
                          cachedName="Копия СГР ДО"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ДО]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ОПИСАНИЕ ТОВАРА]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="Копия ОПИСАНИЕ ТОВАРА"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ТОВАРА]"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия ОПИСАНИЕ ОБЩЕЕ]"
                          cachedDataType="wstr"
                          cachedLength="4000"
                          cachedName="Копия ОПИСАНИЕ ОБЩЕЕ"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ОБЩЕЕ]"
                          name="Копия ОПИСАНИЕ ОБЩЕЕ"
                          usageType="readWrite" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0].Columns[Копия КОНТЕЙНЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="Копия КОНТЕЙНЕР"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТЕЙНЕР]"
                          usageType="readWrite" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0].Columns[guid]"
                          dataType="guid"
                          lineageId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0].Columns[guid]"
                          name="guid" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0].Columns[rowid]"
                          dataType="i4"
                          description="номер строки"
                          lineageId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0].Columns[rowid]"
                          name="rowid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Process files\Insert request_contents\Transformation to nvarchar"
                  componentClassID="Microsoft.DataConvert"
                  contactInfo="Преобразование данных;Корпорация Майкрософт. Microsoft SQL Server. (C) Корпорация Майкрософт (Microsoft Corporation). Все права защищены. http://www.microsoft.com/sql/support;0"
                  description="Преобразование данных"
                  name="Transformation to nvarchar"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных]"
                      name="Входные данные преобразования данных">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[АРТИКУЛ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="АРТИКУЛ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[АРТИКУЛ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[МОДЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="МОДЕЛЬ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[МОДЕЛЬ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ПРОИЗВОДИТЕЛЬ]"
                          cachedDataType="wstr"
                          cachedLength="500"
                          cachedName="ПРОИЗВОДИТЕЛЬ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ПРОИЗВОДИТЕЛЬ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ТОРГОВАЯ МАРКА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ТОРГОВАЯ МАРКА"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ТОРГОВАЯ МАРКА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[КОЛИЧЕСТВО]"
                          cachedDataType="decimal"
                          cachedName="КОЛИЧЕСТВО"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОЛИЧЕСТВО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ЕДИНИЦА ИЗМЕРЕНИЯ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СТОИМОСТЬ]"
                          cachedDataType="decimal"
                          cachedName="СТОИМОСТЬ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СТОИМОСТЬ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ВАЛЮТА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ВАЛЮТА"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ВАЛЮТА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[НЕТТО]"
                          cachedDataType="decimal"
                          cachedName="НЕТТО"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[НЕТТО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[БРУТТО]"
                          cachedDataType="decimal"
                          cachedName="БРУТТО"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[БРУТТО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[КОЛ-ВО МЕСТ]"
                          cachedDataType="decimal"
                          cachedName="КОЛ-ВО МЕСТ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОЛ-ВО МЕСТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ИНВОЙС]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ИНВОЙС"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ИНВОЙС]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ДАТА ИНВОЙСА]"
                          cachedDataType="date"
                          cachedName="ДАТА ИНВОЙСА"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДАТА ИНВОЙСА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[КОНТРАКТ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="КОНТРАКТ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОНТРАКТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ДАТА КОНТРАКТА]"
                          cachedDataType="date"
                          cachedName="ДАТА КОНТРАКТА"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДАТА КОНТРАКТА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[НОМЕР ГРУЗА]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="НОМЕР ГРУЗА"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[НОМЕР ГРУЗА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="СТРАНА ПРОИСХОЖДЕНИЯ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[КОД ТНВЭД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="КОД ТНВЭД"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОД ТНВЭД]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ДОП#КОД]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="ДОП#КОД"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ДОП#КОД]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СЕРТИФИКАТ/ДС НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="СЕРТИФИКАТ/ДС НОМЕР"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС НОМЕР]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СЕРТИФИКАТ/ДС ОТ]"
                          cachedDataType="date"
                          cachedName="СЕРТИФИКАТ/ДС ОТ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ОТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СЕРТИФИКАТ/ДС ДО]"
                          cachedDataType="date"
                          cachedName="СЕРТИФИКАТ/ДС ДО"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СЕРТИФИКАТ/ДС ДО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СГР НОМЕР]"
                          cachedDataType="wstr"
                          cachedLength="255"
                          cachedName="СГР НОМЕР"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР НОМЕР]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СГР ОТ]"
                          cachedDataType="date"
                          cachedName="СГР ОТ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР ОТ]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[СГР ДО]"
                          cachedDataType="date"
                          cachedName="СГР ДО"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[СГР ДО]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ОПИСАНИЕ ТОВАРА]"
                          cachedDataType="nText"
                          cachedName="ОПИСАНИЕ ТОВАРА"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ТОВАРА]" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          cachedDataType="nText"
                          cachedName="ОПИСАНИЕ ОБЩЕЕ"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[ОПИСАНИЕ ОБЩЕЕ]"
                          name="ОПИСАНИЕ ОБЩЕЕ" />
                        <inputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных].Columns[КОНТЕЙНЕР]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="КОНТЕЙНЕР"
                          lineageId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;].Columns[КОНТЕЙНЕР]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных]"
                      exclusionGroup="1"
                      name="Выходные данные преобразования данных"
                      synchronousInputId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия АРТИКУЛ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия АРТИКУЛ]"
                          name="Копия АРТИКУЛ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[АРТИКУЛ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия МОДЕЛЬ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия МОДЕЛЬ]"
                          name="Копия МОДЕЛЬ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[МОДЕЛЬ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ПРОИЗВОДИТЕЛЬ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="500"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ПРОИЗВОДИТЕЛЬ]"
                          name="Копия ПРОИЗВОДИТЕЛЬ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ПРОИЗВОДИТЕЛЬ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ТОРГОВАЯ МАРКА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ТОРГОВАЯ МАРКА]"
                          name="Копия ТОРГОВАЯ МАРКА"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ТОРГОВАЯ МАРКА]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛИЧЕСТВО]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛИЧЕСТВО]"
                          name="Копия КОЛИЧЕСТВО"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[КОЛИЧЕСТВО]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ЕДИНИЦА ИЗМЕРЕНИЯ]"
                          name="Копия ЕДИНИЦА ИЗМЕРЕНИЯ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ЕДИНИЦА ИЗМЕРЕНИЯ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТОИМОСТЬ]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТОИМОСТЬ]"
                          name="Копия СТОИМОСТЬ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СТОИМОСТЬ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ВАЛЮТА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ВАЛЮТА]"
                          name="Копия ВАЛЮТА"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ВАЛЮТА]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НЕТТО]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НЕТТО]"
                          name="Копия НЕТТО"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[НЕТТО]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия БРУТТО]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия БРУТТО]"
                          name="Копия БРУТТО"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[БРУТТО]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛ-ВО МЕСТ]"
                          dataType="decimal"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОЛ-ВО МЕСТ]"
                          name="Копия КОЛ-ВО МЕСТ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[КОЛ-ВО МЕСТ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ИНВОЙС]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ИНВОЙС]"
                          name="Копия ИНВОЙС"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ИНВОЙС]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА ИНВОЙСА]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА ИНВОЙСА]"
                          name="Копия ДАТА ИНВОЙСА"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ДАТА ИНВОЙСА]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТРАКТ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТРАКТ]"
                          name="Копия КОНТРАКТ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[КОНТРАКТ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА КОНТРАКТА]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДАТА КОНТРАКТА]"
                          name="Копия ДАТА КОНТРАКТА"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ДАТА КОНТРАКТА]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НОМЕР ГРУЗА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия НОМЕР ГРУЗА]"
                          name="Копия НОМЕР ГРУЗА"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[НОМЕР ГРУЗА]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТРАНА ПРОИСХОЖДЕНИЯ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СТРАНА ПРОИСХОЖДЕНИЯ]"
                          name="Копия СТРАНА ПРОИСХОЖДЕНИЯ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СТРАНА ПРОИСХОЖДЕНИЯ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОД ТНВЭД]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОД ТНВЭД]"
                          name="Копия КОД ТНВЭД"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[КОД ТНВЭД]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДОП#КОД]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ДОП#КОД]"
                          name="Копия ДОП#КОД"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ДОП#КОД]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС НОМЕР]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС НОМЕР]"
                          name="Копия СЕРТИФИКАТ/ДС НОМЕР"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СЕРТИФИКАТ/ДС НОМЕР]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ОТ]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ОТ]"
                          name="Копия СЕРТИФИКАТ/ДС ОТ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СЕРТИФИКАТ/ДС ОТ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ДО]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СЕРТИФИКАТ/ДС ДО]"
                          name="Копия СЕРТИФИКАТ/ДС ДО"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СЕРТИФИКАТ/ДС ДО]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР НОМЕР]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР НОМЕР]"
                          name="Копия СГР НОМЕР"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СГР НОМЕР]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ОТ]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ОТ]"
                          name="Копия СГР ОТ"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СГР ОТ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ДО]"
                          dataType="date"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия СГР ДО]"
                          name="Копия СГР ДО"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[СГР ДО]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ТОВАРА]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="4000"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ТОВАРА]"
                          name="Копия ОПИСАНИЕ ТОВАРА"
                          truncationRowDisposition="IgnoreFailure">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ОПИСАНИЕ ТОВАРА]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ОБЩЕЕ]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="4000"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия ОПИСАНИЕ ОБЩЕЕ]"
                          name="Копия ОПИСАНИЕ ОБЩЕЕ"
                          truncationRowDisposition="IgnoreFailure">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[ОПИСАНИЕ ОБЩЕЕ]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТЕЙНЕР]"
                          dataType="wstr"
                          errorOrTruncationOperation="Преобразование"
                          errorRowDisposition="FailComponent"
                          length="255"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных].Columns[Копия КОНТЕЙНЕР]"
                          name="Копия КОНТЕЙНЕР"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Указывает входной столбец, служащий источником данных для преобразования."
                              name="SourceInputColumnLineageID">#{Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника "Excel"].Columns[КОНТЕЙНЕР]}</property>
                            <property
                              dataType="System.Boolean"
                              description="Указывает, используются ли в столбце более производительные, не зависящие от локалей процедуры синтаксического анализа."
                              name="FastParse">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные ошибок преобразования данных]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Выходные данные ошибок преобразования данных"
                      synchronousInputId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные ошибок преобразования данных].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные ошибок преобразования данных].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные ошибок преобразования данных].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные ошибок преобразования данных].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Process files\Insert request_contents.Paths[Output 0]"
                  endId="Package\Process files\Insert request_contents\INSERT request_contents.Inputs[ADO NET Destination Input]"
                  name="Output 0"
                  startId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Outputs[Output 0]" />
                <path
                  refId="Package\Process files\Insert request_contents.Paths[Product]"
                  endId="Package\Process files\Insert request_contents\Row ID, GUID, UCASE.Inputs[Input 0]"
                  name="Product"
                  startId="Package\Process files\Insert request_contents\Row filter.Outputs[Product]" />
                <path
                  refId="Package\Process files\Insert request_contents.Paths[Выход источника &quot;Excel&quot;]"
                  endId="Package\Process files\Insert request_contents\Transformation to nvarchar.Inputs[Входные данные преобразования данных]"
                  name="Выход источника &quot;Excel&quot;"
                  startId="Package\Process files\Insert request_contents\Excel request load.Outputs[Выход источника &quot;Excel&quot;]" />
                <path
                  refId="Package\Process files\Insert request_contents.Paths[Выходные данные преобразования данных]"
                  endId="Package\Process files\Insert request_contents\Row filter.Inputs[Вход условного разбиения]"
                  name="Выходные данные преобразования данных"
                  startId="Package\Process files\Insert request_contents\Transformation to nvarchar.Outputs[Выходные данные преобразования данных]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Replace Excel file"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{2a370720-5239-4531-aa4e-7c86b200f011}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Replace Excel file"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_5c70a032703a48a8b0be976550da8f48"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::excelpath">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_20d805f1ea644a19a60abfc518354d5c")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_20d805f1ea644a19a60abfc518354d5c")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion
using System.IO;

namespace ST_20d805f1ea644a19a60abfc518354d5c
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string path = (string)Dts.Variables["User::excelpath"].Value;
            string source = @"\\10.10.0.28\alta\Robot\Data\шаблон.xlsx";
            
            File.Delete(path);            
            File.Copy(source, path);

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_5c70a032703a48a8b0be976550da8f48.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{e908a586-7798-49cb-8acb-a56255081cec}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_20d805f1ea644a19a60abfc518354d5c</RootNamespace><AssemblyName>ST_5c70a032703a48a8b0be976550da8f48</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" /><Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host><ProjectClient><HostIdentifier>SSIS_ST130</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_20d805f1ea644a19a60abfc518354d5c</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_20d805f1ea644a19a60abfc518354d5c</msb:DisplayName>
		<msb:ProjectId>{D88DDAA4-3E89-4A68-B7AD-30F676B8DBCB}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_5c70a032703a48a8b0be976550da8f48.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Settings.get_Default():ST_20d805f1ea644a19a60abfc518354d5c.Properties.Sett" +
    "ings")]

namespace ST_20d805f1ea644a19a60abfc518354d5c.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_20d805f1ea644a19a60abfc518354d5c.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_20d805f1ea644a19a60abfc518354d5c.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_5c70a032703a48a8b0be976550da8f48.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEg0b14AAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAQi4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPAtAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAASA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAk
LgAAAAAAAEgAAAACAAUAACEAADgMAAABAAAAAAAAADgtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAgA+AAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKdBsAAAEKciEAAHAGKBQAAAoGKBUAAAoCKBAAAAoWbxYAAAoqHgIoFwAACioeAigYAAAKKq5+
AQAABC0ecnMAAHDQAwAAAigZAAAKbxoAAApzGwAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQq
Gn4DAAAEKh4CKBwAAAoqLnMIAAAGgAMAAAQqQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAA
BQBsAAAA0AMAACN+AAA8BAAAmAUAACNTdHJpbmdzAAAAANQJAADoAAAAI1VTALwKAAAQAAAAI0dV
SUQAAADMCgAAbAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6ATMAFgAAAQAAAB8AAAAFAAAA
BgAAAAkAAAABAAAAHAAAAAIAAAAQAAAAAQAAAAIAAAADAAAABAAAAAEAAAAEAAAAAQAAAAEAAAAA
AK0DAQAAAAAABgBfAn0EBgDuAn0EBgCrAWoEDwDxBAAABgDYASsEBgBCAisEBgAjAisEBgDVAisE
BgB/AisEBgCYAisEBgDvASsEBgAKAhwDCgCzAlwDCgAjAVwDBgDlA94DBgCOAWoEBgBkBd4DBgBN
BJ0EBgA9BBYEDgBXAZcDDgC/AZcDDgA/AQEEBgBzAX0ECgCFA1wDEgAzBc4AEgCcAM4ABgA2A94D
BgDJAC4ABgDuAN4DBgClAN4DBgCKBSsEAAAAACUAAAAAAAEAAQABABAA9gNoADkAAQABAAAAEACk
BAAFRQABAAMAAAEQAD0FAAVZAAMABwADAQAAVgUAAD0ABAAKABEA6gNtABEAEwFxABEAjAB1AAYG
VwB5AFaARgV8AFaA8wB8AFAgAAAAAIYA/AMGAAEAmiAAAAAAhhhdBAYAAQCiIAAAAACDGF0EBgAB
AKogAAAAAJMISQSAAAEA1iAAAAAAkwj7AIUAAQDdIAAAAACTCAcBigABAOUgAAAAAJYIawWQAAIA
7CAAAAAAhhhdBAYAAgD0IAAAAACRGGMElQACAAAAAQAWAwkAXQQBABEAXQQGABkAXQQKACkAXQQQ
ADEAXQQQADkAXQQQAEEAXQQQAEkAXQQQAFEAXQQQAFkAXQQQAGEAXQQQAGkAXQQGAIEAXQQGAKkA
XQQVALkAXQQGAHEATgUfAMEALwUkAMkA1QMpANEADAMvAOEAbAEzAOEAkwU4AMEAdwUBAHEAXQQG
AIkAXQQGAOkAtwA+AOkAhgVFAJEAXQRKALEAXQQGAAgAFABjAAgAGABoACkAcwDQAC4ACwCoAC4A
EwCxAC4AGwDQAC4AIwDZAC4AKwACAS4AMwACAS4AOwACAS4AQwDZAC4ASwAIAS4AUwACAS4AWwAf
AUMAYwBoAEkAcwDQAGEAewBoAGMAawBoABsAAwABAAQAAwAAAE0EmQAAABsBngAAAG8FowACAAQA
AwACAAUABQABAAYABQACAAcABwAEgAAAAQAAANQce04AAAAAAAABAAAABAAAAAAAAAAAAAAAUQBf
AAAAAAANAAAAAAAAAAAAAABaAD0DAAAAAAQAAAAAAAAAAAAAAFEA3gMAAAAADQAAAAAAAAAAAAAA
WgA4AAAAAAAAAAAAAQAAAK4EAAAFAAIAAAAAAABTVF81YzcwYTAzMjcwM2E0OGE4YjBiZTk3NjU1
MGRhOGY0OAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRT
AHZhbHVlX18AbXNjb3JsaWIAU1RfMjBkODA1ZjFlYTY0NGExOWE2MGFiZmM1MTgzNTRkNWMAZGVm
YXVsdEluc3RhbmNlAFZhcmlhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxl
AEZpbGUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1
bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVs
QmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEZWxldGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFN0cmlu
ZwBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
VGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwA
U1RfNWM3MGEwMzI3MDNhNDhhOGIwYmU5NzY1NTBkYThmNDguZGxsAGdldF9JdGVtAFN5c3RlbQBF
bnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkds
b2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFu
YWdlcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBp
bGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8yMGQ4MDVmMWVhNjQ0YTE5YTYwYWJmYzUx
ODM1NGQ1Yy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1Rf
MjBkODA1ZjFlYTY0NGExOWE2MGFiZmM1MTgzNTRkNWMuUHJvcGVydGllcwBnZXRfVmFyaWFibGVz
AFNldHRpbmdzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAE9iamVjdABnZXRfRGVmYXVs
dABzZXRfVGFza1Jlc3VsdABnZXRfQXNzZW1ibHkAQ29weQAAH1UAcwBlAHIAOgA6AGUAeABjAGUA
bABwAGEAdABoAABRXABcADEAMAAuADEAMAAuADAALgAyADgAXABhAGwAdABhAFwAUgBvAGIAbwB0
AFwARABhAHQAYQBcAEgEMAQxBDsEPgQ9BC4AeABsAHMAeAABcVMAVABfADIAMABkADgAMAA1AGYA
MQBlAGEANgA0ADQAYQAxADkAYQA2ADAAYQBiAGYAYwA1ADEAOAAzADUANABkADUAYwAuAFAAcgBv
AHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAAZ8mbxsRwJ0yrtZX1yFDtcAAE
IAEBCAMgAAEFIAEBEREEIAEBDgUgAQERUQMHAQ4EIAASYQQgABJlBSABEmkcAyAAHAQAAQEOBQAC
AQ4OBgABEnUReQQgABJ9BiACAQ4SfQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJJAwYS
TQMGEhACBggDBhEUBAAAEkkEAAASTQUAAQESTQQAABIQAwAAAQQIABJJBAgAEk0ECAASEAgBAAgA
AAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMjBkODA1
ZjFlYTY0NGExOWE2MGFiZmM1MTgzNTRkNWMAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAA
SQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIu
TkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVz
b3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVS
ZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAGC4AAAAAAAAAAAAAMi4AAAAgAAAAAAAA
AAAAAAAAAAAAAAAAAAAAACQuAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAA
AP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQB7TtQcAAABAHtO1Bw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfADIAMABkADgAMAA1AGYAMQBlAGEANgA0ADQAYQAxADkAYQA2ADAAYQBiAGYAYwA1
ADEAOAAzADUANABkADUAYwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA3ADMAOAAwAC4AMgAwADAAOQAxAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfADUAYwA3ADAAYQAwADMAMgA3ADAAMwBhADQAOABhADgAYgAwAGIAZQA5ADcANgA1ADUA
MABkAGEAOABmADQAOAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAwAAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8ANQBjADcAMABhADAAMwAyADcAMAAzAGEANAA4AGEAOABiADAAYgBlADkA
NwA2ADUANQAwAGQAYQA4AGYANAA4AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADIAMABkADgAMAA1AGYAMQBlAGEANgA0ADQAYQAxADkAYQA2ADAAYQBiAGYA
YwA1ADEAOAAzADUANABkADUAYwAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANwAzADgAMAAuADIAMAAwADkAMQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAzADgAMAAuADIAMAAwADkAMQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAABEPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\Success notification"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:DelayValidation="True"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{a0a866eb-0f30-4130-8054-5bd4947472c2}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Success notification"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="FileAttachments">@[User::excelpath]</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="ToLine">@[User::sendermail]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{38CB1C84-40CD-41BC-8A75-875E136A6E39}"
              SendMailTask:From="declaration@eltransplus.ru"
              SendMailTask:BCC="declaration@eltransplus.ru"
              SendMailTask:Subject="Обработка таблицы успешно завершена" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask">
              <SendMailTask:Attachments
                SendMailTask:FileName="\\10.10.0.28\alta\Robot\Data\шаблон.xlsx" />
            </SendMailTask:SendMailTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\UPDATE processed failed"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{3A50E9E5-B9EC-4121-B7BB-026A4F1F1054}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="UPDATE processed failed"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
              SQLTask:SqlStatementSource="DECLARE @id int&#xA;SET @id = ?&#xA;UPDATE [automation].[dbo].[request_list]&#xA;SET [processed] = 2&#xA;WHERE [id] = @id&#xA;GO" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@id"
                SQLTask:DtsVariableName="User::idrequest"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Process files\UPDATE processed success"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{ef6c3d4c-49b9-425f-9a52-eb8dcbbf2d92}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="UPDATE processed success"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
              SQLTask:SqlStatementSource="DECLARE @id int&#xA;SET @id = ?&#xA;UPDATE [automation].[dbo].[request_list]&#xA;SET [processed] = 1&#xA;WHERE [id] = @id&#xA;GO" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@id"
                SQLTask:DtsVariableName="User::idrequest"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение]"
          DTS:CreationName=""
          DTS:DTSID="{C78C1E81-D5A9-4B9F-B52C-7DEC55ED6DEF}"
          DTS:From="Package\Process files\Insert request_contents"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение"
          DTS:To="Package\Process files\UPDATE processed failed"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 1]"
          DTS:CreationName=""
          DTS:DTSID="{C64FBAC0-35EB-4336-8ABA-885A3AA84206}"
          DTS:From="Package\Process files\UPDATE processed failed"
          DTS:ObjectName="Ограничение 1"
          DTS:To="Package\Process files\Failure notification" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 10]"
          DTS:CreationName=""
          DTS:DTSID="{6B21EF82-15F3-4385-A972-273140DDBAE3}"
          DTS:From="Package\Process files\Replace Excel file"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 10"
          DTS:To="Package\Process files\Copy contents to temp table" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 11]"
          DTS:CreationName=""
          DTS:DTSID="{667E2275-4224-4EE9-9248-5CB3F036B984}"
          DTS:From="Package\Process files\Copy contents to temp table"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 11"
          DTS:To="Package\Process files\Fill new Excel" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 12]"
          DTS:CreationName=""
          DTS:DTSID="{77607644-ED99-40DD-BDE1-AEC3527916A4}"
          DTS:From="Package\Process files\Create XML files"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 12"
          DTS:To="Package\Process files\Success notification" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 13]"
          DTS:CreationName=""
          DTS:DTSID="{DAC80CFB-6481-47D1-B073-8D1E7DAA0391}"
          DTS:From="Package\Process files\Compose additional documents"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 13"
          DTS:To="Package\Process files\Create XML files" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 14]"
          DTS:CreationName=""
          DTS:DTSID="{38E12EE1-17E4-46DB-843D-7BBE198BCDEF}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::emptycoderows] != 0"
          DTS:From="Package\Process files\Checkpoint"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 14"
          DTS:To="Package\Process files\Development notification" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 15]"
          DTS:CreationName=""
          DTS:DTSID="{708124BE-6EEC-4684-8716-6C4551F3DC43}"
          DTS:From="Package\Process files\Development notification"
          DTS:ObjectName="Ограничение 15"
          DTS:To="Package\Process files\Delete request file"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 16]"
          DTS:CreationName=""
          DTS:DTSID="{7FC6BF51-FB3D-467E-923B-7023D982722E}"
          DTS:From="Package\Process files\Success notification"
          DTS:ObjectName="Ограничение 16"
          DTS:To="Package\Process files\Delete request file"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 17]"
          DTS:CreationName=""
          DTS:DTSID="{00DF934E-C029-4679-AC36-C7960E428967}"
          DTS:From="Package\Process files\Compose header"
          DTS:ObjectName="Ограничение 17"
          DTS:To="Package\Process files\Failure notification"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 18]"
          DTS:CreationName=""
          DTS:DTSID="{B65FA0D5-04BB-4BD0-A5E9-457A9C6F24F3}"
          DTS:From="Package\Process files\Compose additional documents"
          DTS:ObjectName="Ограничение 18"
          DTS:To="Package\Process files\Failure notification"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 19]"
          DTS:CreationName=""
          DTS:DTSID="{B0B0B9BF-A5FD-42FF-B23D-D87273C2B552}"
          DTS:From="Package\Process files\Create XML files"
          DTS:ObjectName="Ограничение 19"
          DTS:To="Package\Process files\Failure notification"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 2]"
          DTS:CreationName=""
          DTS:DTSID="{5B75317D-014C-40D5-B64E-6BCD178F4B34}"
          DTS:From="Package\Process files\Insert request_contents"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 2"
          DTS:To="Package\Process files\UPDATE processed success" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 3]"
          DTS:CreationName=""
          DTS:DTSID="{135148F5-22AF-4109-A860-F045556EE011}"
          DTS:From="Package\Process files\Add data BI"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 3"
          DTS:To="Package\Process files\Add data Alta" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 4]"
          DTS:CreationName=""
          DTS:DTSID="{2E420950-1A27-4350-A0D9-915E49862AC6}"
          DTS:From="Package\Process files\Failure notification"
          DTS:ObjectName="Ограничение 4"
          DTS:To="Package\Process files\Delete request file"
          DTS:Value="2" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 5]"
          DTS:CreationName=""
          DTS:DTSID="{B0AE8311-5F0E-4629-9917-441330FA77CA}"
          DTS:From="Package\Process files\UPDATE processed success"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 5"
          DTS:To="Package\Process files\Add data BI" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 6]"
          DTS:CreationName=""
          DTS:DTSID="{825E96C1-1E58-42C7-9986-29937286BD29}"
          DTS:From="Package\Process files\Add data Alta"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 6"
          DTS:To="Package\Process files\Replace Excel file" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 7]"
          DTS:CreationName=""
          DTS:DTSID="{61D30FC9-C7DC-442E-AE30-17C38169F222}"
          DTS:From="Package\Process files\Fill new Excel"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 7"
          DTS:To="Package\Process files\Checkpoint" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 8]"
          DTS:CreationName=""
          DTS:DTSID="{ABD662A2-BB6A-417E-9F07-D70B2EB03819}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::emptycoderows] == 0"
          DTS:From="Package\Process files\Checkpoint"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 8"
          DTS:To="Package\Process files\Compose header" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Process files.PrecedenceConstraints[Ограничение 9]"
          DTS:CreationName=""
          DTS:DTSID="{3F684AAB-F161-4CC9-92CC-BCF17BA3002A}"
          DTS:From="Package\Process files\Compose header"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Ограничение 9"
          DTS:To="Package\Process files\Compose additional documents" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{13317DA0-7350-4218-84D7-1774A1428E76}"
          DTS:ObjectName="{13317DA0-7350-4218-84D7-1774A1428E76}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::docguid" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{F0A4C832-61D4-4FA1-87CC-9EB2F9E479B5}"
          DTS:ObjectName="{F0A4C832-61D4-4FA1-87CC-9EB2F9E479B5}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::excelpath" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{7E0AF667-4A61-44CB-B98F-D4B8F7192E0D}"
          DTS:ObjectName="{7E0AF667-4A61-44CB-B98F-D4B8F7192E0D}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::sendermail" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{0A0CBB6C-5E46-47C7-9782-73DFB2086711}"
          DTS:ObjectName="{0A0CBB6C-5E46-47C7-9782-73DFB2086711}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::idrequest" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\SELECT new files"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{C183C2C7-6ED5-45AD-9DF8-0382B8B44E89}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SELECT new files"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
          SQLTask:SqlStatementSource="SELECT [guid],[file_name],[email],[id]&#xA;FROM [automation].[dbo].[request_list]&#xA;WHERE [processed] = 0&#xA;GO"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::requesttable" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение]"
      DTS:CreationName=""
      DTS:DTSID="{07355C88-517A-4545-98CB-4BD49A631405}"
      DTS:From="Package\Download files from mail"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение"
      DTS:To="Package\SELECT new files"
      DTS:Value="2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 1]"
      DTS:CreationName=""
      DTS:DTSID="{1869D13A-8776-4020-B609-8BBA118F50BD}"
      DTS:From="Package\Process files"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 1"
      DTS:To="Package\Create EOJ + Bind"
      DTS:Value="2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 2]"
      DTS:CreationName=""
      DTS:DTSID="{7F079BDA-4024-4527-A4CB-9A65502F9A3B}"
      DTS:From="Package\SELECT new files"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 2"
      DTS:To="Package\Process files"
      DTS:Value="2" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--В данном разделе CDATA содержатся сведения о макете пакета. В данном разделе содержатся сведения о координатах (x,y), ширине и высоте.-->
<!--В случае возникновения ошибки при редактировании этого раздела вручную его можно удалить. -->
<!--Пакет можно загрузить обычным образом, но прежние сведения о макете будут утеряны, и конструктор автоматически перераспределит элементы в области конструктора.-->
<Objects
  Version="8">
  <!--Все приведенные ниже узлы будут содержать свойства, не влияющие на поведение среды выполнения.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="166,42"
          Id="Package\Create EOJ + Bind"
          TopLeft="348.47619047619,1604.65079365079" />
        <NodeLayout
          Size="196,42"
          Id="Package\Download files from mail"
          TopLeft="249.333333333333,38.6666666666667" />
        <NodeLayout
          Size="97,42"
          Id="Package\EOJ"
          TopLeft="520.5,593.5" />
        <NodeLayout
          Size="143,42"
          Id="Package\Process files\Add data Alta"
          TopLeft="181.5,311.5" />
        <NodeLayout
          Size="135,42"
          Id="Package\Process files\Add data BI"
          TopLeft="186.5,209.5" />
        <NodeLayout
          Size="131,42"
          Id="Package\Process files\Checkpoint"
          TopLeft="653.5,719.5" />
        <NodeLayout
          Size="226,42"
          Id="Package\Process files\Compose additional documents"
          TopLeft="274,908.5" />
        <NodeLayout
          Size="158,44"
          Id="Package\Process files\Compose header"
          TopLeft="174,819.5" />
        <NodeLayout
          Size="212,42"
          Id="Package\Process files\Copy contents to temp table"
          TopLeft="151,509.5" />
        <NodeLayout
          Size="155,42"
          Id="Package\Process files\Create XML files"
          TopLeft="379.5,1021.5" />
        <NodeLayout
          Size="165,42"
          Id="Package\Process files\Delete request file"
          TopLeft="392.5,1231.5" />
        <NodeLayout
          Size="196,42"
          Id="Package\Process files\Development notification"
          TopLeft="621,1129.5" />
        <NodeLayout
          Size="166,42"
          Id="Package\Process files\Failure notification"
          TopLeft="163,1129.5" />
        <NodeLayout
          Size="142,42"
          Id="Package\Process files\Fill new Excel"
          TopLeft="648,617.5" />
        <NodeLayout
          Size="191,42"
          Id="Package\Process files\Insert request_contents"
          TopLeft="5.5,5.5" />
        <NodeLayout
          Size="160,42"
          Id="Package\Process files\Replace Excel file"
          TopLeft="179,412.5" />
        <NodeLayout
          Size="171,42"
          Id="Package\Process files\Success notification"
          TopLeft="389.5,1129.5" />
        <NodeLayout
          Size="168,42"
          Id="Package\Process files\UPDATE processed failed"
          TopLeft="17.0000000000001,1027.5" />
        <NodeLayout
          Size="184,42"
          Id="Package\Process files\UPDATE processed success"
          TopLeft="162,107.5" />
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение]"
          TopLeft="70.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="30.5000000000001,980"
              Start="0,0"
              End="30.5000000000001,972.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,392.884735202492" />
                  <mssgle:CubicBezierSegment
                    Point1="0,392.884735202492"
                    Point2="0,396.884735202492"
                    Point3="4,396.884735202492" />
                  <mssgle:LineSegment
                    End="26.5000000000001,396.884735202492" />
                  <mssgle:CubicBezierSegment
                    Point1="26.5000000000001,396.884735202492"
                    Point2="30.5000000000001,396.884735202492"
                    Point3="30.5000000000001,400.884735202492" />
                  <mssgle:LineSegment
                    End="30.5000000000001,972.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="3.45578125000005,401.884735202492,23.5884375,10.1396484375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 1]"
          TopLeft="101,1069.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="97.6000000000001,60"
              Start="0,0"
              End="97.6000000000001,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.9898819561551" />
                  <mssgle:CubicBezierSegment
                    Point1="0,37.9898819561551"
                    Point2="0,41.9898819561551"
                    Point3="4,41.9898819561551" />
                  <mssgle:LineSegment
                    End="93.6000000000001,41.9898819561551" />
                  <mssgle:CubicBezierSegment
                    Point1="93.6000000000001,41.9898819561551"
                    Point2="97.6000000000001,41.9898819561551"
                    Point3="97.6000000000001,45.9898819561551" />
                  <mssgle:LineSegment
                    End="97.6000000000001,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 10]"
          TopLeft="258,454.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,55"
              Start="0,0"
              End="0,47.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,47.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 11]"
          TopLeft="257,551.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="462,66"
              Start="0,0"
              End="462,58.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29"
                    Point2="0,33"
                    Point3="4,33" />
                  <mssgle:LineSegment
                    End="458,33" />
                  <mssgle:CubicBezierSegment
                    Point1="458,33"
                    Point2="462,33"
                    Point3="462,37" />
                  <mssgle:LineSegment
                    End="462,58.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 12]"
          TopLeft="478.25,1063.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,66"
              Start="0,0"
              End="0,58.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,58.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 13]"
          TopLeft="423.333333333333,950.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="33.6666666666667,71"
              Start="0,0"
              End="33.6666666666667,63.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.6994727592267" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.6994727592267"
                    Point2="0,28.6994727592267"
                    Point3="4,28.6994727592267" />
                  <mssgle:LineSegment
                    End="29.6666666666667,28.6994727592267" />
                  <mssgle:CubicBezierSegment
                    Point1="29.6666666666667,28.6994727592267"
                    Point2="33.6666666666667,28.6994727592267"
                    Point3="33.6666666666667,32.6994727592267" />
                  <mssgle:LineSegment
                    End="33.6666666666667,63.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 14]"
          TopLeft="739.5,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-20.5,368"
              Start="0,0"
              End="-20.5,360.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,145.864253393665" />
                  <mssgle:CubicBezierSegment
                    Point1="0,145.864253393665"
                    Point2="0,149.864253393665"
                    Point3="-4,149.864253393665" />
                  <mssgle:LineSegment
                    End="-16.5,149.864253393665" />
                  <mssgle:CubicBezierSegment
                    Point1="-16.5,149.864253393665"
                    Point2="-20.5,149.864253393665"
                    Point3="-20.5,153.864253393665" />
                  <mssgle:LineSegment
                    End="-20.5,360.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.25,154.864253393665,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 15]"
          TopLeft="719,1171.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-204.75,60"
              Start="0,0"
              End="-204.75,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,35.3638170974155" />
                  <mssgle:CubicBezierSegment
                    Point1="0,35.3638170974155"
                    Point2="0,39.3638170974155"
                    Point3="-4,39.3638170974155" />
                  <mssgle:LineSegment
                    End="-200.75,39.3638170974155" />
                  <mssgle:CubicBezierSegment
                    Point1="-200.75,39.3638170974155"
                    Point2="-204.75,39.3638170974155"
                    Point3="-204.75,43.3638170974155" />
                  <mssgle:LineSegment
                    End="-204.75,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-131.25431640625,44.3638170974155,57.7586328125,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 16]"
          TopLeft="475,1171.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-28.87931640625,20.54296875,57.7586328125,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 17]"
          TopLeft="229.1,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,266"
              Start="0,0"
              End="0,258.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,258.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-11.79421875,124.18017578125,23.5884375,10.1396484375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 18]"
          TopLeft="350.666666666667,950.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-88.8666666666666,179"
              Start="0,0"
              End="-88.8666666666666,171.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,77.610812308339" />
                  <mssgle:CubicBezierSegment
                    Point1="0,77.610812308339"
                    Point2="0,81.610812308339"
                    Point3="-4,81.610812308339" />
                  <mssgle:LineSegment
                    End="-84.8666666666666,81.610812308339" />
                  <mssgle:CubicBezierSegment
                    Point1="-84.8666666666666,81.610812308339"
                    Point2="-88.8666666666666,81.610812308339"
                    Point3="-88.8666666666666,85.610812308339" />
                  <mssgle:LineSegment
                    End="-88.8666666666666,171.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-56.2275520833333,86.610812308339,23.5884375,10.1396484375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 19]"
          TopLeft="432.5,1063.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-139.1,66"
              Start="0,0"
              End="-139.1,58.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.5607711651299" />
                  <mssgle:CubicBezierSegment
                    Point1="0,36.5607711651299"
                    Point2="0,40.5607711651299"
                    Point3="-4,40.5607711651299" />
                  <mssgle:LineSegment
                    End="-135.1,40.5607711651299" />
                  <mssgle:CubicBezierSegment
                    Point1="-135.1,40.5607711651299"
                    Point2="-139.1,40.5607711651299"
                    Point3="-139.1,44.5607711651299" />
                  <mssgle:LineSegment
                    End="-139.1,58.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-81.34421875,45.5607711651299,23.5884375,10.1396484375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 2]"
          TopLeft="131.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="122.5,60"
              Start="0,0"
              End="122.5,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.2990654205607" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.2990654205607"
                    Point2="0,24.2990654205607"
                    Point3="4,24.2990654205607" />
                  <mssgle:LineSegment
                    End="118.5,24.2990654205607" />
                  <mssgle:CubicBezierSegment
                    Point1="118.5,24.2990654205607"
                    Point2="122.5,24.2990654205607"
                    Point3="122.5,28.2990654205607" />
                  <mssgle:LineSegment
                    End="122.5,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 3]"
          TopLeft="253.5,251.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 4]"
          TopLeft="246,1171.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="189.75,60"
              Start="0,0"
              End="189.75,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,35.3638170974155" />
                  <mssgle:CubicBezierSegment
                    Point1="0,35.3638170974155"
                    Point2="0,39.3638170974155"
                    Point3="4,39.3638170974155" />
                  <mssgle:LineSegment
                    End="185.75,39.3638170974155" />
                  <mssgle:CubicBezierSegment
                    Point1="185.75,39.3638170974155"
                    Point2="189.75,39.3638170974155"
                    Point3="189.75,43.3638170974155" />
                  <mssgle:LineSegment
                    End="189.75,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="65.99568359375,44.3638170974155,57.7586328125,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 5]"
          TopLeft="254,149.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 6]"
          TopLeft="256,353.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,59"
              Start="0,0"
              End="0,51.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,51.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 7]"
          TopLeft="719,659.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,60"
              Start="0,0"
              End="0,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 8]"
          TopLeft="698.5,761.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-445.5,58"
              Start="0,0"
              End="-445.5,50.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.6199095022624" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.6199095022624"
                    Point2="0,23.6199095022624"
                    Point3="-4,23.6199095022624" />
                  <mssgle:LineSegment
                    End="-441.5,23.6199095022624" />
                  <mssgle:CubicBezierSegment
                    Point1="-441.5,23.6199095022624"
                    Point2="-445.5,23.6199095022624"
                    Point3="-445.5,27.6199095022624" />
                  <mssgle:LineSegment
                    End="-445.5,50.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-230.75,28.6199095022624,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files.PrecedenceConstraints[Ограничение 9]"
          TopLeft="278,863.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="109,45"
              Start="0,0"
              End="109,37.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.2706766917293" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.2706766917293"
                    Point2="0,18.2706766917293"
                    Point3="4,18.2706766917293" />
                  <mssgle:LineSegment
                    End="105,18.2706766917293" />
                  <mssgle:CubicBezierSegment
                    Point1="105,18.2706766917293"
                    Point2="109,18.2706766917293"
                    Point3="109,22.2706766917293" />
                  <mssgle:LineSegment
                    End="109,37.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="823,1329"
          Size="823,1372"
          Id="Package\Process files"
          TopLeft="25,209" />
        <NodeLayout
          Size="160,42"
          Id="Package\SELECT new files"
          TopLeft="267.333333333333,116.666666666667" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение]"
          TopLeft="347.333333333333,80.6666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36"
              Start="0,0"
              End="0,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-28.87931640625,8.54296875,57.7586328125,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 1]"
          TopLeft="433.988095238095,1581">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23.6507936507901"
              Start="0,0"
              End="0,16.1507936507901">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.1507936507901" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-28.87931640625,2.36836557539505,57.7586328125,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 2]"
          TopLeft="347.333333333333,158.666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="89.166666666667,50.333333333333"
              Start="0,0"
              End="89.166666666667,42.833333333333">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.1666666666665" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.1666666666665"
                    Point2="0,25.1666666666665"
                    Point3="4,25.1666666666665" />
                  <mssgle:LineSegment
                    End="85.166666666667,25.1666666666665" />
                  <mssgle:CubicBezierSegment
                    Point1="85.166666666667,25.1666666666665"
                    Point2="89.166666666667,25.1666666666665"
                    Point3="89.166666666667,29.1666666666665" />
                  <mssgle:LineSegment
                    End="89.166666666667,42.833333333333" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="15.7040169270835,30.1666666666665,57.7586328125,11.4140625"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Process files\Fill new Excel">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="151,42"
          Id="Package\Process files\Fill new Excel\Contents query"
          TopLeft="283,108" />
        <NodeLayout
          Size="144,42"
          Id="Package\Process files\Fill new Excel\New template"
          TopLeft="284,177" />
        <EdgeLayout
          Id="Package\Process files\Fill new Excel.Paths[Output 0]"
          TopLeft="357.25,150">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27"
              Start="0,0"
              End="0,19.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Process files\Fill new Excel\New template">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Process files\Insert request_contents">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="184,42"
          Id="Package\Process files\Insert request_contents\Row ID, GUID, UCASE"
          TopLeft="50,251" />
        <NodeLayout
          Size="208,42"
          Id="Package\Process files\Insert request_contents\Transformation to nvarchar"
          TopLeft="38,100" />
        <NodeLayout
          Size="199,42"
          Id="Package\Process files\Insert request_contents\INSERT request_contents"
          TopLeft="42.285714285714,326.714285714286" />
        <NodeLayout
          Size="124,42"
          Id="Package\Process files\Insert request_contents\Row filter"
          TopLeft="76,171" />
        <NodeLayout
          Size="165,42"
          Id="Package\Process files\Insert request_contents\Excel request load"
          TopLeft="64.532467532468,30.4285714285714" />
        <EdgeLayout
          Id="Package\Process files\Insert request_contents.Paths[Выходные данные преобразования данных]"
          TopLeft="140,142">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29"
              Start="0,0"
              End="0,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files\Insert request_contents.Paths[Выход источника &quot;Excel&quot;]"
          TopLeft="144.516233766234,72.4285714285714">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27.5714285714286"
              Start="0,0"
              End="0,20.0714285714286">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.0714285714286" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files\Insert request_contents.Paths[Product]"
          TopLeft="140,213">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38"
              Start="0,0"
              End="0,30.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-17.42638671875,10.37548828125,34.8527734375,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Process files\Insert request_contents.Paths[Output 0]"
          TopLeft="141.892857142857,293">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33.714285714286"
              Start="0,0"
              End="0,26.214285714286">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.214285714286" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <DtsEventHandler
    design-time-name="Package\Process files\Insert request_contents.EventHandlers[OnTaskFailed]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="167,42"
          Id="{46fff824-5998-439c-9120-36dc723f470f}"
          TopLeft="259,20" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PipelineComponentMetadata
    design-time-name="Package\Process files\Insert request_contents\INSERT request_contents">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Process files\Insert request_contents\Excel request load">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>