<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/7/2020 1:19:18 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ETP025"
  DTS:CreatorName="ELTRANSPLUS\andreydruzhinin"
  DTS:DTSID="{05FC8DE3-EE1B-44CA-A281-0147EB11374C}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1049"
  DTS:ObjectName="Package3"
  DTS:PackageType="5"
  DTS:VersionBuild="7"
  DTS:VersionGUID="{3410055D-2E5F-46CA-9072-27E8CF74FF3A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Send messages"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{E01F6F15-E5FE-46D7-B3E0-F62DFC28464D}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send messages"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_02515bc450d444c38ebc9decde9d64f9"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="ST_02515bc450d444c38ebc9decde9d64f9.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D1AABC2C-1C31-468E-80E4-BD5E7BF9E377}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_02515bc450d444c38ebc9decde9d64f9</RootNamespace>
    <AssemblyName>ST_02515bc450d444c38ebc9decde9d64f9</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="objLogonBitrixOAuth.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="ObligationContext.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02515bc450d444c38ebc9decde9d64f9.Properties.Settings.get_Default():ST_02515bc450d444c38ebc9decde9d64f9.Properties.Sett" +
    "ings")]

namespace ST_02515bc450d444c38ebc9decde9d64f9.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Linq;
#endregion

namespace ST_02515bc450d444c38ebc9decde9d64f9
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                Bitrix24 bx_logon = new Bitrix24();
                string message = String.Empty;

                SqlConnection connection = (SqlConnection)Dts.Connections["10.10.0.28.automation.phpuser"].AcquireConnection(Dts.Transaction);

                ObligationContext db = new ObligationContext(connection);

                var messagesToSend = db.obligations_messages.Where(m => m.was_sent == 0).Select(m => m);

                foreach (obligations_messages msg in messagesToSend)
                {                   
                    try
                    {
                        _ = bx_logon.SendCommand("log.blogpost.add", "",
                        "USER_ID=" + msg.userid +
                        "&POST_TITLE=" + msg.title + 
                        "&POST_MESSAGE=" + msg.message +
                        "&DEST[0]=SG336"
                        );
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }

                    msg.was_sent = 1;
                    msg.sent_datetime = DateTime.Now;
                }

                db.SubmitChanges();
                Dts.Connections["10.10.0.28.automation.phpuser"].ReleaseConnection(connection);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "", ex.Message, "", 0);
                throw;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
#endregion
using System.IO;
using System.Net;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;

partial class Bitrix24
    {
    //боевые настройки
    private const string BX_ClientID = "local.5e8255b199d0e7.70800677";
    private const string BX_ClientSecret = "730hvSv5yrgmVv0gcwkxUz2ATaGGIx0fZmuOXMQjSkehKaFzMz";
    private const string BX_Portal = "https://bitrix.eltransplus.ru";

    //bitest
    //private const string BX_ClientID = "local.5e834c45530933.17923150";
    //private const string BX_ClientSecret = "lBA05N9gi8dw3sVX4A7V7R7oSqY5EU0L779BZNi0TGutrIzVFh";
    //private const string BX_Portal = "https://bitest.eltransplus.ru";

    private const string BX_OAuthSite = "https://oauth.bitrix.info";

        private string AccessToken;
        private string RefreshToken;
        private DateTime RefreshTime;
        private string Code;
        private string Cookie;

        public Bitrix24()
        {
            Connect();
        }

        private void Connect()
        {
            //Создание HTTP подключения
            string BX_URI = BX_Portal + "/oauth/authorize/?client_id=" + BX_ClientID;
            HttpWebRequest requestLogonBitrix24 = (HttpWebRequest)WebRequest.Create(BX_URI);

            //Логин и пароль администратора, под которым будут выполняться запросы
            string username = "andreydruzhinin@eltransplus.ru";
            string password = "J4e3Yv;()";            

            //Настройка запроса
            string svcCredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(username + ":" + password));
            requestLogonBitrix24.Headers.Add("Authorization", "Basic " + svcCredentials);
            requestLogonBitrix24.AllowAutoRedirect = false; //обязательное условие, чтобы не было автоматической переадресации на другую страницу (теряются пользовательские сведения об авторизации)
            requestLogonBitrix24.Method = "POST";

            HttpWebResponse responseLogonBitrix24 = (HttpWebResponse)requestLogonBitrix24.GetResponse();

            //Проверяем что статус-код 302, должны предложить переадресацию, иначе авторизация не требуется, мы и так авторизированы
            if (responseLogonBitrix24.StatusCode == HttpStatusCode.Found)
            {
                //Получаем из заголовков ответа Куки и параметры адреса переадресации (из поля "Location"), параметр Code
                Uri locationURI = new Uri(responseLogonBitrix24.Headers["Location"]);

                //Получаем параметры из строки ответа (нужен System.Web)
                var locationParams = HttpUtility.ParseQueryString(locationURI.Query);
                Cookie = responseLogonBitrix24.Headers["Set-Cookie"];
                Code = locationParams["Code"];

                //Вызываем исключение, если Код мы не смогли получить, без него далее никак.
                if (String.IsNullOrEmpty(Code))
                {
                    throw new FormatException("CodeNotFound");
                }

                //Закрываем подключение
                responseLogonBitrix24.Close();

                //Если код успешно получили, то формируем новый HTTP запрос для получения Токенов авторизации
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=authorization_code" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "code=" + Code;
                SetToken(BX_OAuth_URI);
            }

        }

        //Закрытый метод для получения и записи Токенов авторизации
        private void SetToken(string BX_OAuth_URI)
        {
            //Формируем новый HTTP запрос для получения Токенов авторизации
            HttpWebRequest requestLogonBitrixOAuth = (HttpWebRequest)WebRequest.Create(BX_OAuth_URI);
            requestLogonBitrixOAuth.Method = "POST";
            requestLogonBitrixOAuth.Headers["Cookie"] = Cookie; //Используем Куки полученный в предыдущем запросе авторизации

            //Подключаемся (отправляем запрос)
            HttpWebResponse responseLogonBitrixOAuth = (HttpWebResponse)requestLogonBitrixOAuth.GetResponse();

            //Если в ответ получаем статус-код отличный от 200, то это ошибка, вызываем исключение
            if (responseLogonBitrixOAuth.StatusCode != HttpStatusCode.OK)
            {
                throw new FormatException("ErrorLogonBitrixOAuth");
            }
            else
            {
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(objLogonBitrixOAuth));
                objLogonBitrixOAuth objLogonBitrixOAuth;

                using (Stream st = responseLogonBitrixOAuth.GetResponseStream())
                {
                    objLogonBitrixOAuth = (objLogonBitrixOAuth)deserializer.ReadObject(st);
                }

                //Записывем Токены авторизации в поля
                AccessToken = objLogonBitrixOAuth.access_token;
                RefreshToken = objLogonBitrixOAuth.refresh_token;
                RefreshTime = DateTime.Now.AddSeconds(Convert.ToDouble(objLogonBitrixOAuth.expires_in)); //Добавляем к текущей дате количество секунд действия токена, обычно это плюс один час
            }
        }

        //Закрытый метод для обновления Токенов авторизации, если истекло время их действия
        private void RefreshTokens()
        {
            if (RefreshTime == DateTime.MinValue) // Если RefreshTime пустая
            {
                //Тогда вызываем авторизацию по полной программе
                Connect();
                return;
            }

            //Проверяем, если истекло время действия Токена авторизации, то обновляем его
            if (RefreshTime.AddSeconds(-5) < DateTime.Now)
            {
                //Формируем новый HTTP запрос для обновления Токена авторизации, здесь Code уже не нужен
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=refresh_token" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "refresh_token=" + RefreshToken;
                SetToken(BX_OAuth_URI);
            }
        }

        //Открытый метод для отправки REST-запросов в Битрикс24
        public string SendCommand(string Command, string GetParams = "", string PostParams = "")
        {
            //Проверяем и обновлем Токены авторизации
            RefreshTokens();

            //Проверяем возможное указание параметров
            string BX_REST_URI = BX_Portal + "/rest/" + Command + "?auth=" + AccessToken;

            if (String.IsNullOrEmpty(GetParams) == false)
            {
                BX_REST_URI = BX_REST_URI + "&" + GetParams;
            }

            //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
            HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
            requestBitrixREST.Method = "POST";
            requestBitrixREST.Headers["Cookie"] = Cookie; //Используем Куки полученный в запросе авторизации

            //Готовим тело запроса и вставляем его в тело POST-запроса  
            byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);
            requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
            requestBitrixREST.ContentLength = byteArrayBody.Length;

            Stream dataBodyStream = requestBitrixREST.GetRequestStream();
            dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
            dataBodyStream.Close();

            //Отправляем данные в Битрикс24
            HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

            //Читаем тело ответа от Битрикс24
            Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
            var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
            string stringBitrixREST = readerBitrixREST.ReadToEnd();

            //Закрываем все подключения и потоки
            readerBitrixREST.Close();
            dataStreamBitrixREST.Close();
            responseBitrixREST.Close();

            //Возвращаем строку ответа в формате JSON
            return stringBitrixREST;
        }
    }]]></ProjectItem>
          <ProjectItem
            Name="ObligationContext.cs"
            Encoding="UTF8"><![CDATA[namespace ST_02515bc450d444c38ebc9decde9d64f9
{
	using System;
	using System.ComponentModel;
	using System.Data.Linq.Mapping;


	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "BI")]
	public partial class ObligationContext : System.Data.Linq.DataContext
	{

		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

		#region Определения метода расширяемости
		partial void OnCreated();
		partial void Insertobligations_messages(obligations_messages instance);
		partial void Updateobligations_messages(obligations_messages instance);
		partial void Deleteobligations_messages(obligations_messages instance);
		#endregion

		public ObligationContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ObligationContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ObligationContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ObligationContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public System.Data.Linq.Table<obligations_messages> obligations_messages
		{
			get
			{
				return this.GetTable<obligations_messages>();
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "BI.dwh.obligations_messages")]
	public partial class obligations_messages : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _id;

		private System.DateTime _load_datetime;

		private string _username;

		private int _userid;

		private string _title;

		private string _message;

		private int _was_sent;

		private System.Nullable<System.DateTime> _sent_datetime;

		#region Определения метода расширяемости
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnidChanging(int value);
		partial void OnidChanged();
		partial void Onload_datetimeChanging(System.DateTime value);
		partial void Onload_datetimeChanged();
		partial void OnusernameChanging(string value);
		partial void OnusernameChanged();
		partial void OnuseridChanging(int value);
		partial void OnuseridChanged();
		partial void OntitleChanging(string value);
		partial void OntitleChanged();
		partial void OnmessageChanging(string value);
		partial void OnmessageChanged();
		partial void Onwas_sentChanging(int value);
		partial void Onwas_sentChanged();
		partial void Onsent_datetimeChanging(System.Nullable<System.DateTime> value);
		partial void Onsent_datetimeChanged();
		#endregion

		public obligations_messages()
		{
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_load_datetime", DbType = "DateTime NOT NULL")]
		public System.DateTime load_datetime
		{
			get
			{
				return this._load_datetime;
			}
			set
			{
				if ((this._load_datetime != value))
				{
					this.Onload_datetimeChanging(value);
					this.SendPropertyChanging();
					this._load_datetime = value;
					this.SendPropertyChanged("load_datetime");
					this.Onload_datetimeChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_username", DbType = "VarChar(100)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_userid", DbType = "Int NOT NULL")]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_title", DbType = "VarChar(200)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_message", DbType = "VarChar(1000)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_was_sent", DbType = "Int NOT NULL")]
		public int was_sent
		{
			get
			{
				return this._was_sent;
			}
			set
			{
				if ((this._was_sent != value))
				{
					this.Onwas_sentChanging(value);
					this.SendPropertyChanging();
					this._was_sent = value;
					this.SendPropertyChanged("was_sent");
					this.Onwas_sentChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_sent_datetime", DbType = "DateTime")]
		public System.Nullable<System.DateTime> sent_datetime
		{
			get
			{
				return this._sent_datetime;
			}
			set
			{
				if ((this._sent_datetime != value))
				{
					this.Onsent_datetimeChanging(value);
					this.SendPropertyChanging();
					this._sent_datetime = value;
					this.SendPropertyChanged("sent_datetime");
					this.Onsent_datetimeChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_02515bc450d444c38ebc9decde9d64f9</msb:CodeName>
		<msb:DisplayName>ST_02515bc450d444c38ebc9decde9d64f9</msb:DisplayName>
		<msb:ProjectId>{38C016BC-620F-425E-8EF1-300ECF190445}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_02515bc450d444c38ebc9decde9d64f9.csproj"/>
		<msb:File Include="ObligationContext.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="objLogonBitrixOAuth.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Resources;
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_02515bc450d444c38ebc9decde9d64f9")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_02515bc450d444c38ebc9decde9d64f9")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
[assembly: NeutralResourcesLanguage("ru")]]]></ProjectItem>
          <ProjectItem
            Name="objLogonBitrixOAuth.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
#endregion
using System.Runtime.Serialization;

partial class Bitrix24
    {
    [DataContract]
        public class objLogonBitrixOAuth
        {
            [DataMember]
            public string expires_in { get; set; }
            [DataMember]
            public string refresh_token { get; set; }
            [DataMember]
            public string access_token { get; set; }
        }
    }]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02515bc450d444c38ebc9decde9d64f9.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02515bc450d444c38ebc9decde9d64f9.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_02515bc450d444c38ebc9decde9d64f9.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_02515bc450d444c38ebc9decde9d64f9.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_02515bc450d444c38ebc9decde9d64f9.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_02515bc450d444c38ebc9decde9d64f9.dll">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
BgAUAA8BBgAwDOUNGgDZC2QIBgBXD3cKAAAAAJEAAAAAAAEAAQAAABAAVwAAADkAAQABAAEAEAA5
D20AYQAKAAYAAQAQAPwMbQA5AAsADAABABAAzAltAJkAFgAkAAAAEACcDB8NOQAWACYAAAEQAFcN
Hw3FABgAKgACABAALQgAADkAGQAtAAMBAAAkDgAArQAcADQAAyEQAAsBAAA5AB8ANABRgJoAdwFR
gH8OdwFRgI0IdwFRgP8EdwEBAFMJdwEBAEYJdwEBAKMDugABAKQCdwEBAN0CdwERAH0CzwMRAHkN
0wMBAMIB2AMBAMQDugABAJADdwEBANQB2AMBAGwDdwEBAMQCdwEBAPcO2AMBAOgD2wMBAK4H5AMB
AH0B6AMRAC4J7QMRAGEE8gMRAFYC9wMBABkCdwEBANwBdwEBAPsBdwEGBtwA2ANWgBQO+wNWgEEE
+wM2AGkA/wNQIAAAAACGGEoMBgABAGAgAAAAAIEAVg4GAAEAcCEAAAAAgQBfCRAAAQBEIgAAAACB
AL8NBgACAKQiAAAAAIYAPwIDBAIAcyMAAAAAhhhKDBAABQCBIwAAAACGGEoMCgQGAI8jAAAAAIYY
SgzoAAcAmSMAAAAAhhhKDO8ACQCjIwAAAACGCPgMEAQLAKsjAAAAAJEYUAwZBAsAtyMAAAAAhhhK
DAYACwC/IwAAAACGCLgBHQQLAMcjAAAAAIYIvwEBAAsA6iMAAAAAhgivAyEEDADyIwAAAACGCMED
JgQMABokAAAAAIYIgANvAA0AIiQAAAAAhgiNAxAADQBKJAAAAACGCMYBHQQOAFIkAAAAAIYI0QEB
AA4AdSQAAAAAhghfA28ADwB9JAAAAACGCGkDEAAPAKUkAAAAAIYItQJvABAArSQAAAAAhgjBAhAA
EADVJAAAAACGCOcOHQQRAN0kAAAAAIYI9A4BABEAACUAAAAAhgjTAywEEgAIJQAAAACGCOUDNgQS
AGwlAAAAAOYJZQdBBBMApCUAAAAA5gl6B0EEFADcJQAAAADmCTcBRwQVABQmAAAAAOYJSwFHBBYA
SSYAAAAAxAGSBwYAFwBkJgAAAADEAWIBEAAXAIAmAAAAAJEYUAwZBBgAlCYAAAAAhgDSCQYAGAC8
KAAAAACGGEoMBgAYALcjAAAAAIMYSgwGABgAxCgAAAAAkwh6C04EGADwKAAAAACTCEkEVAQYAPco
AAAAAJMIVQRaBBgA/ygAAAAAlgiPDmEEGQAGKQAAAACGGEoMBgAZAA4pAAAAAJEYUAwZBBkAGikA
AAAAhgiuCW8AGQAiKQAAAACGCL0JEAAZACspAAAAAIYIaAlvABoAMykAAAAAhgh6CRAAGgA8KQAA
AACGCIwJbwAbAEQpAAAAAIYInQkQABsAtyMAAAAAhhhKDAYAHABNKQAAAACRGFAMGQQcALcjAAAA
AIYYSgwGABwAAAABAKYAAAABAEMCEBACAKoNEBADALQNAAABAPEKAAABAPEKAAABAPEKAAACAH0C
AAABAPEKAAACAH0CAAABAD4HAAABAD4HAAABAD4HAAABAD4HAAABAD4HAAABAD4HAAABAD4HAAAB
AD4HAAABAD4HAAABAD4HAAABAD4HAAABAD4HAAABAHMDAAABAD4HAAABAD4HAAABAD4HAAABAD4H
BAB1AAQAeQAJAEoMAQARAEoMBgAZAEoMCgApAEoMEAAxAEoMEAA5AEoMEABBAEoMEABJAEoMEABR
AEoMEABZAEoMEABhAEoMEABpAEoMEAChAEoMBgCpAEoMBgCxAEoMBgC5AEoMBgDhAEoMBgAZAUoM
BgApAUoMBgBhAUoMBgCBAUoMFQBxAEoMBgCRAdoEJwChAWAALgCpAT0ONAChAU4NOwCxAfIHQQCR
AQgORwCpAT0OTQCJADMBUwCZAV4OWQCRAUsCEACRAcAEXgCBAIsCZADBAQgORwCJABAJagDRAUoM
EADRAWAPbwDZAQoIcwCpAZAPeQDhAUoMEADBAcwEBgCJABkJUwDpAU0DiwCRAEoMlADBAe0ImwD5
AUQOoAABAtIEBgB5AEsPpgCxAQoDqwB5AGoMsAB5ACgHugB5AGoPvgB5ADoJvgCpAT0OzQCRAR8E
EACRARsI1QCRAf8ImwCZAAwF2gCZAMwEBgAJAkoM4gARAjUCbwARAswEBgDBAEoM6ADBAEoM7wDB
AOsC9wAZAkoMBgB5AHYPvgCpAXYPBgEMADEHJQEMAJsOKQEhAhcENwEpAs0CQwEhAkQHNwH5AOQC
ZwExAkoMEAABAeQCbwGpAZgPdwEJAUoMEAAxARwOlAE5AvgNmgFBAhAJoAE5AmcKpwFJAr8KqwFR
Au0LsAFZAjkDugFRAp4PwwFRArwOzwFRApcI2QFRAuQA5QGhAi8EAgKhAk8OLQIUADwMXAIcANsO
KQF5AgEIbwCpAT0ObgIMAEoMdAK5AhgPJQHBABENBgBJAtEKegI5Aq0OAQA5AjIOfwJRAakCbwDB
AiYMhQIxAUoMBgDpAVMPjgJpAUoMlAKJAUoMBgAOAAQAtwIOAAgA8gIOAAwAVwMOAA0AAAAOABAA
kgMOABEAAAAIAHQAxQMIAHgAygMuAAsAlwQuABMAoAQuABsAvwQuACMAyAQuACsA8QQuADMA8QQu
ADsA8QQuAEMAyAQuAEsA9wQuAFMA8QQuAFsADgUuAGMAFgVJAJMAlwVjAIMAYAVpAJMAcQaDAIsA
bwWJAJMAqgajAJsAygOpAJMA2QbDAKMAygPJAJMABgfpAJMAMgcDAWsAygMJAZMAYQcpAZMAkAdD
AXMAygNJAasAvwRpAasAvwSpAXsAygPJAXsAygPpAXsAygOBAnMAygOhAnMAygMBA3MAygMhA3MA
ygNBA3MAygNhA3MAygOgA3MAygPAA3MAygPgA3MAygMABHMAygOgBXMAygPABXMAygPgBXMAygMA
BnMAygMgBnMAygNABnMAygMcAH4AtgDGAAwBLgFVAXoBBAABAAAArgd9AAAAfQGBAAMAAQAEAAIA
BgAKAAcADAAIAA0AAAD8DGYEAADZAW8EAADFA3MEAACRA3gEAADVAW8EAABtA3gEAADFAngEAAD4
Dm8EAADpA3wEAAB+C4YEAABpBIwEAAClDpIEAADBCXgEAAB+CXgEAAChCXgECAAdAAIAEAAeAAIA
AgAKAAMACAAfAAQAEAAgAAQAAgANAAUAAQAOAAUAAgAPAAcAAQAQAAcAAgARAAkAAQASAAkAAgAT
AAsAAQAUAAsAAgAVAA0AAQAWAA0AAgAXAA8AAQAYAA8AAgAZABEAAQAaABEAAgAbABMAAQAcABMA
AgAnABUAAgAoABcAAQApABcAAgAqABkAAgAtABsAAQAuABsAAgAvAB0AAQAwAB0AAgAxAB8AAQAy
AB8AHQFUAmYCBIAAAAEAAABFHbViAAAAAAAAbQAAAAQAAAAAAAAAAAAAAJwCAgEAAAAABAAAAAAA
AAAAAAAAnAIiCQAAAAAEAAAAAAAAAAAAAACcAkoKAAAAAAQAAAAAAAAAAAAAAJwCRQsAAAAABAAA
AAAAAAAAAAAAnALrAAAAAAANAAAAAAAAAAAAAAClAkUIAAAAAAQAAAAAAAAAAAAAAJwCNQQAAAAA
BAAAAAAAAAAAAAAArgL3AAAAAAANAAAAAAAAAAAAAAClAr0AAAAAAAAAAAABAAAApgwAAAgAAgAJ
AAUACgAFAIUAAQGTAFABkwBhAbUA9wG3AAEBtQAhArkATQIAAAAAAFRhYmxlYDEATnVsbGFibGVg
MQBJRW51bWVyYWJsZWAxAElRdWVyeWFibGVgMQBFeHByZXNzaW9uYDEASUVudW1lcmF0b3JgMQBJ
bnQzMgBGdW5jYDIAQml0cml4MjQAZ2V0X1VURjgAPD45AFNUXzAyNTE1YmM0NTBkNDQ0YzM4ZWJj
OWRlY2RlOWQ2NGY5ADxNb2R1bGU+AEJYX0NsaWVudElEAEJYX09BdXRoX1VSSQBTeXN0ZW0uSU8A
TWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18ATGFtYmRhAFN5c3RlbS5EYXRh
AFN5c3RlbS5XZWIAbXNjb3JsaWIAPD5jAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAEF1dG9T
eW5jAEFkZABhZGRfUHJvcGVydHlDaGFuZ2VkAHJlbW92ZV9Qcm9wZXJ0eUNoYW5nZWQAU2VuZFBy
b3BlcnR5Q2hhbmdlZABJTm90aWZ5UHJvcGVydHlDaGFuZ2VkAEludGVybG9ja2VkAFN5c3RlbS5D
b2xsZWN0aW9ucy5TcGVjaWFsaXplZABnZXRfaWQAc2V0X2lkAGdldF91c2VyaWQAc2V0X3VzZXJp
ZAA8cmVmcmVzaF90b2tlbj5rX19CYWNraW5nRmllbGQAPGFjY2Vzc190b2tlbj5rX19CYWNraW5n
RmllbGQAPGV4cGlyZXNfaW4+a19fQmFja2luZ0ZpZWxkAFJlYWRUb0VuZABTZW5kQ29tbWFuZABz
ZXRfTWV0aG9kAGRlZmF1bHRJbnN0YW5jZQBBdHRyaWJ1dGVNYXBwaW5nU291cmNlAG1hcHBpbmdT
b3VyY2UAZ2V0X1N0YXR1c0NvZGUASHR0cFN0YXR1c0NvZGUAZ2V0X01lc3NhZ2UAZ2V0X21lc3Nh
Z2UAc2V0X21lc3NhZ2UAQ29tcGFyZUV4Y2hhbmdlAENvb2tpZQBJbnZva2UAR2V0VGFibGUASURp
c3Bvc2FibGUAUXVlcnlhYmxlAFRvRG91YmxlAFJ1bnRpbWVNZXRob2RIYW5kbGUAUnVudGltZVR5
cGVIYW5kbGUAR2V0TWV0aG9kRnJvbUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBnZXRfdGl0bGUA
c2V0X3RpdGxlAHByb3BlcnR5TmFtZQBnZXRfdXNlcm5hbWUAc2V0X3VzZXJuYW1lAERhdGVUaW1l
AFJlZnJlc2hUaW1lAGdldF9sb2FkX2RhdGV0aW1lAHNldF9sb2FkX2RhdGV0aW1lAGdldF9zZW50
X2RhdGV0aW1lAHNldF9zZW50X2RhdGV0aW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUAQ29tYmluZQBzZXRfQ29udGVudFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRf
Q3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UASHR0cFdlYlJlc3BvbnNl
AEdldFJlc3BvbnNlAENsb3NlAERpc3Bvc2UAQ3JlYXRlAERlbGVnYXRlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAEJYX09BdXRoU2l0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1
Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAE5ldXRyYWxSZXNvdXJjZXNMYW5ndWFnZUF0dHJpYnV0
ZQBUYWJsZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJp
YnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAERhdGFiYXNlQXR0cmlidXRlAEFzc2VtYmx5VHJh
ZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBDb2x1bW5BdHRyaWJ1dGUA
QXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1
dGUARGF0YU1lbWJlckF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAERh
dGFDb250cmFjdEF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBNaW5WYWx1ZQBn
ZXRfSGFzVmFsdWUAdmFsdWUAUmVtb3ZlAFN5c3RlbS5UaHJlYWRpbmcARW5jb2RpbmcAYWRkX1By
b3BlcnR5Q2hhbmdpbmcAcmVtb3ZlX1Byb3BlcnR5Q2hhbmdpbmcAU2VuZFByb3BlcnR5Q2hhbmdp
bmcASU5vdGlmeVByb3BlcnR5Q2hhbmdpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTeXN0
ZW0uRGF0YS5MaW5xLk1hcHBpbmcAVG9CYXNlNjRTdHJpbmcAVG9TdHJpbmcAUGFyc2VRdWVyeVN0
cmluZwBzZXRfQ29udGVudExlbmd0aABvYmpMb2dvbkJpdHJpeE9BdXRoAFVyaQBNaWNyb3NvZnQu
U3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0
VGFzawBCWF9Qb3J0YWwARXF1YWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAFNUXzAyNTE1YmM0NTBkNDQ0YzM4ZWJjOWRlY2RlOWQ2NGY5LmRsbABHZXRSZXNwb25zZVN0
cmVhbQBHZXRSZXF1ZXN0U3RyZWFtAGdldF9JdGVtAHNldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291
cmNlTWFuAG9wX0xlc3NUaGFuAFJlZnJlc2hUb2tlbgBBY2Nlc3NUb2tlbgBTZXRUb2tlbgBnZXRf
cmVmcmVzaF90b2tlbgBzZXRfcmVmcmVzaF90b2tlbgBnZXRfYWNjZXNzX3Rva2VuAHNldF9hY2Nl
c3NfdG9rZW4AZ2V0X2V4cGlyZXNfaW4Ac2V0X2V4cGlyZXNfaW4AU2NyaXB0TWFpbgBNZW1iZXJF
eHByZXNzaW9uAFBhcmFtZXRlckV4cHJlc3Npb24AQ29uc3RhbnRFeHByZXNzaW9uAEJpbmFyeUV4
cHJlc3Npb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVt
LlJ1bnRpbWUuU2VyaWFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24A
TmFtZVZhbHVlQ29sbGVjdGlvbgBXZWJIZWFkZXJDb2xsZWN0aW9uAElEYkNvbm5lY3Rpb24AQWNx
dWlyZUNvbm5lY3Rpb24AUmVsZWFzZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBjb25uZWN0aW9u
AEZvcm1hdEV4Y2VwdGlvbgBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uLkpzb24ATWV0aG9k
SW5mbwBDdWx0dXJlSW5mbwBTeXN0ZW0uRGF0YS5MaW5xAFN5c3RlbS5MaW5xAFN0cmVhbVJlYWRl
cgBUZXh0UmVhZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAUHJvcGVy
dHlDaGFuZ2VkRXZlbnRIYW5kbGVyAFByb3BlcnR5Q2hhbmdpbmdFdmVudEhhbmRsZXIARXZlbnRz
T2JqZWN0V3JhcHBlcgBQYXJhbWV0ZXIARGF0YUNvbnRyYWN0SnNvblNlcmlhbGl6ZXIAWG1sT2Jq
ZWN0U2VyaWFsaXplcgBGaXJlRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAu
Y2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAEFkZFNlY29uZHMAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzAyNTE1YmM0NTBkNDQ0YzM4ZWJjOWRlY2Rl
OWQ2NGY5LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRf
b2JsaWdhdGlvbnNfbWVzc2FnZXMAU3VibWl0Q2hhbmdlcwBTVF8wMjUxNWJjNDUwZDQ0NGMzOGVi
YzlkZWNkZTlkNjRmOS5Qcm9wZXJ0aWVzAEdldEJ5dGVzAFNldHRpbmdzAFByb3BlcnR5Q2hhbmdl
ZEV2ZW50QXJncwBlbXB0eUNoYW5naW5nRXZlbnRBcmdzAFByb3BlcnR5Q2hhbmdpbmdFdmVudEFy
Z3MAR2V0UGFyYW1zAFBvc3RQYXJhbXMAUmVmcmVzaFRva2VucwBTeXN0ZW0uTGlucS5FeHByZXNz
aW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9IZWFkZXJzAFN1Y2Nl
c3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMAQ29uY2F0AFJlYWRPYmplY3QAU2Vs
ZWN0AENvbm5lY3QAc2V0X0FsbG93QXV0b1JlZGlyZWN0AFN5c3RlbS5OZXQAQlhfQ2xpZW50U2Vj
cmV0AGdldF9EZWZhdWx0AEdldFZhbHVlT3JEZWZhdWx0AHNldF9UYXNrUmVzdWx0AENvbnN0YW50
AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABnZXRfd2FzX3NlbnQAc2V0X3dhc19z
ZW50AENvbnZlcnQASHR0cFdlYlJlcXVlc3QATW92ZU5leHQAU3lzdGVtLlRleHQARGF0YUNvbnRl
eHQAT2JsaWdhdGlvbkNvbnRleHQAZ2V0X05vdwBnZXRfQXNzZW1ibHkAZ2V0X1F1ZXJ5AG9wX0Vx
dWFsaXR5AG9wX0luZXF1YWxpdHkASHR0cFV0aWxpdHkASXNOdWxsT3JFbXB0eQBQcm9wZXJ0eQAA
AICtaAB0AHQAcABzADoALwAvAGIAaQB0AHIAaQB4AC4AZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4A
cgB1AC8AbwBhAHUAdABoAC8AYQB1AHQAaABvAHIAaQB6AGUALwA/AGMAbABpAGUAbgB0AF8AaQBk
AD0AbABvAGMAYQBsAC4ANQBlADgAMgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAwADgAMAAwADYA
NwA3AAA9YQBuAGQAcgBlAHkAZAByAHUAegBoAGkAbgBpAG4AQABlAGwAdAByAGEAbgBzAHAAbAB1
AHMALgByAHUAABNKADQAZQAzAFkAdgA7ACgAKQAAAzoAABtBAHUAdABoAG8AcgBpAHoAYQB0AGkA
bwBuAAANQgBhAHMAaQBjACAAAAlQAE8AUwBUAAARTABvAGMAYQB0AGkAbwBuAAAVUwBlAHQALQBD
AG8AbwBrAGkAZQABCUMAbwBkAGUAABlDAG8AZABlAE4AbwB0AEYAbwB1AG4AZAAAgWdoAHQAdABw
AHMAOgAvAC8AbwBhAHUAdABoAC4AYgBpAHQAcgBpAHgALgBpAG4AZgBvAC8AbwBhAHUAdABoAC8A
dABvAGsAZQBuAC8APwBnAHIAYQBuAHQAXwB0AHkAcABlAD0AYQB1AHQAaABvAHIAaQB6AGEAdABp
AG8AbgBfAGMAbwBkAGUAJgBjAGwAaQBlAG4AdABfAGkAZAA9AGwAbwBjAGEAbAAuADUAZQA4ADIA
NQA1AGIAMQA5ADkAZAAwAGUANwAuADcAMAA4ADAAMAA2ADcANwAmAGMAbABpAGUAbgB0AF8AcwBl
AGMAcgBlAHQAPQA3ADMAMABoAHYAUwB2ADUAeQByAGcAbQBWAHYAMABnAGMAdwBrAHgAVQB6ADIA
QQBUAGEARwBHAEkAeAAwAGYAWgBtAHUATwBYAE0AUQBqAFMAawBlAGgASwBhAEYAegBNAHoAJgBj
AG8AZABlAD0AAA1DAG8AbwBrAGkAZQAAK0UAcgByAG8AcgBMAG8AZwBvAG4AQgBpAHQAcgBpAHgA
TwBBAHUAdABoAACBb2gAdAB0AHAAcwA6AC8ALwBvAGEAdQB0AGgALgBiAGkAdAByAGkAeAAuAGkA
bgBmAG8ALwBvAGEAdQB0AGgALwB0AG8AawBlAG4ALwA/AGcAcgBhAG4AdABfAHQAeQBwAGUAPQBy
AGUAZgByAGUAcwBoAF8AdABvAGsAZQBuACYAYwBsAGkAZQBuAHQAXwBpAGQAPQBsAG8AYwBhAGwA
LgA1AGUAOAAyADUANQBiADEAOQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3ADcAJgBjAGwAaQBl
AG4AdABfAHMAZQBjAHIAZQB0AD0ANwAzADAAaAB2AFMAdgA1AHkAcgBnAG0AVgB2ADAAZwBjAHcA
awB4AFUAegAyAEEAVABhAEcARwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBTAGsAZQBoAEsAYQBG
AHoATQB6ACYAcgBlAGYAcgBlAHMAaABfAHQAbwBrAGUAbgA9AABHaAB0AHQAcABzADoALwAvAGIA
aQB0AHIAaQB4AC4AZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1AC8AcgBlAHMAdAAvAAANPwBh
AHUAdABoAD0AAAMmAABDYQBwAHAAbABpAGMAYQB0AGkAbwBuAC8AeAAtAHcAdwB3AC0AZgBvAHIA
bQAtAHUAcgBsAGUAbgBjAG8AZABlAGQAAQVpAGQAABtsAG8AYQBkAF8AZABhAHQAZQB0AGkAbQBl
AAARdQBzAGUAcgBuAGEAbQBlAAANdQBzAGUAcgBpAGQAAAt0AGkAdABsAGUAAA9tAGUAcwBzAGEA
ZwBlAAARdwBhAHMAXwBzAGUAbgB0AAAbcwBlAG4AdABfAGQAYQB0AGUAdABpAG0AZQAAOzEAMAAu
ADEAMAAuADAALgAyADgALgBhAHUAdABvAG0AYQB0AGkAbwBuAC4AcABoAHAAdQBzAGUAcgAAA20A
ACFsAG8AZwAuAGIAbABvAGcAcABvAHMAdAAuAGEAZABkAAABABFVAFMARQBSAF8ASQBEAD0AABkm
AFAATwBTAFQAXwBUAEkAVABMAEUAPQAAHSYAUABPAFMAVABfAE0ARQBTAFMAQQBHAEUAPQAAHSYA
RABFAFMAVABbADAAXQA9AFMARwAzADMANgAAcVMAVABfADAAMgA1ADEANQBiAGMANAA1ADAAZAA0
ADQANABjADMAOABlAGIAYwA5AGQAZQBjAGQAZQA5AGQANgA0AGYAOQAuAFAAcgBvAHAAZQByAHQA
aQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAm9rM5nZWLQKdij8pFxOzzAAQgAQEIAyAAAQUg
AQEREQQgAQEOBiABARGAvQoHBg4ODhJBEkUOBgABEoDJDgUAABKA0QYAAw4ODg4FIAEdBQ4FAAEO
HQUFIAASgN0FAAIODg4FIAIBDg4EIAEBAgUgABKA4QUgABGA5QQgAQ4OAyAADgUAARJFDgQAAQIO
DAcFEkESSRIgEk0RPQgAARKA9RGA+QYgAQESgPUEIAASTQUgARwSTQQAABE9BAABDQ4FIAERPQ0D
BwEOAwYRPQcAAgIRPRE9BgcDDh0FDgcABA4ODg4OBCABAQoHIAMBHQUICAUgAQESTQYgAgEOEmUH
IAIBEmkSZQkwAQAVEm0BHgAECgESEAUAAgIODhAHAhURgIkBET0VEYCJARE9BxURgIkBET0DIAAC
BCAAEwAIBwMSfRJ9En0LAAISgRESgRESgREMEAEDHgAQHgAeAB4ABAoBEn0LBwMSgIESgIESgIEF
CgESgIEHIAIBHBKAhQcgAgEcEoEZAgYOGQcIEggSgJ0SDBKAoRUSgKUBEhASEAgSgKkFIAASgR0F
IAASgSEGIAESgSUcAyAAHAQgARwcCQACEoChEoD1DggAARKBLRGBMQsAAhKBORKBKRKBNQkAAhKB
QRwSgPULAAISgUUSgSkSgSkREAECFRKBTQEeABKBKR0SgKEKCgEVEoFJAhIQAh4QAQIVEoFVAR4A
FRKBVQEeABUSgU0BFRKBSQIeAAILCgEVEoFJAhIQEhAfEAICFRKBVQEeARUSgVUBHgAVEoFNARUS
gUkCHgAeAQYKAhIQEhAHFRKBWQESEAkgABUSgKUBEwAHFRKApQESEAUAAQ4dDgUgAQETAAQgAQEc
BSAAEoFhCCAFAggODg4IBSAAEoFlByACAQ4SgWUIt3pcVhk04IkIiYRdzYCAzJEIsD9ffxHVCjo6
bABvAGMAYQBsAC4ANQBlADgAMgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAwADgAMAAwADYANwA3
AGQ3ADMAMABoAHYAUwB2ADUAeQByAGcAbQBWAHYAMABnAGMAdwBrAHgAVQB6ADIAQQBUAGEARwBH
AEkAeAAwAGYAWgBtAHUATwBYAE0AUQBqAFMAawBlAGgASwBhAEYAegBNAHoAOmgAdAB0AHAAcwA6
AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAyaAB0AHQAcABz
ADoALwAvAG8AYQB1AHQAaAAuAGIAaQB0AHIAaQB4AC4AaQBuAGYAbwAEAAAAAAQBAAAAAwYSZQQG
EoCFAgYICAYVEYCJARE9AwYSfQQGEoCBBAYSgLUEBhKAuQMGEhwDBhEkAwYSKAYgAw4ODg4FIAEB
EmkIIAAVEm0BEhADAAABAyAACAQgABE9BSABARE9CSAAFRGAiQERPQogAQEVEYCJARE9BSABARJ9
BiABARKAgQUAABKAtQUAABKAuQYAAQESgLkEAAASHAgoABUSbQESEAMoAAgEKAARPQMoAA4JKAAV
EYCJARE9BQgAEoC1BQgAEoC5BAgAEhwIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25U
aHJvd3MBCAEAAgAAAAAAKAEAI1NUXzAyNTE1YmM0NTBkNDQ0YzM4ZWJjOWRlY2RlOWQ2NGY5AAAF
AQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAAcBAAJydQAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUOAQAB
AFQOBE5hbWUCQkknAQABAFQOBE5hbWUbQkkuZHdoLm9ibGlnYXRpb25zX21lc3NhZ2VzgNgBAAUA
VA4HU3RvcmFnZQNfaWRUVXZTeXN0ZW0uRGF0YS5MaW5xLk1hcHBpbmcuQXV0b1N5bmMsIFN5c3Rl
bS5EYXRhLkxpbnEsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5CEF1dG9TeW5jAwAAAFQOBkRiVHlwZRVJbnQgTk9UIE5VTEwg
SURFTlRJVFlUAgxJc1ByaW1hcnlLZXkBVAINSXNEYkdlbmVyYXRlZAE4AQACAFQOB1N0b3JhZ2UO
X2xvYWRfZGF0ZXRpbWVUDgZEYlR5cGURRGF0ZVRpbWUgTk9UIE5VTEwuAQACAFQOB1N0b3JhZ2UJ
X3VzZXJuYW1lVA4GRGJUeXBlDFZhckNoYXIoMTAwKSwBAAIAVA4HU3RvcmFnZQdfdXNlcmlkVA4G
RGJUeXBlDEludCBOT1QgTlVMTCsBAAIAVA4HU3RvcmFnZQZfdGl0bGVUDgZEYlR5cGUMVmFyQ2hh
cigyMDApLgEAAgBUDgdTdG9yYWdlCF9tZXNzYWdlVA4GRGJUeXBlDVZhckNoYXIoMTAwMCkuAQAC
AFQOB1N0b3JhZ2UJX3dhc19zZW50VA4GRGJUeXBlDEludCBOT1QgTlVMTC8BAAIAVA4HU3RvcmFn
ZQ5fc2VudF9kYXRldGltZVQOBkRiVHlwZQhEYXRlVGltZbQAAADOyu++AQAAAJEAAABsU3lzdGVt
LlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3Vs
dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNv
dXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACsVgAAAAAAAAAA
AADGVgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuFYAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBt
c2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAA
AAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAAAAAA
AAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAtWJF
HQAAAQC1YkUdPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUA
SQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0
AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEA
QwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAA
AHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAwADIANQAxADUA
YgBjADQANQAwAGQANAA0ADQAYwAzADgAZQBiAGMAOQBkAGUAYwBkAGUAOQBkADYANABmADkAAAA+
AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA0ADkAMwAuADIANQAyADYA
OQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAwADIANQAxADUAYgBj
ADQANQAwAGQANAA0ADQAYwAzADgAZQBiAGMAOQBkAGUAYwBkAGUAOQBkADYANABmADkALgBkAGwA
bAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAA
AAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADAAMgA1
ADEANQBiAGMANAA1ADAAZAA0ADQANABjADMAOABlAGIAYwA5AGQAZQBjAGQAZQA5AGQANgA0AGYA
OQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAwADIANQAx
ADUAYgBjADQANQAwAGQANAA0ADQAYwAzADgAZQBiAGMAOQBkAGUAYwBkAGUAOQBkADYANABmADkA
AABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANAA5ADMALgAy
ADUAMgA2ADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcANAA5ADMALgAyADUAMgA2ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAA2DYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--В данном разделе CDATA содержатся сведения о макете пакета. В данном разделе содержатся сведения о координатах (x,y), ширине и высоте.-->
<!--В случае возникновения ошибки при редактировании этого раздела вручную его можно удалить. -->
<!--Пакет можно загрузить обычным образом, но прежние сведения о макете будут утеряны, и конструктор автоматически перераспределит элементы в области конструктора.-->
<Objects
  Version="8">
  <!--Все приведенные ниже узлы будут содержать свойства, не влияющие на поведение среды выполнения.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="152,42"
          Id="Package\Send messages"
          TopLeft="183,108" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>