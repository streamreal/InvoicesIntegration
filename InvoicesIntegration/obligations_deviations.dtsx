<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/14/2020 11:18:27 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ETP025"
  DTS:CreatorName="ELTRANSPLUS\andreydruzhinin"
  DTS:DTSID="{F2CA52CB-2BC9-439C-A0AA-83168F09BA33}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1049"
  DTS:ObjectName="Package2"
  DTS:PackageType="5"
  DTS:VersionBuild="22"
  DTS:VersionGUID="{982111C5-90DF-4780-B13D-FBA10E46994F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Загрузка не взятых в управление за 24 часа"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{AB614839-21DC-4E20-8EB9-E99F71CF5A2A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка не взятых в управление за 24 часа"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
          SQLTask:SqlStatementSource="INSERT [aberration].[dbo].[obligations_take]&#xA;([id]&#xA;,[Obligation_Name]&#xA;,[CustomerName]&#xA;,[Import_DateTime]&#xA;,[RegNum]&#xA;,[Delivery]&#xA;,[CargoID]&#xA;,[STOSalesPersonName]&#xA;,[RegUsername_Full])&#xA;SELECT&#xA;[id],&#xA;[Obligation_Name],&#xA;[CustomerName],&#xA;[Import_DateTime],&#xA;COALESCE([RegNum], '-') [RegNum],&#xA;[Delivery],&#xA;COALESCE([CargoID], '-') [CargoID],&#xA;COALESCE([STOSalesPersonName], '-') [STOSalesPersonName],&#xA;COALESCE([RegUsername_Full], '-') [RegUsername_Full]&#xA;FROM [BI].[dwh].[Obligations] o&#xA;WHERE [ID_category] = 1&#xA;AND [ID_obligation] IN (0,1,2,3,4,5,6,7,8)&#xA;AND [Specialist] IS NULL&#xA;AND DATEDIFF(hour, Import_DateTime, GETDATE()) &gt; 24&#xA;AND NOT EXISTS(SELECT 0 FROM [aberration].[dbo].[obligations_take] a WHERE a.id = o.id)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Загрузка просроченных"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{FC40B442-E83C-4573-8314-52E31A8AB89E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка просроченных"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
          SQLTask:SqlStatementSource="INSERT [aberration].[dbo].[obligations_overdue]&#xA;           ([id]&#xA;           ,[Obligation_Name]&#xA;           ,[Marginal_Action_Date]&#xA;           ,[CustomerName]&#xA;           ,[Delivery]&#xA;           ,[RegNum]&#xA;           ,[Specialist])&#xA;SELECT&#xA;[id]&#xA;,[Obligation_Name]&#xA;,[Marginal_Action_Date]&#xA;,[CustomerName]&#xA;,[Delivery]&#xA;,[RegNum]&#xA;,[Specialist]&#xA;FROM [BI].[dwh].[Obligations] o&#xA;WHERE &#xA;[ID_category] = 2&#xA;AND [ID_obligation] IN (0,1,2,3,4,5)&#xA;AND NOT EXISTS(SELECT 0 FROM [aberration].[dbo].[obligations_overdue] a WHERE a.id = o.id)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Обновление таблицы"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{7499BB4F-6FF9-49FF-B114-35C029329E00}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Обновление таблицы"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
          SQLTask:SqlStatementSource="UPDATE o&#xA;SET &#xA;o.bitrix_message_id = oa.bitrix_message_id,&#xA;o.date_publish = oa.date_publish,&#xA;o.date_notice = DATEADD(day, 1, oa.date_publish)&#xA;FROM [aberration].[dbo].[obligations_take] o&#xA;OUTER APPLY&#xA;(SELECT TOP (1) bitrix_message_id, CAST(CAST(date_publish as datetimeoffset) as datetime) date_publish&#xA;FROM [aberration].[dbo].[messages_330] m&#xA;WHERE m.delivery_id = o.Delivery&#xA;AND m.detail LIKE '%' + o.Obligation_Name + '%'&#xA;AND m.[message] LIKE '%Незавершенное обязательство не взято в управление%') AS oa&#xA;WHERE o.message_sent = 1 AND o.bitrix_message_id IS NULL&#xA;&#xA;UPDATE o&#xA;SET o.has_specialist = &#xA;(CASE&#xA;WHEN EXISTS(SELECT 0 &#xA;&#x9;&#x9;&#x9;FROM [BI].[dwh].[Obligations] ob &#xA;&#x9;&#x9;&#x9;WHERE ob.id = o.id &#xA;&#x9;&#x9;&#x9;AND &#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(COALESCE(ob.Specialist, '') &lt;&gt; '' OR ob.ID_Category IN ('2','3'))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;THEN 1&#xA;ELSE 0&#xA;END)&#xA;FROM [aberration].[dbo].[obligations_take] o&#xA;WHERE o.has_specialist = 0" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Сообщения по не взятым в управление"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{91B1731A-A1FE-4850-9B05-61360590CDB7}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Сообщения по не взятым в управление"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7639802c320a4eaa97aae0ef685da060"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Aberration.cs"
            Encoding="UTF8"><![CDATA[using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System;

namespace ST_7639802c320a4eaa97aae0ef685da060
{
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aberration")]
	public partial class AberrationContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();

    #endregion
		public AberrationContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AberrationContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AberrationContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AberrationContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<obligations_take> obligations_take
		{
			get
			{
				return this.GetTable<obligations_take>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name= "aberration.dbo.obligations_take")]
	public partial class obligations_take
	{
		
		private int _table_id;
		
		private int _message_sent;
		
		private System.Nullable<int> _id;
		
		private string _Obligation_Name;
		
		private string _CustomerName;
		
		private System.DateTime _Import_DateTime;
		
		private string _RegNum;
		
		private string _Delivery;
		
		private string _CargoID;
		
		private string _STOSalesPersonName;
		
		private string _RegUsername_Full;
		
		private System.DateTime _load_datetime;

		private System.Nullable<int> _bitrix_message_id;

		private System.Nullable<System.DateTime> _date_publish;

		private System.Nullable<System.DateTime> _date_notice;

		private int _has_specialist;

		public obligations_take()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_table_id", DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int table_id
		{
			get
			{
				return this._table_id;
			}
			set
			{
				if ((this._table_id != value))
				{
					this._table_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message_sent", DbType="Int NOT NULL")]
		public int message_sent
		{
			get
			{
				return this._message_sent;
			}
			set
			{
				if ((this._message_sent != value))
				{
					this._message_sent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int")]
		public System.Nullable<int> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Obligation_Name", DbType="VarChar(100)")]
		public string Obligation_Name
		{
			get
			{
				return this._Obligation_Name;
			}
			set
			{
				if ((this._Obligation_Name != value))
				{
					this._Obligation_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(150)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this._CustomerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Import_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime Import_DateTime
		{
			get
			{
				return this._Import_DateTime;
			}
			set
			{
				if ((this._Import_DateTime != value))
				{
					this._Import_DateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNum", DbType="VarChar(25)")]
		public string RegNum
		{
			get
			{
				return this._RegNum;
			}
			set
			{
				if ((this._RegNum != value))
				{
					this._RegNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivery", DbType="VarChar(30)")]
		public string Delivery
		{
			get
			{
				return this._Delivery;
			}
			set
			{
				if ((this._Delivery != value))
				{
					this._Delivery = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CargoID", DbType="VarChar(20)")]
		public string CargoID
		{
			get
			{
				return this._CargoID;
			}
			set
			{
				if ((this._CargoID != value))
				{
					this._CargoID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOSalesPersonName", DbType="VarChar(200)")]
		public string STOSalesPersonName
		{
			get
			{
				return this._STOSalesPersonName;
			}
			set
			{
				if ((this._STOSalesPersonName != value))
				{
					this._STOSalesPersonName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegUsername_Full", DbType="VarChar(40)")]
		public string RegUsername_Full
		{
			get
			{
				return this._RegUsername_Full;
			}
			set
			{
				if ((this._RegUsername_Full != value))
				{
					this._RegUsername_Full = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_load_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime load_datetime
		{
			get
			{
				return this._load_datetime;
			}
			set
			{
				if ((this._load_datetime != value))
				{
					this._load_datetime = value;
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_bitrix_message_id", DbType = "Int")]
		public System.Nullable<int> bitrix_message_id
		{
			get
			{
				return this._bitrix_message_id;
			}
			set
			{
				if ((this._bitrix_message_id != value))
				{
					this._bitrix_message_id = value;

				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_date_publish", DbType = "DateTime")]
		public System.Nullable<System.DateTime> date_publish
		{
			get
			{
				return this._date_publish;
			}
			set
			{
				if ((this._date_publish != value))
				{

					this._date_publish = value;
	
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_date_notice", DbType = "DateTime")]
		public System.Nullable<System.DateTime> date_notice
		{
			get
			{
				return this._date_notice;
			}
			set
			{
				if ((this._date_notice != value))
				{

					this._date_notice = value;

				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_has_specialist", DbType = "Int NOT NULL")]
		public int has_specialist
		{
			get
			{
				return this._has_specialist;
			}
			set
			{
				if ((this._has_specialist != value))
				{
					this._has_specialist = value;
				}
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data.SqlClient;
#endregion
using System.Linq;

namespace ST_7639802c320a4eaa97aae0ef685da060
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            Bitrix24 bx_logon = new Bitrix24();
            string message = String.Empty;

            SqlConnection connection = (SqlConnection)Dts.Connections["10.10.0.28.automation.phpuser"].AcquireConnection(Dts.Transaction);

            AberrationContext db = new AberrationContext(connection);

            var messagesToSend = db.obligations_take.Where(m => m.message_sent == 0).Select(m => m);

            foreach (obligations_take msg in messagesToSend)
            {
                message = "Наименование обязательства: " + msg.Obligation_Name + System.Environment.NewLine +
                          "Заказчик: " + msg.CustomerName + System.Environment.NewLine +
                          "Дата и время загрузки в базу: " + msg.Import_DateTime + System.Environment.NewLine +
                          "Номер ДТ: " + msg.RegNum + System.Environment.NewLine +
                          "Доставка: " + msg.Delivery + System.Environment.NewLine +
                          "Номер груза: " + msg.CargoID + System.Environment.NewLine +
                          "Специалист СТО (заявитель в доставке): " + msg.STOSalesPersonName + System.Environment.NewLine +
                          "Подал ДТ: " + msg.RegUsername_Full;
                try
                {
                    _ = bx_logon.SendCommand("log.blogpost.add", "",
                    "USER_ID=1716" +
                    "&POST_TITLE=Незавершенное обязательство не взято в управление в течение 24 часов" +
                    "&POST_MESSAGE=" + message +
                    "&DEST[0]=SG330"
                    );
                }
                catch
                {
                    continue;
                }

                msg.message_sent = 1;
            }

            db.SubmitChanges();

            var commentsToSend = db.obligations_take.Where(c => 
                c.has_specialist == 0 
                && c.date_notice != null
                && DateTime.Now > c.date_notice.Value
                ).Select(c => c);

            foreach (obligations_take comment in commentsToSend)
            {
                try
                {
                    _ = bx_logon.SendCommand("log.blogcomment.add", "",
                      "USER_ID=1716" +
                      "&POST_ID=" + comment.bitrix_message_id.ToString() +
                      "&TEXT=Незавершенное обязательство по-прежнему не взято в управление"
                      );
                }
                catch
                {
                    continue;
                }

                comment.date_notice = comment.date_notice.Value.AddDays(1);
            }

            db.SubmitChanges();

            Dts.Connections["10.10.0.28.automation.phpuser"].ReleaseConnection(connection);
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
#endregion
using System.IO;
using System.Net;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;

partial class Bitrix24
    {
    //боевые настройки
    private const string BX_ClientID = "local.5e8255b199d0e7.70800677";
    private const string BX_ClientSecret = "730hvSv5yrgmVv0gcwkxUz2ATaGGIx0fZmuOXMQjSkehKaFzMz";
    private const string BX_Portal = "https://bitrix.eltransplus.ru";

    //bitest
    //private const string BX_ClientID = "local.5e834c45530933.17923150";
    //private const string BX_ClientSecret = "lBA05N9gi8dw3sVX4A7V7R7oSqY5EU0L779BZNi0TGutrIzVFh";
    //private const string BX_Portal = "https://bitest.eltransplus.ru";

    private const string BX_OAuthSite = "https://oauth.bitrix.info";

        private string AccessToken;
        private string RefreshToken;
        private DateTime RefreshTime;
        private string Code;
        private string Cookie;

        public Bitrix24()
        {
            Connect();
        }

        private void Connect()
        {
            //Создание HTTP подключения
            string BX_URI = BX_Portal + "/oauth/authorize/?client_id=" + BX_ClientID;
            HttpWebRequest requestLogonBitrix24 = (HttpWebRequest)WebRequest.Create(BX_URI);

            //Логин и пароль администратора, под которым будут выполняться запросы
            string username = "andreydruzhinin@eltransplus.ru";
            string password = "J4e3Yv";

            //Настройка запроса
            string svcCredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(username + ":" + password));
            requestLogonBitrix24.Headers.Add("Authorization", "Basic " + svcCredentials);
            requestLogonBitrix24.AllowAutoRedirect = false; //обязательное условие, чтобы не было автоматической переадресации на другую страницу (теряются пользовательские сведения об авторизации)
            requestLogonBitrix24.Method = "POST";

            HttpWebResponse responseLogonBitrix24 = (HttpWebResponse)requestLogonBitrix24.GetResponse();

            //Проверяем что статус-код 302, должны предложить переадресацию, иначе авторизация не требуется, мы и так авторизированы
            if (responseLogonBitrix24.StatusCode == HttpStatusCode.Found)
            {
                //Получаем из заголовков ответа Куки и параметры адреса переадресации (из поля "Location"), параметр Code
                Uri locationURI = new Uri(responseLogonBitrix24.Headers["Location"]);

                //Получаем параметры из строки ответа (нужен System.Web)
                var locationParams = HttpUtility.ParseQueryString(locationURI.Query);
                Cookie = responseLogonBitrix24.Headers["Set-Cookie"];
                Code = locationParams["Code"];

                //Вызываем исключение, если Код мы не смогли получить, без него далее никак.
                if (String.IsNullOrEmpty(Code))
                {
                    throw new FormatException("CodeNotFound");
                }

                //Закрываем подключение
                responseLogonBitrix24.Close();

                //Если код успешно получили, то формируем новый HTTP запрос для получения Токенов авторизации
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=authorization_code" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "code=" + Code;
                SetToken(BX_OAuth_URI);
            }

        }

        //Закрытый метод для получения и записи Токенов авторизации
        private void SetToken(string BX_OAuth_URI)
        {
            //Формируем новый HTTP запрос для получения Токенов авторизации
            HttpWebRequest requestLogonBitrixOAuth = (HttpWebRequest)WebRequest.Create(BX_OAuth_URI);
            requestLogonBitrixOAuth.Method = "POST";
            requestLogonBitrixOAuth.Headers["Cookie"] = Cookie; //Используем Куки полученный в предыдущем запросе авторизации

            //Подключаемся (отправляем запрос)
            HttpWebResponse responseLogonBitrixOAuth = (HttpWebResponse)requestLogonBitrixOAuth.GetResponse();

            //Если в ответ получаем статус-код отличный от 200, то это ошибка, вызываем исключение
            if (responseLogonBitrixOAuth.StatusCode != HttpStatusCode.OK)
            {
                throw new FormatException("ErrorLogonBitrixOAuth");
            }
            else
            {
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(objLogonBitrixOAuth));
                objLogonBitrixOAuth objLogonBitrixOAuth;

                using (Stream st = responseLogonBitrixOAuth.GetResponseStream())
                {
                    objLogonBitrixOAuth = (objLogonBitrixOAuth)deserializer.ReadObject(st);
                }

                //Записывем Токены авторизации в поля
                AccessToken = objLogonBitrixOAuth.access_token;
                RefreshToken = objLogonBitrixOAuth.refresh_token;
                RefreshTime = DateTime.Now.AddSeconds(Convert.ToDouble(objLogonBitrixOAuth.expires_in)); //Добавляем к текущей дате количество секунд действия токена, обычно это плюс один час
            }
        }

        //Закрытый метод для обновления Токенов авторизации, если истекло время их действия
        private void RefreshTokens()
        {
            if (RefreshTime == DateTime.MinValue) // Если RefreshTime пустая
            {
                //Тогда вызываем авторизацию по полной программе
                Connect();
                return;
            }

            //Проверяем, если истекло время действия Токена авторизации, то обновляем его
            if (RefreshTime.AddSeconds(-5) < DateTime.Now)
            {
                //Формируем новый HTTP запрос для обновления Токена авторизации, здесь Code уже не нужен
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=refresh_token" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "refresh_token=" + RefreshToken;
                SetToken(BX_OAuth_URI);
            }
        }

        //Открытый метод для отправки REST-запросов в Битрикс24
        public string SendCommand(string Command, string GetParams = "", string PostParams = "")
        {
            //Проверяем и обновлем Токены авторизации
            RefreshTokens();

            //Проверяем возможное указание параметров
            string BX_REST_URI = BX_Portal + "/rest/" + Command + "?auth=" + AccessToken;

            if (String.IsNullOrEmpty(GetParams) == false)
            {
                BX_REST_URI = BX_REST_URI + "&" + GetParams;
            }

            //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
            HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
            requestBitrixREST.Method = "POST";
            requestBitrixREST.Headers["Cookie"] = Cookie; //Используем Куки полученный в запросе авторизации

            //Готовим тело запроса и вставляем его в тело POST-запроса  
            byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);
            requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
            requestBitrixREST.ContentLength = byteArrayBody.Length;

            Stream dataBodyStream = requestBitrixREST.GetRequestStream();
            dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
            dataBodyStream.Close();

            //Отправляем данные в Битрикс24
            HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

            //Читаем тело ответа от Битрикс24
            Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
            var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
            string stringBitrixREST = readerBitrixREST.ReadToEnd();

            //Закрываем все подключения и потоки
            readerBitrixREST.Close();
            dataStreamBitrixREST.Close();
            responseBitrixREST.Close();

            //Возвращаем строку ответа в формате JSON
            return stringBitrixREST;
        }
    }]]></ProjectItem>
          <ProjectItem
            Name="ST_7639802c320a4eaa97aae0ef685da060.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{FAA850E3-1365-411C-9F7F-019988C4C350}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7639802c320a4eaa97aae0ef685da060</RootNamespace>
    <AssemblyName>ST_7639802c320a4eaa97aae0ef685da060</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Aberration.cs" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="objLogonBitrixOAuth.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_7639802c320a4eaa97aae0ef685da060</msb:CodeName>
		<msb:DisplayName>ST_7639802c320a4eaa97aae0ef685da060</msb:DisplayName>
		<msb:ProjectId>{A9122BC1-F625-415B-BA6D-DE98FEE4844D}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7639802c320a4eaa97aae0ef685da060.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Aberration.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="objLogonBitrixOAuth.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7639802c320a4eaa97aae0ef685da060.Properties.Settings.get_Default():ST_7639802c320a4eaa97aae0ef685da060.Properties.Sett" +
    "ings")]

namespace ST_7639802c320a4eaa97aae0ef685da060.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="objLogonBitrixOAuth.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
#endregion
using System.Runtime.Serialization;

partial class Bitrix24
    {
    [DataContract]
        public class objLogonBitrixOAuth
        {
            [DataMember]
            public string expires_in { get; set; }
            [DataMember]
            public string refresh_token { get; set; }
            [DataMember]
            public string access_token { get; set; }
        }
    }]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Resources;
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7639802c320a4eaa97aae0ef685da060")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7639802c320a4eaa97aae0ef685da060")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
[assembly: NeutralResourcesLanguage("ru")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7639802c320a4eaa97aae0ef685da060.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7639802c320a4eaa97aae0ef685da060.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7639802c320a4eaa97aae0ef685da060.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7639802c320a4eaa97aae0ef685da060.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7639802c320a4eaa97aae0ef685da060.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_7639802c320a4eaa97aae0ef685da060.dll">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
BQAAABcAAAArAAAABAAAAAEAAAAJAAAAAQAAAAMAAAAFAAAAAACMCAEAAAAAAAYAbwY8DAYAFAc8
DAYAhQUeDA8AsAwAAAYAsgWNCgYAPgaNCgYAHwaNCgYA+waNCgYApQaNCgYAvgaNCgYA2wWNCgYA
VAVcDAYA9gVhBwYAqQ0TCQYAzQMTCQoAwwTVDQoAnwpGAQ4AyAsiCwYA+gjLAA4AjwZgCgYAHAU8
DA4AWwZgChIAyQV7BxIAyA5jCxIAbAJ7BxYAxwoDARIAJQBjCxIAdgV7BwYALQATCRIADwZ7BxoA
2QYoCBoAjwQoCBYA+QomDh4A/gkxDQYAYAAnAQYAMAkTCQYANwUeDAYAnAtcDAYATwtLCgoA9AR2
CAoAmQV2CAoAqwQ2CgoAgg7VDQoAfg7VDQYAWAe8DgYAtgcTCQYAdg4TCQoAswrVDQoAxwTVDQoA
lwLVDQoABQgTCSIAOQ8PAQYAEgsTCQYAPQQTCQYA/gITCQ4A4wtgCgYAywITCQYAgAvLAAYAjQvL
ABIAYwJ7BxoAZAgoCCYAYA0GBCYArAsGBB4AKwoxDQYAhASNCgYA6gITCQYARAuNCh4A7QkxDQYA
bgATCR4AEgoxDR4AJQoxDQYAdAATCR4AUwAxDR4A1wJ0Cx4ARgB0CwYAOAAnAQYAPA4TCQYA9wtJ
DQYA8g6NCgAAAACRAAAAAAABAAEAAAAQAHsAAAA5AAEAAQABABAA1A4BAGEACgAGAAEAEACxAgEA
OQALAAwAAQAQAOIJAQCBABsALQAAABAAYwzNDDkAGwAvAAABEAAFDc0MqQAdADMAAgAQAPEHAAA5
AB4ANgADAQAAiA0AAJEAIQA9AAMhEAAjAQAAOQAkAD0AUYCyAGQBUYDgDWQBUYBRCGQBUYAJBWQB
AQBpCWQBAQBcCWQBAQDWA7oAAQChAmQBAQCmAmQBEQB6ArMDAQChAbcDAQBoDrcDAQC1AboDAQBN
A2QBAQCgA2QBAQDFA7oAAQAoCWQBAQAVD2QBAQCpAGQBAQB4A2QBAQDMCGQBAQD3A7oAAQB+AboD
AQDRB8EDAQBGAsEDAQCjDrcDEQA1CckDEQB0BM4DEQBTAtMDAQD2AWQBAQC5AWQBAQDYAWQBBgb0
ALcDVoB4DdcDVoBUBNcDNgCNANsDUCAAAAAAhhgRDAYAAQBgIAAAAACBALcNBgABAHAhAAAAAIEA
dQkQAAEARCIAAAAAgQAjDQYAAgCkIgAAAACGABwC3wMCAHMjAAAAAIYYEQwQAAUAgSMAAAAAhhgR
DOYDBgCPIwAAAACGGBEM6AAHAJkjAAAAAIYYEQzvAAkAoyMAAAAAhgitAuwDCwCrIwAAAACRGBcM
9QMLALcjAAAAAIYYEQwGAAsAvyMAAAAAhgiRAfkDCwDHIwAAAACGCJ4BAQALANkjAAAAAIYIVA75
AwwA4SMAAAAAhghlDgEADADzIwAAAACGCKsB/QMNAPwjAAAAAIYIsgEFBA0APCQAAAAAhgg2A28A
DgBEJAAAAACGCEoDEAAOAFskAAAAAIYIjANvAA8AYyQAAAAAhgidAxAADwB6JAAAAACGCK4DDgQQ
AIIkAAAAAIYIwgMTBBAAmSQAAAAAhggaCW8AEQChJAAAAACGCCUJEAARALgkAAAAAIYIBQ9vABIA
wCQAAAAAhggSDxAAEgDXJAAAAACGCJoAbwATAN8kAAAAAIYIpgAQABMA9iQAAAAAhgheA28AFAD+
JAAAAACGCHUDEAAUABUlAAAAAIYItAhvABUAHSUAAAAAhgjJCBAAFQA0JQAAAACGCOIDDgQWADwl
AAAAAIYI9AMTBBYAUyUAAAAAhghlAf0DFwBcJQAAAACGCHsBBQQXAJwlAAAAAIYIvQcZBBgApCUA
AAAAhgjOByIEGAD1JQAAAACGCDMCGQQZAAAmAAAAAIYIQwIiBBkAUSYAAAAAhgiNDvkDGgBZJgAA
AACGCKAOAQAaAGwmAAAAAIYA6AkGABsA9CoAAAAAhhgRDAYAGwC3IwAAAACDGBEMBgAbAPwqAAAA
AJMImAssBBsAKCsAAAAAkwhcBDIEGwAvKwAAAACTCGgEOAQbADcrAAAAAJYI8A0/BBwAPisAAAAA
hhgRDAYAHABGKwAAAACRGBcM9QMcAFIrAAAAAIYIxAlvABwAWisAAAAAhgjTCRAAHABjKwAAAACG
CH4JbwAdAGsrAAAAAIYIkAkQAB0AdCsAAAAAhgiiCW8AHgB8KwAAAACGCLMJEAAeALcjAAAAAIYY
EQwGAB8AhSsAAAAAkRgXDPUDHwC3IwAAAACGGBEMBgAfAAAAAQC+AAAAAQAgAhAQAgAODRAQAwAY
DQAAAQAHCwAAAQAHCwAAAQAHCwAAAgB6AgAAAQAHCwAAAgB6AgAAAQBSBwAAAQBSBwAAAQBSBwAA
AQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBS
BwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwAAAQBSBwkAEQwBABEAEQwGABkA
EQwKACkAEQwQADEAEQwQADkAEQwQAEEAEQwQAEkAEQwQAFEAEQwQAFkAEQwQAGEAEQwQAGkAEQwQ
AKEAEQwGAKkAEQwGALEAEQwGALkAEQwGAOEAEQwGAPEAEQwGAPkAEQwGACkBEQwGAEkBEQwVAHEA
EQwGAFkB7QQnAGkBhAAuAHEBng00AGkB/Aw7AHkBlAdBAFkBbA1HAHEBng1NAIkAQgFTAGEBvw1Z
AFkBKAIQAFkB0wReAIEAiAJkAIkBbA1HAIkAAQlqAJkBEQwQAJkB+w5vAKEBrAdzAHEBRQ95AKkB
EQwQAIkB3wQGAIkACglTALEBJAOLAJEAEQyUAIkB3gibAMEBpQ2gAMkB5QQGAHkA5g6mAHkB4QKr
AHkAMQywAHkAPAe6AHkAHw++AHkAUAm+AHEBng3NAFkBMgQQAFkB3wfVAFkB8AibAJkAFgXaAJkA
3wQGANEBEQziANkBEgJvANkB3wQGAMEAEQzoAMEAEQzvAMEAwgL3AOEBEQwGAAwA/A0ZAQwARQce
AXEBKw8iAXkAKw++ABQARQceARQA/A0ZAXEBTQ9kAQEBgA1nAekBXA1tAfEBAQlzAekBfQp6AfkB
1Qp+AQECvguDAQkCEAONAQECUw+WAQECHQ6iAQECXgisAQEC/AC4AVECQgTVAVECsA0AAhwAAwwv
AiQASA4ZAWkCJgRBAnkAowdvAHEBng1FAnECsw4eAcEAvwwGAAECWwhLAgECWwusARQAMgcZAQkC
EANbAnkAQQm+AAECRAlLAnEAowdvAHkAlg2wABQAEQxnAvkB5wptAukBDg4BAAEBEQwGALEB7g5y
AjEBEQx4AlEBEQwGAA4ABACbAg4ACADWAg4ADAA7Aw4ADQAAAA4AEAB2Aw4AEQAAAAgAiACpAwgA
jACuAy4ACwB8BC4AEwCFBC4AGwCkBC4AIwCtBC4AKwDWBC4AMwDWBC4AOwDWBC4AQwCtBC4ASwDc
BC4AUwDWBC4AWwDzBC4AYwD7BEkAkwCIBWMAgwBFBWkAkwDhBYMAiwBcBYkAkwAUBqMAmwCuA6kA
kwA0BsMAowCuA8kAkwBqBukAkwCdBgMBawCuAwkBkwDYBikBkwAEB0MBcwCuA0kBkwAyB2kBkwBf
B4kBkwCYB6kBkwDOB8kBkwAHCOkBkwA2CAkCkwBlCCkCkwCTCEkCqwCkBGkCqwCkBKkCewCuA8kC
ewCuA+kCewCuA6EDcwCuA8EDcwCuA+EDcwCuAwEEcwCuA8AGcwCuA+AGcwCuAwAHcwCuAyAHcwCu
A0AHcwCuA2AHcwCuAxwAfgC2AMYABgEoAT4BAwABAAQAAgAGABIABwAUAAgAFQAAALECRAQAAKIB
TQQAAGkOTQQAALYBUQQAAE4DWQQAAKEDWQQAAMYDXQQAACkJWQQAABYPWQQAAKoAWQQAAHkDWQQA
AM0IWQQAAPgDXQQAAH8BUQQAANIHYgQAAEcCYgQAAKQOTQQAAJwLawQAAHwEcQQAAAYOdwQAANcJ
WQQAAJQJWQQAALcJWQQCAAoAAwACAA0ABQABAA4ABQACAA8ABwABABAABwACABEACQABABIACQAC
ABMACwABABQACwACABUADQABABYADQACABcADwABABgADwACABkAEQABABoAEQACABsAEwABABwA
EwACAB0AFQABAB4AFQACAB8AFwABACAAFwACACEAGQABACIAGQACACMAGwABACQAGwACACUAHQAB
ACYAHQACACcAHwABACgAHwACACkAIQABACoAIQACACsAIwABACwAIwACADAAJQACADEAJwABADIA
JwACADMAKQACADYAKwABADcAKwACADgALQABADkALQACADoALwABADsALwATATcBJwI5AgSAAAAB
AAAA8RxTdQAAAAAAAAEAAAAEAAAAAAAAAAAAAACAAhoBAAAAAAQAAAAAAAAAAAAAAIACEwkAAAAA
BAAAAAAAAAAAAAAAgAJgCgAAAAAEAAAAAAAAAAAAAACAAmMLAAAAAAQAAAAAAAAAAAAAAIACAwEA
AAAADQAAAAAAAAAAAAAAiQIJCAAAAAAEAAAAAAAAAAAAAACAAkgEAAAAAAQAAAAAAAAAAAAAAJIC
DwEAAAAADQAAAAAAAAAAAAAAiQLVAAAAAAAAAAAAAQAAAG0MAAAIAAIACQAFAAoABQCFAAEBqwDK
Aa0AAQGrAPQBrwAgAgAAAAAAU1RfNzYzOTgwMmMzMjBhNGVhYTk3YWFlMGVmNjg1ZGEwNjAAVGFi
bGVgMQBOdWxsYWJsZWAxAElFbnVtZXJhYmxlYDEASVF1ZXJ5YWJsZWAxAEV4cHJlc3Npb25gMQBJ
RW51bWVyYXRvcmAxAEludDMyAEZ1bmNgMgBCaXRyaXgyNABnZXRfVVRGOAA8PjkAPE1vZHVsZT4A
Z2V0X0NhcmdvSUQAc2V0X0NhcmdvSUQAQlhfQ2xpZW50SUQAQlhfT0F1dGhfVVJJAFN5c3RlbS5J
TwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBMYW1iZGEAU3lzdGVtLkRh
dGEAU3lzdGVtLldlYgBtc2NvcmxpYgA8PmMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAQWRk
AFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZABnZXRfYml0cml4X21lc3NhZ2VfaWQAc2V0
X2JpdHJpeF9tZXNzYWdlX2lkAGdldF90YWJsZV9pZABzZXRfdGFibGVfaWQAZ2V0X2lkAHNldF9p
ZAA8cmVmcmVzaF90b2tlbj5rX19CYWNraW5nRmllbGQAPGFjY2Vzc190b2tlbj5rX19CYWNraW5n
RmllbGQAPGV4cGlyZXNfaW4+a19fQmFja2luZ0ZpZWxkAFJlYWRUb0VuZABTZW5kQ29tbWFuZABz
ZXRfTWV0aG9kAGdldF9kYXRlX25vdGljZQBzZXRfZGF0ZV9ub3RpY2UAZGVmYXVsdEluc3RhbmNl
AEF0dHJpYnV0ZU1hcHBpbmdTb3VyY2UAbWFwcGluZ1NvdXJjZQBnZXRfU3RhdHVzQ29kZQBIdHRw
U3RhdHVzQ29kZQBDb29raWUAZ2V0X29ibGlnYXRpb25zX3Rha2UAR2V0VGFibGUASURpc3Bvc2Fi
bGUAUXVlcnlhYmxlAFRvRG91YmxlAFJ1bnRpbWVNZXRob2RIYW5kbGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0TWV0aG9kRnJvbUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBnZXRfT2JsaWdhdGlvbl9O
YW1lAHNldF9PYmxpZ2F0aW9uX05hbWUAZ2V0X1NUT1NhbGVzUGVyc29uTmFtZQBzZXRfU1RPU2Fs
ZXNQZXJzb25OYW1lAGdldF9DdXN0b21lck5hbWUAc2V0X0N1c3RvbWVyTmFtZQBnZXRfSW1wb3J0
X0RhdGVUaW1lAHNldF9JbXBvcnRfRGF0ZVRpbWUAUmVmcmVzaFRpbWUAZ2V0X2xvYWRfZGF0ZXRp
bWUAc2V0X2xvYWRfZGF0ZXRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBnZXRf
TmV3TGluZQBzZXRfQ29udGVudFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRP
YmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UASHR0cFdlYlJlc3BvbnNlAEdl
dFJlc3BvbnNlAENsb3NlAERpc3Bvc2UAQ3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAEJYX09B
dXRoU2l0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAE5ldXRyYWxSZXNvdXJjZXNMYW5ndWFnZUF0dHJpYnV0ZQBUYWJsZUF0dHJp
YnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJs
eVRpdGxlQXR0cmlidXRlAERhdGFiYXNlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBDb2x1bW5BdHRyaWJ1dGUAQXNzZW1ibHlDb25m
aWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUARGF0YU1lbWJl
ckF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAERhdGFDb250cmFjdEF0
dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1
dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJp
YnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUATWluVmFsdWUAZ2V0
X0hhc1ZhbHVlAHZhbHVlAEVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3lzdGVt
LkRhdGEuTGlucS5NYXBwaW5nAFRvQmFzZTY0U3RyaW5nAFRvU3RyaW5nAFBhcnNlUXVlcnlTdHJp
bmcAZ2V0X2RhdGVfcHVibGlzaABzZXRfZGF0ZV9wdWJsaXNoAHNldF9Db250ZW50TGVuZ3RoAG9i
akxvZ29uQml0cml4T0F1dGgAVXJpAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAEJYX1BvcnRhbABOb3RFcXVhbABT
Y3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfNzYzOTgwMmMzMjBhNGVh
YTk3YWFlMGVmNjg1ZGEwNjAuZGxsAGdldF9SZWdVc2VybmFtZV9GdWxsAHNldF9SZWdVc2VybmFt
ZV9GdWxsAEdldFJlc3BvbnNlU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0AZ2V0X0l0ZW0Ac2V0X0l0
ZW0AU3lzdGVtAGdldF9SZWdOdW0Ac2V0X1JlZ051bQBFbnVtAHJlc291cmNlTWFuAG9wX0dyZWF0
ZXJUaGFuAG9wX0xlc3NUaGFuAFJlZnJlc2hUb2tlbgBBY2Nlc3NUb2tlbgBTZXRUb2tlbgBnZXRf
cmVmcmVzaF90b2tlbgBzZXRfcmVmcmVzaF90b2tlbgBnZXRfYWNjZXNzX3Rva2VuAHNldF9hY2Nl
c3NfdG9rZW4AZ2V0X2V4cGlyZXNfaW4Ac2V0X2V4cGlyZXNfaW4AU2NyaXB0TWFpbgBNZW1iZXJF
eHByZXNzaW9uAFBhcmFtZXRlckV4cHJlc3Npb24AQ29uc3RhbnRFeHByZXNzaW9uAEJpbmFyeUV4
cHJlc3Npb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVt
LlJ1bnRpbWUuU2VyaWFsaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24A
TmFtZVZhbHVlQ29sbGVjdGlvbgBXZWJIZWFkZXJDb2xsZWN0aW9uAElEYkNvbm5lY3Rpb24AQWNx
dWlyZUNvbm5lY3Rpb24AUmVsZWFzZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBjb25uZWN0aW9u
AEZvcm1hdEV4Y2VwdGlvbgBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uLkpzb24ATWV0aG9k
SW5mbwBDdWx0dXJlSW5mbwBBbmRBbHNvAFN5c3RlbS5EYXRhLkxpbnEAU3lzdGVtLkxpbnEAU3Ry
ZWFtUmVhZGVyAFRleHRSZWFkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdl
cgBQYXJhbWV0ZXIARGF0YUNvbnRyYWN0SnNvblNlcmlhbGl6ZXIAWG1sT2JqZWN0U2VyaWFsaXpl
cgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3Rp
Y3MAQWRkU2Vjb25kcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNv
dXJjZXMAU1RfNzYzOTgwMmMzMjBhNGVhYTk3YWFlMGVmNjg1ZGEwNjAuUHJvcGVydGllcy5SZXNv
dXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFN1Ym1pdENoYW5nZXMAU1RfNzYzOTgwMmMz
MjBhNGVhYTk3YWFlMGVmNjg1ZGEwNjAuUHJvcGVydGllcwBHZXRCeXRlcwBTZXR0aW5ncwBHZXRQ
YXJhbXMAUG9zdFBhcmFtcwBSZWZyZXNoVG9rZW5zAFN5c3RlbS5MaW5xLkV4cHJlc3Npb25zAFN5
c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAZ2V0X0hlYWRlcnMAU3VjY2VzcwBnZXRf
RHRzAFNjcmlwdFJlc3VsdHMAQWRkRGF5cwBDb25jYXQAUmVhZE9iamVjdABTZWxlY3QAQ29ubmVj
dABzZXRfQWxsb3dBdXRvUmVkaXJlY3QAU3lzdGVtLk5ldABCWF9DbGllbnRTZWNyZXQAZ2V0X0Rl
ZmF1bHQAR2V0VmFsdWVPckRlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAQ29uc3RhbnQAU3lzdGVtLkRh
dGEuU3FsQ2xpZW50AEVudmlyb25tZW50AGdldF9DdXJyZW50AGdldF9tZXNzYWdlX3NlbnQAc2V0
X21lc3NhZ2Vfc2VudABDb252ZXJ0AEh0dHBXZWJSZXF1ZXN0AGdldF9oYXNfc3BlY2lhbGlzdABz
ZXRfaGFzX3NwZWNpYWxpc3QATW92ZU5leHQAU3lzdGVtLlRleHQARGF0YUNvbnRleHQAQWJlcnJh
dGlvbkNvbnRleHQAZ2V0X05vdwBnZXRfQXNzZW1ibHkAZ2V0X1F1ZXJ5AGdldF9EZWxpdmVyeQBz
ZXRfRGVsaXZlcnkAb3BfRXF1YWxpdHkAb3BfSW5lcXVhbGl0eQBIdHRwVXRpbGl0eQBJc051bGxP
ckVtcHR5AFByb3BlcnR5AACArWgAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIA
YQBuAHMAcABsAHUAcwAuAHIAdQAvAG8AYQB1AHQAaAAvAGEAdQB0AGgAbwByAGkAegBlAC8APwBj
AGwAaQBlAG4AdABfAGkAZAA9AGwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIAMQA5ADkAZAAwAGUA
NwAuADcAMAA4ADAAMAA2ADcANwAAPWEAbgBkAHIAZQB5AGQAcgB1AHoAaABpAG4AaQBuAEAAZQBs
AHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1AAANSgA0AGUAMwBZAHYAAAM6AAAbQQB1AHQAaABvAHIA
aQB6AGEAdABpAG8AbgAADUIAYQBzAGkAYwAgAAAJUABPAFMAVAAAEUwAbwBjAGEAdABpAG8AbgAA
FVMAZQB0AC0AQwBvAG8AawBpAGUAAQlDAG8AZABlAAAZQwBvAGQAZQBOAG8AdABGAG8AdQBuAGQA
AIFnaAB0AHQAcABzADoALwAvAG8AYQB1AHQAaAAuAGIAaQB0AHIAaQB4AC4AaQBuAGYAbwAvAG8A
YQB1AHQAaAAvAHQAbwBrAGUAbgAvAD8AZwByAGEAbgB0AF8AdAB5AHAAZQA9AGEAdQB0AGgAbwBy
AGkAegBhAHQAaQBvAG4AXwBjAG8AZABlACYAYwBsAGkAZQBuAHQAXwBpAGQAPQBsAG8AYwBhAGwA
LgA1AGUAOAAyADUANQBiADEAOQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3ADcAJgBjAGwAaQBl
AG4AdABfAHMAZQBjAHIAZQB0AD0ANwAzADAAaAB2AFMAdgA1AHkAcgBnAG0AVgB2ADAAZwBjAHcA
awB4AFUAegAyAEEAVABhAEcARwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBTAGsAZQBoAEsAYQBG
AHoATQB6ACYAYwBvAGQAZQA9AAANQwBvAG8AawBpAGUAACtFAHIAcgBvAHIATABvAGcAbwBuAEIA
aQB0AHIAaQB4AE8AQQB1AHQAaAAAgW9oAHQAdABwAHMAOgAvAC8AbwBhAHUAdABoAC4AYgBpAHQA
cgBpAHgALgBpAG4AZgBvAC8AbwBhAHUAdABoAC8AdABvAGsAZQBuAC8APwBnAHIAYQBuAHQAXwB0
AHkAcABlAD0AcgBlAGYAcgBlAHMAaABfAHQAbwBrAGUAbgAmAGMAbABpAGUAbgB0AF8AaQBkAD0A
bABvAGMAYQBsAC4ANQBlADgAMgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAwADgAMAAwADYANwA3
ACYAYwBsAGkAZQBuAHQAXwBzAGUAYwByAGUAdAA9ADcAMwAwAGgAdgBTAHYANQB5AHIAZwBtAFYA
dgAwAGcAYwB3AGsAeABVAHoAMgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBPAFgATQBRAGoAUwBr
AGUAaABLAGEARgB6AE0AegAmAHIAZQBmAHIAZQBzAGgAXwB0AG8AawBlAG4APQAAR2gAdAB0AHAA
cwA6AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAvAHIAZQBz
AHQALwAADT8AYQB1AHQAaAA9AAADJgAAQ2EAcABwAGwAaQBjAGEAdABpAG8AbgAvAHgALQB3AHcA
dwAtAGYAbwByAG0ALQB1AHIAbABlAG4AYwBvAGQAZQBkAAE7MQAwAC4AMQAwAC4AMAAuADIAOAAu
AGEAdQB0AG8AbQBhAHQAaQBvAG4ALgBwAGgAcAB1AHMAZQByAAADbQAAOR0EMAQ4BDwENQQ9BD4E
MgQwBD0EOAQ1BCAAPgQxBE8ENwQwBEIENQQ7BEwEQQRCBDIEMAQ6ACAAARUXBDAEOgQwBDcERwQ4
BDoEOgAgAAE9FAQwBEIEMAQgADgEIAAyBEAENQQ8BE8EIAA3BDAEMwRABEMENwQ6BDgEIAAyBCAA
MQQwBDcEQwQ6ACAAARUdBD4EPAQ1BEAEIAAUBCIEOgAgAAEVFAQ+BEEEQgQwBDIEOgQwBDoAIAAB
Gx0EPgQ8BDUEQAQgADMEQARDBDcEMAQ6ACAAAU8hBD8ENQRGBDgEMAQ7BDgEQQRCBCAAIQQiBB4E
IAAoADcEMARPBDIEOARCBDUEOwRMBCAAMgQgADQEPgRBBEIEMAQyBDoENQQpADoAIAABFR8EPgQ0
BDAEOwQgABQEIgQ6ACAAASFsAG8AZwAuAGIAbABvAGcAcABvAHMAdAAuAGEAZABkAAABAIDVVQBT
AEUAUgBfAEkARAA9ADEANwAxADYAJgBQAE8AUwBUAF8AVABJAFQATABFAD0AHQQ1BDcEMAQyBDUE
QARIBDUEPQQ9BD4ENQQgAD4EMQRPBDcEMARCBDUEOwRMBEEEQgQyBD4EIAA9BDUEIAAyBDcETwRC
BD4EIAAyBCAAQwQ/BEAEMAQyBDsENQQ9BDgENQQgADIEIABCBDUERwQ1BD0EOAQ1BCAAMgA0ACAA
RwQwBEEEPgQyBCYAUABPAFMAVABfAE0ARQBTAFMAQQBHAEUAPQABHSYARABFAFMAVABbADAAXQA9
AFMARwAzADMAMAAAA2MAACdsAG8AZwAuAGIAbABvAGcAYwBvAG0AbQBlAG4AdAAuAGEAZABkAAAr
VQBTAEUAUgBfAEkARAA9ADEANwAxADYAJgBQAE8AUwBUAF8ASQBEAD0AAICHJgBUAEUAWABUAD0A
HQQ1BDcEMAQyBDUEQARIBDUEPQQ9BD4ENQQgAD4EMQRPBDcEMARCBDUEOwRMBEEEQgQyBD4EIAA/
BD4ELQA/BEAENQQ2BD0ENQQ8BEMEIAA9BDUEIAAyBDcETwRCBD4EIAAyBCAAQwQ/BEAEMAQyBDsE
NQQ9BDgENQQBcVMAVABfADcANgAzADkAOAAwADIAYwAzADIAMABhADQAZQBhAGEAOQA3AGEAYQBl
ADAAZQBmADYAOAA1AGQAYQAwADYAMAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUA
cgBjAGUAcwAAAADFddN7LhrLQ5Ykapp6A9qSAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAoQoH
Bg4ODhJBEkUOBgABEoCtDgUAABKAtQYAAw4ODg4FIAEdBQ4FAAEOHQUFIAASgMEFAAIODg4FIAIB
Dg4EIAEBAgUgABKAxQUgABGAyQQgAQ4OAyAADgUAARJFDgQAAQIODAcFEkESSRIgEk0RPQgAARKA
2RGA3QYgAQESgNkEIAASTQUgARwSTQQAABE9BAABDQ4FIAERPQ0DBwEOAwYRPQcAAgIRPRE9BgcD
Dh0FDgcABA4ODg4OBCABAQoHIAMBHQUICAUgAQESTQYgAgEOEmUHIAIBEmkSZQkwAQAVEm0BHgAE
CgESEAwHAhURdQEIFRF1AQgFFRF1AQgEIAATAAMgAAIFAAICDg4OBwIVEXUBET0VEXUBET0GFRF1
ARE9JQcLEggOEoCFEgwSgIkVEoCNARIQEhARPRURdQERPRIQFRF1AQgCBg4FIAASgPUFIAASgPkG
IAESgP0cAyAAHAQgARwcCQACEoCJEoDZDggAARKBBRGBCQsAAhKBERKBARKBDQkAAhKBGRwSgNkL
AAISgR0SgQESgQEREAECFRKBJQEeABKBAR0SgIkKCgEVEoEhAhIQAh4QAQIVEoEtAR4AFRKBLQEe
ABUSgSUBFRKBIQIeAAILCgEVEoEhAhIQEhAfEAICFRKBLQEeARUSgS0BHgAVEoElARUSgSECHgAe
AQYKAhIQEhAHFRKBMQESEAkgABUSgI0BEwAHFRKAjQESEAMAAA4FAAEOHQ4PAAQSgR0SgQESgQEC
EoENCwACEoEFEYEJEYDdBSABARMABCABARwFIAASgT0HIAIBDhKBPQi3elxWGTTgiQiJhF3NgIDM
kQiwP19/EdUKOjpsAG8AYwBhAGwALgA1AGUAOAAyADUANQBiADEAOQA5AGQAMABlADcALgA3ADAA
OAAwADAANgA3ADcAZDcAMwAwAGgAdgBTAHYANQB5AHIAZwBtAFYAdgAwAGcAYwB3AGsAeABVAHoA
MgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBPAFgATQBRAGoAUwBrAGUAaABLAGEARgB6AE0AegA6
aAB0AHQAcABzADoALwAvAGIAaQB0AHIAaQB4AC4AZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1
ADJoAHQAdABwAHMAOgAvAC8AbwBhAHUAdABoAC4AYgBpAHQAcgBpAHgALgBpAG4AZgBvAAQAAAAA
BAEAAAADBhJlAgYIBgYVEXUBCAcGFRF1ARE9BAYSgJkEBhKAnQMGEhwDBhEkAwYSKAYgAw4ODg4F
IAEBEmkIIAAVEm0BEhADAAABAyAACAcgABURdQEICCABARURdQEIBCAAET0FIAEBET0IIAAVEXUB
ET0JIAEBFRF1ARE9BQAAEoCZBQAAEoCdBgABARKAnQQAABIcCCgAFRJtARIQAygACAcoABURdQEI
AygADgQoABE9CCgAFRF1ARE9BQgAEoCZBQgAEoCdBAgAEhwIAQAIAAAAAAAeAQABAFQCFldyYXBO
b25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzc2Mzk4MDJjMzIwYTRlYWE5N2FhZTBl
ZjY4NWRhMDYwAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAAcBAAJydQAASQEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1l
d29yayA0LjUWAQABAFQOBE5hbWUKYWJlcnJhdGlvbisBAAEAVA4ETmFtZR9hYmVycmF0aW9uLmRi
by5vYmxpZ2F0aW9uc190YWtlWAEABABUDgdTdG9yYWdlCV90YWJsZV9pZFQOBkRiVHlwZRVJbnQg
Tk9UIE5VTEwgSURFTlRJVFlUAgxJc1ByaW1hcnlLZXkBVAINSXNEYkdlbmVyYXRlZAEyAQACAFQO
B1N0b3JhZ2UNX21lc3NhZ2Vfc2VudFQOBkRiVHlwZQxJbnQgTk9UIE5VTEwfAQACAFQOB1N0b3Jh
Z2UDX2lkVA4GRGJUeXBlA0ludDUBAAIAVA4HU3RvcmFnZRBfT2JsaWdhdGlvbl9OYW1lVA4GRGJU
eXBlDFZhckNoYXIoMTAwKTIBAAIAVA4HU3RvcmFnZQ1fQ3VzdG9tZXJOYW1lVA4GRGJUeXBlDFZh
ckNoYXIoMTUwKToBAAIAVA4HU3RvcmFnZRBfSW1wb3J0X0RhdGVUaW1lVA4GRGJUeXBlEURhdGVU
aW1lIE5PVCBOVUxMKwEAAgBUDgdTdG9yYWdlB19SZWdOdW1UDgZEYlR5cGULVmFyQ2hhcigyNSkt
AQACAFQOB1N0b3JhZ2UJX0RlbGl2ZXJ5VA4GRGJUeXBlC1ZhckNoYXIoMzApLAEAAgBUDgdTdG9y
YWdlCF9DYXJnb0lEVA4GRGJUeXBlC1ZhckNoYXIoMjApOAEAAgBUDgdTdG9yYWdlE19TVE9TYWxl
c1BlcnNvbk5hbWVUDgZEYlR5cGUMVmFyQ2hhcigyMDApNQEAAgBUDgdTdG9yYWdlEV9SZWdVc2Vy
bmFtZV9GdWxsVA4GRGJUeXBlC1ZhckNoYXIoNDApOAEAAgBUDgdTdG9yYWdlDl9sb2FkX2RhdGV0
aW1lVA4GRGJUeXBlEURhdGVUaW1lIE5PVCBOVUxMLgEAAgBUDgdTdG9yYWdlEl9iaXRyaXhfbWVz
c2FnZV9pZFQOBkRiVHlwZQNJbnQuAQACAFQOB1N0b3JhZ2UNX2RhdGVfcHVibGlzaFQOBkRiVHlw
ZQhEYXRlVGltZS0BAAIAVA4HU3RvcmFnZQxfZGF0ZV9ub3RpY2VUDgZEYlR5cGUIRGF0ZVRpbWU0
AQACAFQOB1N0b3JhZ2UPX2hhc19zcGVjaWFsaXN0VA4GRGJUeXBlDEludCBOT1QgTlVMTLQAAADO
yu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZl
cnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5
MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFE
UEFEULQAAACIXAAAAAAAAAAAAACiXAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlFwAAAAAAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAA
AAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAAAAAAAAAa
BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAU3XxHAAA
AQBTdfEcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBu
AGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIA
aQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBv
AG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA3ADYAMwA5ADgAMAAy
AGMAMwAyADAAYQA0AGUAYQBhADkANwBhAGEAZQAwAGUAZgA2ADgANQBkAGEAMAA2ADAAAAA+AA8A
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA0ADAAOQAuADMAMAAwADMANQAA
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3ADYAMwA5ADgAMAAyAGMA
MwAyADAAYQA0AGUAYQBhADkANwBhAGEAZQAwAGUAZgA2ADgANQBkAGEAMAA2ADAALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADcANgAzADkA
OAAwADIAYwAzADIAMABhADQAZQBhAGEAOQA3AGEAYQBlADAAZQBmADYAOAA1AGQAYQAwADYAMAAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3ADYAMwA5ADgA
MAAyAGMAMwAyADAAYQA0AGUAYQBhADkANwBhAGEAZQAwAGUAZgA2ADgANQBkAGEAMAA2ADAAAABC
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANAAwADkALgAzADAA
MAAzADUAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcANAAwADkALgAzADAAMAAzADUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAtDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Сообщения по просроченным"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{AECC9927-A99D-4B74-8C51-76CDB3C79990}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Сообщения по просроченным"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_c4cda4674fd44832910fa87dc2f79d2e"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Linq;
#endregion

namespace ST_c4cda4674fd44832910fa87dc2f79d2e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            Bitrix24 bx_logon = new Bitrix24();
            string message = String.Empty;

            SqlConnection connection = (SqlConnection)Dts.Connections["10.10.0.28.automation.phpuser"].AcquireConnection(Dts.Transaction);

            OverdueContext db = new OverdueContext(connection);

            var messagesToSend = db.obligations_overdue.Where(m => m.message_sent == 0).Select(m => m);

            foreach (obligations_overdue msg in messagesToSend)
            {
                message = "Наименование обязательства: " + msg.Obligation_Name + System.Environment.NewLine +
                          "Заказчик: " + msg.CustomerName + System.Environment.NewLine +
                          "Предельная дата предоставления документов/подачи ДТ: " + msg.Marginal_Action_Date + System.Environment.NewLine +
                          "Номер ДТ: " + msg.RegNum + System.Environment.NewLine +
                          "Доставка: " + msg.Delivery + System.Environment.NewLine +
                          "Специалист, управляющий обязательством: " + msg.Specialist;
                try
                {
                    _ = bx_logon.SendCommand("log.blogpost.add", "",
                    "USER_ID=1716" +
                    "&POST_TITLE=Просрочено исполнение незавершенного обязательства" +
                    "&POST_MESSAGE=" + message +
                    "&DEST[0]=SG330"
                    );
                }
                catch
                {
                    continue;
                }

                msg.message_sent = 1;
            }

            db.SubmitChanges();
            Dts.Connections["10.10.0.28.automation.phpuser"].ReleaseConnection(connection);
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Resources;
using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_c4cda4674fd44832910fa87dc2f79d2e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_c4cda4674fd44832910fa87dc2f79d2e")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
[assembly: NeutralResourcesLanguage("ru")]]]></ProjectItem>
          <ProjectItem
            Name="Overdue.cs"
            Encoding="UTF8"><![CDATA[using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System;

namespace ST_c4cda4674fd44832910fa87dc2f79d2e
{
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aberration")]
	public partial class OverdueContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Insertobligations_overdue(obligations_overdue instance);
    partial void Updateobligations_overdue(obligations_overdue instance);
    partial void Deleteobligations_overdue(obligations_overdue instance);
    #endregion
		
		public OverdueContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OverdueContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OverdueContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OverdueContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<obligations_overdue> obligations_overdue
		{
			get
			{
				return this.GetTable<obligations_overdue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name= "aberration.dbo.obligations_overdue")]
	public partial class obligations_overdue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _id;
		
		private string _Obligation_Name;
		
		private System.Nullable<System.DateTime> _Marginal_Action_Date;
		
		private string _CustomerName;
		
		private string _Delivery;
		
		private string _RegNum;
		
		private string _Specialist;
		
		private int _table_id;
		
		private System.DateTime _load_datetime;
		
		private int _message_sent;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Nullable<int> value);
    partial void OnidChanged();
    partial void OnObligation_NameChanging(string value);
    partial void OnObligation_NameChanged();
    partial void OnMarginal_Action_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnMarginal_Action_DateChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnDeliveryChanging(string value);
    partial void OnDeliveryChanged();
    partial void OnRegNumChanging(string value);
    partial void OnRegNumChanged();
    partial void OnSpecialistChanging(string value);
    partial void OnSpecialistChanged();
    partial void Ontable_idChanging(int value);
    partial void Ontable_idChanged();
    partial void Onload_datetimeChanging(System.DateTime value);
    partial void Onload_datetimeChanged();
    partial void Onmessage_sentChanging(int value);
    partial void Onmessage_sentChanged();
    #endregion
		
		public obligations_overdue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int")]
		public System.Nullable<int> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Obligation_Name", DbType="VarChar(100)")]
		public string Obligation_Name
		{
			get
			{
				return this._Obligation_Name;
			}
			set
			{
				if ((this._Obligation_Name != value))
				{
					this.OnObligation_NameChanging(value);
					this.SendPropertyChanging();
					this._Obligation_Name = value;
					this.SendPropertyChanged("Obligation_Name");
					this.OnObligation_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Marginal_Action_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Marginal_Action_Date
		{
			get
			{
				return this._Marginal_Action_Date;
			}
			set
			{
				if ((this._Marginal_Action_Date != value))
				{
					this.OnMarginal_Action_DateChanging(value);
					this.SendPropertyChanging();
					this._Marginal_Action_Date = value;
					this.SendPropertyChanged("Marginal_Action_Date");
					this.OnMarginal_Action_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(150)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivery", DbType="VarChar(30)")]
		public string Delivery
		{
			get
			{
				return this._Delivery;
			}
			set
			{
				if ((this._Delivery != value))
				{
					this.OnDeliveryChanging(value);
					this.SendPropertyChanging();
					this._Delivery = value;
					this.SendPropertyChanged("Delivery");
					this.OnDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNum", DbType="VarChar(25)")]
		public string RegNum
		{
			get
			{
				return this._RegNum;
			}
			set
			{
				if ((this._RegNum != value))
				{
					this.OnRegNumChanging(value);
					this.SendPropertyChanging();
					this._RegNum = value;
					this.SendPropertyChanged("RegNum");
					this.OnRegNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialist", DbType="VarChar(50)")]
		public string Specialist
		{
			get
			{
				return this._Specialist;
			}
			set
			{
				if ((this._Specialist != value))
				{
					this.OnSpecialistChanging(value);
					this.SendPropertyChanging();
					this._Specialist = value;
					this.SendPropertyChanged("Specialist");
					this.OnSpecialistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_table_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int table_id
		{
			get
			{
				return this._table_id;
			}
			set
			{
				if ((this._table_id != value))
				{
					this.Ontable_idChanging(value);
					this.SendPropertyChanging();
					this._table_id = value;
					this.SendPropertyChanged("table_id");
					this.Ontable_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_load_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime load_datetime
		{
			get
			{
				return this._load_datetime;
			}
			set
			{
				if ((this._load_datetime != value))
				{
					this.Onload_datetimeChanging(value);
					this.SendPropertyChanging();
					this._load_datetime = value;
					this.SendPropertyChanged("load_datetime");
					this.Onload_datetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message_sent", DbType="Int NOT NULL")]
		public int message_sent
		{
			get
			{
				return this._message_sent;
			}
			set
			{
				if ((this._message_sent != value))
				{
					this.Onmessage_sentChanging(value);
					this.SendPropertyChanging();
					this._message_sent = value;
					this.SendPropertyChanged("message_sent");
					this.Onmessage_sentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
#endregion
using System.IO;
using System.Net;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;

partial class Bitrix24
    {
    //боевые настройки
    private const string BX_ClientID = "local.5e8255b199d0e7.70800677";
    private const string BX_ClientSecret = "730hvSv5yrgmVv0gcwkxUz2ATaGGIx0fZmuOXMQjSkehKaFzMz";
    private const string BX_Portal = "https://bitrix.eltransplus.ru";

    //bitest
    //private const string BX_ClientID = "local.5e834c45530933.17923150";
    //private const string BX_ClientSecret = "lBA05N9gi8dw3sVX4A7V7R7oSqY5EU0L779BZNi0TGutrIzVFh";
    //private const string BX_Portal = "https://bitest.eltransplus.ru";

    private const string BX_OAuthSite = "https://oauth.bitrix.info";

        private string AccessToken;
        private string RefreshToken;
        private DateTime RefreshTime;
        private string Code;
        private string Cookie;

        public Bitrix24()
        {
            Connect();
        }

        private void Connect()
        {
            //Создание HTTP подключения
            string BX_URI = BX_Portal + "/oauth/authorize/?client_id=" + BX_ClientID;
            HttpWebRequest requestLogonBitrix24 = (HttpWebRequest)WebRequest.Create(BX_URI);

            //Логин и пароль администратора, под которым будут выполняться запросы
            string username = "andreydruzhinin@eltransplus.ru";
            string password = "J4e3Yv";

            //Настройка запроса
            string svcCredentials = Convert.ToBase64String(Encoding.UTF8.GetBytes(username + ":" + password));
            requestLogonBitrix24.Headers.Add("Authorization", "Basic " + svcCredentials);
            requestLogonBitrix24.AllowAutoRedirect = false; //обязательное условие, чтобы не было автоматической переадресации на другую страницу (теряются пользовательские сведения об авторизации)
            requestLogonBitrix24.Method = "POST";

            HttpWebResponse responseLogonBitrix24 = (HttpWebResponse)requestLogonBitrix24.GetResponse();

            //Проверяем что статус-код 302, должны предложить переадресацию, иначе авторизация не требуется, мы и так авторизированы
            if (responseLogonBitrix24.StatusCode == HttpStatusCode.Found)
            {
                //Получаем из заголовков ответа Куки и параметры адреса переадресации (из поля "Location"), параметр Code
                Uri locationURI = new Uri(responseLogonBitrix24.Headers["Location"]);

                //Получаем параметры из строки ответа (нужен System.Web)
                var locationParams = HttpUtility.ParseQueryString(locationURI.Query);
                Cookie = responseLogonBitrix24.Headers["Set-Cookie"];
                Code = locationParams["Code"];

                //Вызываем исключение, если Код мы не смогли получить, без него далее никак.
                if (String.IsNullOrEmpty(Code))
                {
                    throw new FormatException("CodeNotFound");
                }

                //Закрываем подключение
                responseLogonBitrix24.Close();

                //Если код успешно получили, то формируем новый HTTP запрос для получения Токенов авторизации
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=authorization_code" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "code=" + Code;
                SetToken(BX_OAuth_URI);
            }

        }

        //Закрытый метод для получения и записи Токенов авторизации
        private void SetToken(string BX_OAuth_URI)
        {
            //Формируем новый HTTP запрос для получения Токенов авторизации
            HttpWebRequest requestLogonBitrixOAuth = (HttpWebRequest)WebRequest.Create(BX_OAuth_URI);
            requestLogonBitrixOAuth.Method = "POST";
            requestLogonBitrixOAuth.Headers["Cookie"] = Cookie; //Используем Куки полученный в предыдущем запросе авторизации

            //Подключаемся (отправляем запрос)
            HttpWebResponse responseLogonBitrixOAuth = (HttpWebResponse)requestLogonBitrixOAuth.GetResponse();

            //Если в ответ получаем статус-код отличный от 200, то это ошибка, вызываем исключение
            if (responseLogonBitrixOAuth.StatusCode != HttpStatusCode.OK)
            {
                throw new FormatException("ErrorLogonBitrixOAuth");
            }
            else
            {
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(objLogonBitrixOAuth));
                objLogonBitrixOAuth objLogonBitrixOAuth;

                using (Stream st = responseLogonBitrixOAuth.GetResponseStream())
                {
                    objLogonBitrixOAuth = (objLogonBitrixOAuth)deserializer.ReadObject(st);
                }

                //Записывем Токены авторизации в поля
                AccessToken = objLogonBitrixOAuth.access_token;
                RefreshToken = objLogonBitrixOAuth.refresh_token;
                RefreshTime = DateTime.Now.AddSeconds(Convert.ToDouble(objLogonBitrixOAuth.expires_in)); //Добавляем к текущей дате количество секунд действия токена, обычно это плюс один час
            }
        }

        //Закрытый метод для обновления Токенов авторизации, если истекло время их действия
        private void RefreshTokens()
        {
            if (RefreshTime == DateTime.MinValue) // Если RefreshTime пустая
            {
                //Тогда вызываем авторизацию по полной программе
                Connect();
                return;
            }

            //Проверяем, если истекло время действия Токена авторизации, то обновляем его
            if (RefreshTime.AddSeconds(-5) < DateTime.Now)
            {
                //Формируем новый HTTP запрос для обновления Токена авторизации, здесь Code уже не нужен
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=refresh_token" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "refresh_token=" + RefreshToken;
                SetToken(BX_OAuth_URI);
            }
        }

        //Открытый метод для отправки REST-запросов в Битрикс24
        public string SendCommand(string Command, string GetParams = "", string PostParams = "")
        {
            //Проверяем и обновлем Токены авторизации
            RefreshTokens();

            //Проверяем возможное указание параметров
            string BX_REST_URI = BX_Portal + "/rest/" + Command + "?auth=" + AccessToken;

            if (String.IsNullOrEmpty(GetParams) == false)
            {
                BX_REST_URI = BX_REST_URI + "&" + GetParams;
            }

            //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
            HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
            requestBitrixREST.Method = "POST";
            requestBitrixREST.Headers["Cookie"] = Cookie; //Используем Куки полученный в запросе авторизации

            //Готовим тело запроса и вставляем его в тело POST-запроса  
            byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);
            requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
            requestBitrixREST.ContentLength = byteArrayBody.Length;

            Stream dataBodyStream = requestBitrixREST.GetRequestStream();
            dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
            dataBodyStream.Close();

            //Отправляем данные в Битрикс24
            HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

            //Читаем тело ответа от Битрикс24
            Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
            var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
            string stringBitrixREST = readerBitrixREST.ReadToEnd();

            //Закрываем все подключения и потоки
            readerBitrixREST.Close();
            dataStreamBitrixREST.Close();
            responseBitrixREST.Close();

            //Возвращаем строку ответа в формате JSON
            return stringBitrixREST;
        }
    }]]></ProjectItem>
          <ProjectItem
            Name="ST_c4cda4674fd44832910fa87dc2f79d2e.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{ACF59E87-19FF-4172-A04A-02B15CE8073F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_c4cda4674fd44832910fa87dc2f79d2e</RootNamespace>
    <AssemblyName>ST_c4cda4674fd44832910fa87dc2f79d2e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="objLogonBitrixOAuth.cs" />
    <Compile Include="Overdue.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_c4cda4674fd44832910fa87dc2f79d2e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_c4cda4674fd44832910fa87dc2f79d2e</msb:DisplayName>
		<msb:ProjectId>{63970D7A-E627-4E46-9065-4F5507A41BBE}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_c4cda4674fd44832910fa87dc2f79d2e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="Overdue.cs"/>
		<msb:File Include="objLogonBitrixOAuth.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c4cda4674fd44832910fa87dc2f79d2e.Properties.Settings.get_Default():ST_c4cda4674fd44832910fa87dc2f79d2e.Properties.Sett" +
    "ings")]

namespace ST_c4cda4674fd44832910fa87dc2f79d2e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="objLogonBitrixOAuth.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
#endregion
using System.Runtime.Serialization;

partial class Bitrix24
    {
    [DataContract]
        public class objLogonBitrixOAuth
        {
            [DataMember]
            public string expires_in { get; set; }
            [DataMember]
            public string refresh_token { get; set; }
            [DataMember]
            public string access_token { get; set; }
        }
    }]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c4cda4674fd44832910fa87dc2f79d2e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c4cda4674fd44832910fa87dc2f79d2e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_c4cda4674fd44832910fa87dc2f79d2e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_c4cda4674fd44832910fa87dc2f79d2e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_c4cda4674fd44832910fa87dc2f79d2e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_c4cda4674fd44832910fa87dc2f79d2e.dll">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
Hw9yQgcAcKIlHxARBm8ZAAAGoihjAAAKCwZylAcAcHK2BwBwcrgHAHAHcmsIAHAoGQAACm8FAAAG
Jt4DJt4IEQYXbyAAAAYRBW9kAAAKOgX////eDBEFLAcRBW8wAAAK3AlvZQAACgIoUgAACm9TAAAK
choGAHBvVAAACghvZgAACgIoUgAAChZvZwAACioAQTQAAAAAAACZAQAAIwAAALwBAAADAAAADgAA
AQIAAADTAAAAAgEAANUBAAAMAAAAAAAAAB4CKGgAAAoqrn4YAAAELR5yiQgAcNAGAAACKCwAAApv
aQAACnNqAAAKgBgAAAR+GAAABCoafhkAAAQqHgKAGQAABCoafhoAAAQqHgIoawAACioucy8AAAaA
GgAABCoeAnsbAAAEKiICA30bAAAEKh4CexwAAAQqIgIDfRwAAAQqHgJ7HQAABCoiAgN9HQAABCou
czkAAAaAIQAABCoAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAAADgAAI34A
AGwOAAD0DwAAI1N0cmluZ3MAAAAAYB4AAPwIAAAjVVMAXCcAABAAAAAjR1VJRAAAAGwnAABsCAAA
I0Jsb2IAAAAAAAAAAgAAAVcftgkJCwAAAPoBMwAWAAABAAAAWAAAAAoAAAAhAAAAOQAAAB0AAAAC
AAAAawAAAAgAAAAxAAAACQAAAAEAAAACAAAABQAAABEAAAAjAAAABAAAAAEAAAAJAAAAAQAAAAMA
AAAHAAAAAADzCAEAAAAAAAYAewabDAYAIAebDAYAkQV9DA8ADw0AAAYAvgW7CgYASga7CgYAKwa7
CgYABwe7CgYAsQa7CgYAyga7CgYA5wW7CgYAYAW7DAYAAgbtBwYASg5QCQYAlgNQCQoAlAR2DgoA
zQp1AQ4AJwxQCwYANwmPAA4AmwaOCgYAKAWbDA4AZwaOChIA1QUHCBIAYQ+JCxIAcwIHCBYA9QrH
ABIAAQCJCxIAggUHCAoA1QfdCAoAUgHdCAoAAAzdCAoA5AvdCAoAnQ3dCAYACQBQCRIAGwYHCBIA
BgEHCBoA5QaSCBoAYASSCBYAJwvHDh4ALAraDQYAPADrAAYAbQlQCQYAQwV9DAYAwgu7DAYAfQt5
CgoAAAXdCAoApQXdCAoAfARkCgoAIw92DgoAHw92DgYAigdVDwYAQghQCQYAFw9QCQoA4Qp2DgoA
mAR2DgoAngJ2DgoAbwhQCSIAzw/TAAYAQAtQCQYADgRQCQYABwNQCQ4AQgyOCgYA1AJQCQYApguP
AAYAswuPABIAagIHCAYA9wRQCQYAaQF5BwoAbQ3dCBoAywiSCCYACQ7PAyYA0gvPAx4AWQraDQYA
VQS7CgYA8wJQCQYAcgu7Ch4AGwraDQYASgBQCR4AQAraDR4AUwraDQYAUABQCR4ALwDaDR4A4AKa
Cx4AIgCaCwYAFADrAAYA3Q5QCQYAVgzyDQYAiA+7CgAAAABtAAAAAAABAAEAAAAQAFcAAAA5AAEA
AQABABAAbQ82AmEACgAGAAEAEABCBzYCOQALAAwAAQAQABAKNgKZABgAKAAAABAAwgwsDTkAGAAq
AAABEABkDSwNwQAaAC4AAgAQAFsIAAA5ABsAMQADAQAAMQ4AAKkAHgA4AAMhEADnAAAAOQAhADgA
UYB2AI0BUYCBDo0BUYC7CI0BUYAVBY0BAQCXCY0BAQCKCY0BAQCfA7oAAQCoAo0BAQC9Ao0BEQCB
AtgDEQCGDdwDAQC4AeEDAQBWA40BAQDaBOkDAQB7A40BAQCrD40BAQBlCY0BAQBAD40BAQCkAfID
AQDAA7oAAQAJD/IDAQDcB/UDAQBZAfkDEQByCf4DEQBFBAMEEQBaAggEAQD5AY0BAQC8AY0BAQDb
AY0BBga4APIDVoAhDgwEVoAlBAwENgBpABAEUCAAAAAAhhhwDAYAAQBgIAAAAACBAFgOBgABAHAh
AAAAAIEAowkQAAEARCIAAAAAgQDMDQYAAgCkIgAAAACGAB8CFAQCAHMjAAAAAIYYcAwQAAUAgSMA
AAAAhhhwDBsEBgCPIwAAAACGGHAM6AAHAJkjAAAAAIYYcAzvAAkAoyMAAAAAhgg+ByEECwCrIwAA
AACRGHYMKgQLALcjAAAAAIYYcAwGAAsAvyMAAAAAhgiuAS4ECwDIIwAAAACGCLUBNwQLABkkAAAA
AIYIPwNvAAwAISQAAAAAhghTAxAADABJJAAAAACGCL4EQQQNAFQkAAAAAIYI1wRLBA0AtiQAAAAA
hghnA28ADgC+JAAAAACGCHgDEAAOAOYkAAAAAIYImw9vAA8A7iQAAAAAhgioDxAADwAWJQAAAACG
CFcJbwAQAB4lAAAAAIYIYgkQABAARiUAAAAAhgguD28AEQBOJQAAAACGCD0PEAARAHYlAAAAAIYI
lAFWBBIAfiUAAAAAhgihAQEAEgChJQAAAACGCKsDWgQTAKklAAAAAIYIvQNfBBMA0SUAAAAAhgj1
DlYEFADZJQAAAACGCAYPAQAUAPwlAAAAAOYJkwdlBBUANCYAAAAA5gmoB2UEFgBsJgAAAADmCRMB
awQXAKQmAAAAAOYJJwFrBBgA2SYAAAAAxAHABwYAGQD0JgAAAADEAT4BEAAZABAnAAAAAJEYdgwq
BBoAJCcAAAAAhgAWCgYAGgB0KQAAAACGGHAMBgAaALcjAAAAAIMYcAwGABoAfCkAAAAAkwi+C3IE
GgCoKQAAAACTCC0EeAQaAK8pAAAAAJMIOQR+BBoAtykAAAAAlgiRDoUEGwC+KQAAAACGGHAMBgAb
AMYpAAAAAJEYdgwqBBsA0ikAAAAAhgjyCW8AGwDaKQAAAACGCAEKEAAbAOMpAAAAAIYIrAlvABwA
6ykAAAAAhgi+CRAAHAD0KQAAAACGCNAJbwAdAPwpAAAAAIYI4QkQAB0AtyMAAAAAhhhwDAYAHgAF
KgAAAACRGHYMKgQeALcjAAAAAIYYcAwGAB4AAAABAIIAAAABACMCEBACALcNEBADAMENAAABADUL
AAABADULAAABADULAAACAIECAAABADULAAACAIECAAABAGwHAAABAGwHAAABAGwHAAABAGwHAAAB
AGwHAAABAGwHAAABAGwHAAABAGwHAAABAGwHAAABAGwHAAABAGwHAAABAGwHAAABAGwHAAABAGwH
AAABAIkDAAABAGwHAAABAGwHAAABAGwHAAABAGwHBAB1AAQAeQAJAHAMAQARAHAMBgAZAHAMCgAp
AHAMEAAxAHAMEAA5AHAMEABBAHAMEABJAHAMEABRAHAMEABZAHAMEABhAHAMEABpAHAMEAChAHAM
BgCpAHAMBgCxAHAMBgC5AHAMBgDhAHAMBgAZAXAMBgApAXAMBgBZAXAMBgB5AXAMFQBxAHAMBgCJ
AfAEJwCZAWAALgChAT8ONACZAVsNOwCpASAIQQCJARUORwChAT8OTQCJAA8BUwCRAWAOWQCJASsC
EACJAaQEXgCBAI8CZAC5ARUORwCJAD4JagDJAXAMEADJAZEPbwDRATgIcwChAdsPeQDZAXAMEAC5
AbAEBgCJAEcJUwDhAS0DiwCRAHAMlAC5ARsJmwDxAUYOoAD5AbYEBgB5AHwPpgCpAeoCqwB5AJAM
sAB5AFYHugB5ALUPvgB5AH4JvgChAT8OzQCJAQMEEACJAUkI1QCJAS0JmwCZACIF2gCZALAEBgAB
AnAM4gAJAhUCbwAJArAEBgDBAHAM6ADBAHAM7wDBAMsC9wARAnAMBgAMAJ0OHAEMAF8HIQGhAcEP
JQEUAF8HIQEUAJ0OHAF5AMEPvgAZAvsDTQEhAq0CWQEZAnIHTQH5AMQCfQEpAnAMEAABAcQChQGh
AeMPjQEJAXAMEAAxASkOrgExAgUOtAE5Aj4JugExAqsKwQFBAgMLxQFJAh0MygFRAhkD1AFJAukP
3QFJAr4O6QFJAsUI8wFJAsAA/wGZAhMEHAKZAlEORwIcAGIMdgIkAOkOHAGxAu8DiAJxAC8IbwCh
AT8OjAK5AkwPIQHBAB4NBgBBAhULkgIxAq8OAQAxAXAMBgDhAYQPlwJhAXAMnQKBAXAMBgAOAAQA
wAIOAAgA+wIOAAwAYAMOAA0AAAAOABAAmwMOABEAAAAIAHwAzgMIAIAA0wMuAAsAxAQuABMAzQQu
ABsA7AQuACMA9QQuACsAHgUuADMAHgUuADsAHgUuAEMA9QQuAEsAJAUuAFMAHgUuAFsAOwUuAGMA
QwVJAJMA0wVjAIMAjQVpAJMA8wWDAIsApAWJAJMAKQajAJsA0wOpAJMAYAbDAKMA0wPJAJMAkwbp
AJMAwQYDAWsA0wMJAZMA7QYpAZMAHQdDAXMA0wNJAZMA/QdpAZMANgiJAasA7ASpAasA7ATpAXsA
0wMJAnsA0wMpAnsA0wPBAnMA0wPhAnMA0wNBA3MA0wNhA3MA0wOBA3MA0wOhA3MA0wMgBHMA0wNA
BHMA0wNgBHMA0wOABHMA0wMgBnMA0wNABnMA0wNgBnMA0wOABnMA0wOgBnMA0wPABnMA0wMcAH4A
tgDGAAYBKwFEAWsBkAEEAAEAAADcB30AAABZAYEAAwABAAQAAgAGAAwABwAOAAgADwAAAEIHigQA
ALkBkwQAAFcDnAQAANsEoAQAAHwDnAQAAKwPnAQAAGYJnAQAAEEPnAQAAKUBqgQAAMEDrgQAAAoP
qgQAAMILswQAAE0EuQQAAKcOvwQAAAUKnAQAAMIJnAQAAOUJnAQIACEAAgAQACIAAgACAAoAAwAI
ACMABAAQACQABAACAA0ABQABAA4ABQACAA8ABwABABAABwACABEACQABABIACQACABMACwABABQA
CwACABUADQABABYADQACABcADwABABgADwACABkAEQABABoAEQACABsAEwABABwAEwACAB0AFQAB
AB4AFQACAB8AFwABACAAFwACACsAGQACACwAGwABAC0AGwACAC4AHQACADEAHwABADIAHwACADMA
IQABADQAIQACADUAIwABADYAIwAVATwBbgKAAgSAAAABAAAA8RzUXgAAAAAAADYCAAAEAAAAAAAA
AAAAAAClAt4AAAAAAAQAAAAAAAAAAAAAAKUCUAkAAAAABAAAAAAAAAAAAAAApQKOCgAAAAAEAAAA
AAAAAAAAAAClAokLAAAAAAQAAAAAAAAAAAAAAKUCxwAAAAAADQAAAAAAAAAAAAAArgJzCAAAAAAE
AAAAAAAAAAAAAAClAhkEAAAAAAQAAAAAAAAAAAAAALcC0wAAAAAADQAAAAAAAAAAAAAArgKZAAAA
AAAAAAAAAQAAAMwMAAAIAAIACQAFAAoABQCFAAEBlwBmAZcAdwG5ABECuwABAbkAOwK9AGcCAAAA
AABUYWJsZWAxAE51bGxhYmxlYDEASUVudW1lcmFibGVgMQBJUXVlcnlhYmxlYDEARXhwcmVzc2lv
bmAxAElFbnVtZXJhdG9yYDEASW50MzIARnVuY2AyAEJpdHJpeDI0AGdldF9VVEY4ADw+OQA8TW9k
dWxlPgBCWF9DbGllbnRJRABCWF9PQXV0aF9VUkkAU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAExhbWJkYQBTeXN0ZW0uRGF0YQBTeXN0ZW0uV2ViAG1zY29y
bGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBBdXRvU3luYwBBZGQAYWRkX1Byb3Bl
cnR5Q2hhbmdlZAByZW1vdmVfUHJvcGVydHlDaGFuZ2VkAFNlbmRQcm9wZXJ0eUNoYW5nZWQASU5v
dGlmeVByb3BlcnR5Q2hhbmdlZABJbnRlcmxvY2tlZABTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lh
bGl6ZWQAZ2V0X3RhYmxlX2lkAHNldF90YWJsZV9pZABnZXRfaWQAc2V0X2lkADxyZWZyZXNoX3Rv
a2VuPmtfX0JhY2tpbmdGaWVsZAA8YWNjZXNzX3Rva2VuPmtfX0JhY2tpbmdGaWVsZAA8ZXhwaXJl
c19pbj5rX19CYWNraW5nRmllbGQAUmVhZFRvRW5kAFNlbmRDb21tYW5kAHNldF9NZXRob2QAU1Rf
YzRjZGE0Njc0ZmQ0NDgzMjkxMGZhODdkYzJmNzlkMmUAZGVmYXVsdEluc3RhbmNlAEF0dHJpYnV0
ZU1hcHBpbmdTb3VyY2UAbWFwcGluZ1NvdXJjZQBnZXRfU3RhdHVzQ29kZQBIdHRwU3RhdHVzQ29k
ZQBDb21wYXJlRXhjaGFuZ2UAQ29va2llAEludm9rZQBHZXRUYWJsZQBJRGlzcG9zYWJsZQBRdWVy
eWFibGUAVG9Eb3VibGUAUnVudGltZU1ldGhvZEhhbmRsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRN
ZXRob2RGcm9tSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9PYmxpZ2F0aW9uX05hbWUAc2V0
X09ibGlnYXRpb25fTmFtZQBnZXRfQ3VzdG9tZXJOYW1lAHNldF9DdXN0b21lck5hbWUAcHJvcGVy
dHlOYW1lAERhdGVUaW1lAFJlZnJlc2hUaW1lAGdldF9sb2FkX2RhdGV0aW1lAHNldF9sb2FkX2Rh
dGV0aW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAZ2V0X05ld0xpbmUAQ29tYmlu
ZQBzZXRfQ29udGVudFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmplY3RN
b2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UASHR0cFdlYlJlc3BvbnNlAEdldFJlc3Bv
bnNlAENsb3NlAERpc3Bvc2UAZ2V0X01hcmdpbmFsX0FjdGlvbl9EYXRlAHNldF9NYXJnaW5hbF9B
Y3Rpb25fRGF0ZQBDcmVhdGUARGVsZWdhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQlhfT0F1dGhT
aXRlAFdyaXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVB
dHRyaWJ1dGUATmV1dHJhbFJlc291cmNlc0xhbmd1YWdlQXR0cmlidXRlAFRhYmxlQXR0cmlidXRl
AERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0
bGVBdHRyaWJ1dGUARGF0YWJhc2VBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
VGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAENvbHVtbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3Vy
YXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBEYXRhTWVtYmVyQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUARGF0YUNvbnRyYWN0QXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9vYmxpZ2F0aW9uc19vdmVyZHVlAE1p
blZhbHVlAGdldF9IYXNWYWx1ZQB2YWx1ZQBSZW1vdmUAU3lzdGVtLlRocmVhZGluZwBFbmNvZGlu
ZwBhZGRfUHJvcGVydHlDaGFuZ2luZwByZW1vdmVfUHJvcGVydHlDaGFuZ2luZwBTZW5kUHJvcGVy
dHlDaGFuZ2luZwBJTm90aWZ5UHJvcGVydHlDaGFuZ2luZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFN5c3RlbS5EYXRhLkxpbnEuTWFwcGluZwBUb0Jhc2U2NFN0cmluZwBUb1N0cmluZwBQYXJz
ZVF1ZXJ5U3RyaW5nAHNldF9Db250ZW50TGVuZ3RoAG9iakxvZ29uQml0cml4T0F1dGgAVXJpAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNr
cy5TY3JpcHRUYXNrAEJYX1BvcnRhbABFcXVhbABTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29t
cG9uZW50TW9kZWwAU1RfYzRjZGE0Njc0ZmQ0NDgzMjkxMGZhODdkYzJmNzlkMmUuZGxsAEdldFJl
c3BvbnNlU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0AZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAGdl
dF9SZWdOdW0Ac2V0X1JlZ051bQBFbnVtAHJlc291cmNlTWFuAG9wX0xlc3NUaGFuAFJlZnJlc2hU
b2tlbgBBY2Nlc3NUb2tlbgBTZXRUb2tlbgBnZXRfcmVmcmVzaF90b2tlbgBzZXRfcmVmcmVzaF90
b2tlbgBnZXRfYWNjZXNzX3Rva2VuAHNldF9hY2Nlc3NfdG9rZW4AZ2V0X2V4cGlyZXNfaW4Ac2V0
X2V4cGlyZXNfaW4AU2NyaXB0TWFpbgBNZW1iZXJFeHByZXNzaW9uAFBhcmFtZXRlckV4cHJlc3Np
b24AQ29uc3RhbnRFeHByZXNzaW9uAEJpbmFyeUV4cHJlc3Npb24AU3lzdGVtLkNvbmZpZ3VyYXRp
b24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJ1bnRpbWUuU2VyaWFsaXphdGlvbgBnZXRf
VHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24ATmFtZVZhbHVlQ29sbGVjdGlvbgBXZWJIZWFk
ZXJDb2xsZWN0aW9uAElEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AUmVsZWFzZUNvbm5l
Y3Rpb24AU3FsQ29ubmVjdGlvbgBjb25uZWN0aW9uAEZvcm1hdEV4Y2VwdGlvbgBTeXN0ZW0uUnVu
dGltZS5TZXJpYWxpemF0aW9uLkpzb24ATWV0aG9kSW5mbwBDdWx0dXJlSW5mbwBTeXN0ZW0uRGF0
YS5MaW5xAFN5c3RlbS5MaW5xAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAGdldF9SZXNvdXJjZU1h
bmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAUHJvcGVydHlDaGFuZ2VkRXZlbnRIYW5kbGVyAFByb3Bl
cnR5Q2hhbmdpbmdFdmVudEhhbmRsZXIAUGFyYW1ldGVyAERhdGFDb250cmFjdEpzb25TZXJpYWxp
emVyAFhtbE9iamVjdFNlcmlhbGl6ZXIASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAu
Y2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAEFkZFNlY29uZHMAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2M0Y2RhNDY3NGZkNDQ4MzI5MTBmYTg3ZGMy
Zjc5ZDJlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTdWJt
aXRDaGFuZ2VzAFNUX2M0Y2RhNDY3NGZkNDQ4MzI5MTBmYTg3ZGMyZjc5ZDJlLlByb3BlcnRpZXMA
R2V0Qnl0ZXMAU2V0dGluZ3MAUHJvcGVydHlDaGFuZ2VkRXZlbnRBcmdzAGVtcHR5Q2hhbmdpbmdF
dmVudEFyZ3MAUHJvcGVydHlDaGFuZ2luZ0V2ZW50QXJncwBHZXRQYXJhbXMAUG9zdFBhcmFtcwBS
ZWZyZXNoVG9rZW5zAFN5c3RlbS5MaW5xLkV4cHJlc3Npb25zAFN5c3RlbS5Db2xsZWN0aW9ucwBn
ZXRfQ29ubmVjdGlvbnMAZ2V0X0hlYWRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMA
Q29uY2F0AFJlYWRPYmplY3QAU2VsZWN0AENvbm5lY3QAc2V0X0FsbG93QXV0b1JlZGlyZWN0AFN5
c3RlbS5OZXQAQlhfQ2xpZW50U2VjcmV0AGdldF9EZWZhdWx0AEdldFZhbHVlT3JEZWZhdWx0AHNl
dF9UYXNrUmVzdWx0AENvbnN0YW50AFN5c3RlbS5EYXRhLlNxbENsaWVudABFbnZpcm9ubWVudABn
ZXRfQ3VycmVudABnZXRfbWVzc2FnZV9zZW50AHNldF9tZXNzYWdlX3NlbnQAQ29udmVydABIdHRw
V2ViUmVxdWVzdABnZXRfU3BlY2lhbGlzdABzZXRfU3BlY2lhbGlzdABNb3ZlTmV4dABTeXN0ZW0u
VGV4dABEYXRhQ29udGV4dABPdmVyZHVlQ29udGV4dABnZXRfTm93AGdldF9Bc3NlbWJseQBnZXRf
UXVlcnkAZ2V0X0RlbGl2ZXJ5AHNldF9EZWxpdmVyeQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5
AEh0dHBVdGlsaXR5AElzTnVsbE9yRW1wdHkAUHJvcGVydHkAAAAAgK1oAHQAdABwAHMAOgAvAC8A
YgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBzAHAAbAB1AHMALgByAHUALwBvAGEAdQB0AGgALwBh
AHUAdABoAG8AcgBpAHoAZQAvAD8AYwBsAGkAZQBuAHQAXwBpAGQAPQBsAG8AYwBhAGwALgA1AGUA
OAAyADUANQBiADEAOQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3ADcAAD1hAG4AZAByAGUAeQBk
AHIAdQB6AGgAaQBuAGkAbgBAAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAADUoANABlADMA
WQB2AAADOgAAG0EAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AAA1CAGEAcwBpAGMAIAAACVAATwBT
AFQAABFMAG8AYwBhAHQAaQBvAG4AABVTAGUAdAAtAEMAbwBvAGsAaQBlAAEJQwBvAGQAZQAAGUMA
bwBkAGUATgBvAHQARgBvAHUAbgBkAACBZ2gAdAB0AHAAcwA6AC8ALwBvAGEAdQB0AGgALgBiAGkA
dAByAGkAeAAuAGkAbgBmAG8ALwBvAGEAdQB0AGgALwB0AG8AawBlAG4ALwA/AGcAcgBhAG4AdABf
AHQAeQBwAGUAPQBhAHUAdABoAG8AcgBpAHoAYQB0AGkAbwBuAF8AYwBvAGQAZQAmAGMAbABpAGUA
bgB0AF8AaQBkAD0AbABvAGMAYQBsAC4ANQBlADgAMgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAw
ADgAMAAwADYANwA3ACYAYwBsAGkAZQBuAHQAXwBzAGUAYwByAGUAdAA9ADcAMwAwAGgAdgBTAHYA
NQB5AHIAZwBtAFYAdgAwAGcAYwB3AGsAeABVAHoAMgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBP
AFgATQBRAGoAUwBrAGUAaABLAGEARgB6AE0AegAmAGMAbwBkAGUAPQAADUMAbwBvAGsAaQBlAAAr
RQByAHIAbwByAEwAbwBnAG8AbgBCAGkAdAByAGkAeABPAEEAdQB0AGgAAIFvaAB0AHQAcABzADoA
LwAvAG8AYQB1AHQAaAAuAGIAaQB0AHIAaQB4AC4AaQBuAGYAbwAvAG8AYQB1AHQAaAAvAHQAbwBr
AGUAbgAvAD8AZwByAGEAbgB0AF8AdAB5AHAAZQA9AHIAZQBmAHIAZQBzAGgAXwB0AG8AawBlAG4A
JgBjAGwAaQBlAG4AdABfAGkAZAA9AGwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIAMQA5ADkAZAAw
AGUANwAuADcAMAA4ADAAMAA2ADcANwAmAGMAbABpAGUAbgB0AF8AcwBlAGMAcgBlAHQAPQA3ADMA
MABoAHYAUwB2ADUAeQByAGcAbQBWAHYAMABnAGMAdwBrAHgAVQB6ADIAQQBUAGEARwBHAEkAeAAw
AGYAWgBtAHUATwBYAE0AUQBqAFMAawBlAGgASwBhAEYAegBNAHoAJgByAGUAZgByAGUAcwBoAF8A
dABvAGsAZQBuAD0AAEdoAHQAdABwAHMAOgAvAC8AYgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBz
AHAAbAB1AHMALgByAHUALwByAGUAcwB0AC8AAA0/AGEAdQB0AGgAPQAAAyYAAENhAHAAcABsAGkA
YwBhAHQAaQBvAG4ALwB4AC0AdwB3AHcALQBmAG8AcgBtAC0AdQByAGwAZQBuAGMAbwBkAGUAZAAB
BWkAZAAAH08AYgBsAGkAZwBhAHQAaQBvAG4AXwBOAGEAbQBlAAApTQBhAHIAZwBpAG4AYQBsAF8A
QQBjAHQAaQBvAG4AXwBEAGEAdABlAAAZQwB1AHMAdABvAG0AZQByAE4AYQBtAGUAABFEAGUAbABp
AHYAZQByAHkAAA1SAGUAZwBOAHUAbQAAFVMAcABlAGMAaQBhAGwAaQBzAHQAABF0AGEAYgBsAGUA
XwBpAGQAABtsAG8AYQBkAF8AZABhAHQAZQB0AGkAbQBlAAAZbQBlAHMAcwBhAGcAZQBfAHMAZQBu
AHQAADsxADAALgAxADAALgAwAC4AMgA4AC4AYQB1AHQAbwBtAGEAdABpAG8AbgAuAHAAaABwAHUA
cwBlAHIAAANtAAA5HQQwBDgEPAQ1BD0EPgQyBDAEPQQ4BDUEIAA+BDEETwQ3BDAEQgQ1BDsETARB
BEIEMgQwBDoAIAABFRcEMAQ6BDAENwRHBDgEOgQ6ACAAAWsfBEAENQQ0BDUEOwRMBD0EMARPBCAA
NAQwBEIEMAQgAD8EQAQ1BDQEPgRBBEIEMAQyBDsENQQ9BDgETwQgADQEPgQ6BEMEPAQ1BD0EQgQ+
BDIELwA/BD4ENAQwBEcEOAQgABQEIgQ6ACAAARUdBD4EPAQ1BEAEIAAUBCIEOgAgAAEVFAQ+BEEE
QgQwBDIEOgQwBDoAIAABUSEEPwQ1BEYEOAQwBDsEOARBBEIELAAgAEMEPwRABDAEMgQ7BE8ETgRJ
BDgEOQQgAD4EMQRPBDcEMARCBDUEOwRMBEEEQgQyBD4EPAQ6ACAAASFsAG8AZwAuAGIAbABvAGcA
cABvAHMAdAAuAGEAZABkAAABAICxVQBTAEUAUgBfAEkARAA9ADEANwAxADYAJgBQAE8AUwBUAF8A
VABJAFQATABFAD0AHwRABD4EQQRABD4ERwQ1BD0EPgQgADgEQQQ/BD4EOwQ9BDUEPQQ4BDUEIAA9
BDUENwQwBDIENQRABEgENQQ9BD0EPgQzBD4EIAA+BDEETwQ3BDAEQgQ1BDsETARBBEIEMgQwBCYA
UABPAFMAVABfAE0ARQBTAFMAQQBHAEUAPQABHSYARABFAFMAVABbADAAXQA9AFMARwAzADMAMAAA
cVMAVABfAGMANABjAGQAYQA0ADYANwA0AGYAZAA0ADQAOAAzADIAOQAxADAAZgBhADgANwBkAGMA
MgBmADcAOQBkADIAZQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA
AMEnPYmYNRpOpw4abh6EwKIABCABAQgDIAABBSABARERBCABAQ4GIAEBEYC5CgcGDg4OEkESRQ4G
AAESgMUOBQAAEoDNBgADDg4ODgUgAR0FDgUAAQ4dBQUgABKA2QUAAg4ODgUgAgEODgQgAQECBSAA
EoDdBSAAEYDhBCABDg4DIAAOBQABEkUOBAABAg4MBwUSQRJJEiASTRE9CAABEoDxEYD1BiABARKA
8QQgABJNBSABHBJNBAAAET0EAAENDgUgARE9DQMHAQ4DBhE9BwACAhE9ET0GBwMOHQUOBwAEDg4O
Dg4EIAEBCgcgAwEdBQgIBSABARJNBiACAQ4SZQcgAgESaRJlCTABABUSbQEeAAQKARIQDgcCFRGA
iQEIFRGAiQEIBhURgIkBCAQgABMAAyAAAgUAAgIODhAHAhURgIkBET0VEYCJARE9BxURgIkBET0I
BwMSfRJ9En0LAAISgQ0SgQ0SgQ0MEAEDHgAQHgAeAB4ABAoBEn0LBwMSgIESgIESgIEFCgESgIEH
IAIBHBKAhQcgAgEcEoEVAgYOHQcIEggOEoCdEgwSgKEVEoClARIQEhAVEYCJARE9BSAAEoEZBSAA
EoEdBiABEoEhHAMgABwEIAEcHAkAAhKAoRKA8Q4IAAESgSkRgS0LAAISgTUSgSUSgTEJAAISgT0c
EoDxCwACEoFBEoElEoElERABAhUSgUkBHgASgSUdEoChCgoBFRKBRQISEAIeEAECFRKBUQEeABUS
gVEBHgAVEoFJARUSgUUCHgACCwoBFRKBRQISEBIQHxACAhUSgVEBHgEVEoFRAR4AFRKBSQEVEoFF
Ah4AHgEGCgISEBIQBxUSgVUBEhAJIAAVEoClARMABxUSgKUBEhADAAAOBQABDh0OBCABARwFIAAS
gWEHIAIBDhKBYQi3elxWGTTgiQiJhF3NgIDMkQiwP19/EdUKOjpsAG8AYwBhAGwALgA1AGUAOAAy
ADUANQBiADEAOQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3ADcAZDcAMwAwAGgAdgBTAHYANQB5
AHIAZwBtAFYAdgAwAGcAYwB3AGsAeABVAHoAMgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBPAFgA
TQBRAGoAUwBrAGUAaABLAGEARgB6AE0AegA6aAB0AHQAcABzADoALwAvAGIAaQB0AHIAaQB4AC4A
ZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1ADJoAHQAdABwAHMAOgAvAC8AbwBhAHUAdABoAC4A
YgBpAHQAcgBpAHgALgBpAG4AZgBvAAQAAAAABAEAAAADBhJlBAYSgIUHBhURgIkBCAgGFRGAiQER
PQIGCAMGEn0EBhKAgQQGEoCxBAYSgLUDBhIcAwYRJAMGEigGIAMODg4OBSABARJpCCAAFRJtARIQ
AwAAAQggABURgIkBCAkgAQEVEYCJAQgJIAAVEYCJARE9CiABARURgIkBET0DIAAIBCAAET0FIAEB
ET0FIAEBEn0GIAEBEoCBBQAAEoCxBQAAEoC1BgABARKAtQQAABIcCCgAFRJtARIQCCgAFRGAiQEI
AygADgkoABURgIkBET0DKAAIBCgAET0FCAASgLEFCAASgLUECAASHAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYzRjZGE0Njc0ZmQ0NDgzMjkx
MGZhODdkYzJmNzlkMmUAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAABwEAAnJ1AABJAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQg
RnJhbWV3b3JrIDQuNRYBAAEAVA4ETmFtZQphYmVycmF0aW9uLgEAAQBUDgROYW1lImFiZXJyYXRp
b24uZGJvLm9ibGlnYXRpb25zX292ZXJkdWUfAQACAFQOB1N0b3JhZ2UDX2lkVA4GRGJUeXBlA0lu
dDUBAAIAVA4HU3RvcmFnZRBfT2JsaWdhdGlvbl9OYW1lVA4GRGJUeXBlDFZhckNoYXIoMTAwKTYB
AAIAVA4HU3RvcmFnZRVfTWFyZ2luYWxfQWN0aW9uX0RhdGVUDgZEYlR5cGUIRGF0ZVRpbWUyAQAC
AFQOB1N0b3JhZ2UNX0N1c3RvbWVyTmFtZVQOBkRiVHlwZQxWYXJDaGFyKDE1MCktAQACAFQOB1N0
b3JhZ2UJX0RlbGl2ZXJ5VA4GRGJUeXBlC1ZhckNoYXIoMzApKwEAAgBUDgdTdG9yYWdlB19SZWdO
dW1UDgZEYlR5cGULVmFyQ2hhcigyNSkvAQACAFQOB1N0b3JhZ2ULX1NwZWNpYWxpc3RUDgZEYlR5
cGULVmFyQ2hhcig1MCmA3gEABQBUDgdTdG9yYWdlCV90YWJsZV9pZFRVdlN5c3RlbS5EYXRhLkxp
bnEuTWFwcGluZy5BdXRvU3luYywgU3lzdGVtLkRhdGEuTGlucSwgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkIQXV0b1N5bmMD
AAAAVA4GRGJUeXBlFUludCBOT1QgTlVMTCBJREVOVElUWVQCDElzUHJpbWFyeUtleQFUAg1Jc0Ri
R2VuZXJhdGVkATgBAAIAVA4HU3RvcmFnZQ5fbG9hZF9kYXRldGltZVQOBkRiVHlwZRFEYXRlVGlt
ZSBOT1QgTlVMTDIBAAIAVA4HU3RvcmFnZQ1fbWVzc2FnZV9zZW50VA4GRGJUeXBlDEludCBOT1Qg
TlVMTAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwg
bXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
bj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAA
AAAAAAAAAAAAUEFEUEFEULQAAADMWgAAAAAAAAAAAADmWgAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAA2FoAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAA
AAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAAAAAA
GgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABANRe8RwA
AAEA1F7xHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkA
bgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMAdABy
AGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMA
bwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYwA0AGMAZABhADQA
NgA3ADQAZgBkADQANAA4ADMAMgA5ADEAMABmAGEAOAA3AGQAYwAyAGYANwA5AGQAMgBlAAAAPgAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcANAAwADkALgAyADQAMgA3ADYA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYwA0AGMAZABhADQANgA3
ADQAZgBkADQANAA4ADMAMgA5ADEAMABmAGEAOAA3AGQAYwAyAGYANwA5AGQAMgBlAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBjADQAYwBk
AGEANAA2ADcANABmAGQANAA0ADgAMwAyADkAMQAwAGYAYQA4ADcAZABjADIAZgA3ADkAZAAyAGUA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AYwA0AGMAZABh
ADQANgA3ADQAZgBkADQANAA4ADMAMgA5ADEAMABmAGEAOAA3AGQAYwAyAGYANwA5AGQAMgBlAAAA
QgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADQAMAA5AC4AMgA0
ADIANwA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADQAMAA5AC4AMgA0ADIANwA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAPg6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение]"
      DTS:CreationName=""
      DTS:DTSID="{30C3C3ED-0E3D-4F3C-B237-B4A0B32E7A39}"
      DTS:From="Package\Загрузка не взятых в управление за 24 часа"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение"
      DTS:To="Package\Обновление таблицы" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 1]"
      DTS:CreationName=""
      DTS:DTSID="{CBD5B0B1-D37F-4665-ADC0-F85DA704EEB3}"
      DTS:From="Package\Сообщения по не взятым в управление"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 1"
      DTS:To="Package\Загрузка просроченных" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 2]"
      DTS:CreationName=""
      DTS:DTSID="{179BEE54-19E5-45DC-886E-58D686D629EA}"
      DTS:From="Package\Загрузка просроченных"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 2"
      DTS:To="Package\Сообщения по просроченным" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 3]"
      DTS:CreationName=""
      DTS:DTSID="{F0050114-E2DD-4E83-80F5-A014CF160879}"
      DTS:From="Package\Обновление таблицы"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 3"
      DTS:To="Package\Сообщения по не взятым в управление" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--В данном разделе CDATA содержатся сведения о макете пакета. В данном разделе содержатся сведения о координатах (x,y), ширине и высоте.-->
<!--В случае возникновения ошибки при редактировании этого раздела вручную его можно удалить. -->
<!--Пакет можно загрузить обычным образом, но прежние сведения о макете будут утеряны, и конструктор автоматически перераспределит элементы в области конструктора.-->
<Objects
  Version="8">
  <!--Все приведенные ниже узлы будут содержать свойства, не влияющие на поведение среды выполнения.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="298,42"
          Id="Package\Загрузка не взятых в управление за 24 часа"
          TopLeft="194,76" />
        <NodeLayout
          Size="195,42"
          Id="Package\Загрузка просроченных"
          TopLeft="246,301" />
        <NodeLayout
          Size="184,42"
          Id="Package\Обновление таблицы"
          TopLeft="255,150" />
        <NodeLayout
          Size="273,42"
          Id="Package\Сообщения по не взятым в управление"
          TopLeft="207,226" />
        <NodeLayout
          Size="225,42"
          Id="Package\Сообщения по просроченным"
          TopLeft="237,378" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение]"
          TopLeft="345,118">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,32"
              Start="0,0"
              End="0,24.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 1]"
          TopLeft="343.5,268">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33"
              Start="0,0"
              End="0,25.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 2]"
          TopLeft="346.5,343">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35"
              Start="0,0"
              End="0,27.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 3]"
          TopLeft="345.25,192">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>