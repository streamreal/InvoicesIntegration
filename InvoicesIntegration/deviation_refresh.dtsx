<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/2/2020 6:06:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ETP025"
  DTS:CreatorName="ELTRANSPLUS\andreydruzhinin"
  DTS:DTSID="{0E750AA6-B6ED-4B1A-A03C-C422BB6B8627}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1049"
  DTS:ObjectName="Package2"
  DTS:PackageType="5"
  DTS:VersionBuild="24"
  DTS:VersionGUID="{B0427BAA-9CF3-4062-AC77-490C14236C12}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Загрузка и обновление базы сообщений об отклонениях"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{6BF5FA1E-9395-4763-8F47-068F6F6DB22F}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка и обновление базы сообщений об отклонениях"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_23ff863071574b32b7711770e05366fa"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Settings.get_Default():ST_23ff863071574b32b7711770e05366fa.Properties.Sett" +
    "ings")]

namespace ST_23ff863071574b32b7711770e05366fa.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_23ff863071574b32b7711770e05366fa</msb:CodeName>
		<msb:DisplayName>ST_23ff863071574b32b7711770e05366fa</msb:DisplayName>
		<msb:ProjectId>{96CFAD18-7A59-4A23-A7E7-3693283CA20E}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_23ff863071574b32b7711770e05366fa.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="messages.cs"/>
		<msb:File Include="BitrixMessage.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="ResponseProcessor.cs"/>
		<msb:File Include="RootObject.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="ST_23ff863071574b32b7711770e05366fa.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8C1C04CF-7830-4F64-8533-13AA38EB04AB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_23ff863071574b32b7711770e05366fa</RootNamespace>
    <AssemblyName>ST_23ff863071574b32b7711770e05366fa</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="BitrixMessage.cs" />
    <Compile Include="messages.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ResponseProcessor.cs" />
    <Compile Include="RootObject.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_23ff863071574b32b7711770e05366fa")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_23ff863071574b32b7711770e05366fa")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="RootObject.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [DataContract]
    public class RootObject
    {
        [DataMember]
        public BitrixMessage[] result { get; set; }
        [DataMember]
        public string next { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
#endregion
using System.IO;
using System.Net;
using System.Text;

partial class Bitrix24
{
    public string SendCommand(string Command, string GetParams = "", string PostParams = "")
    {
        string BX_REST_URI = "https://bitrix.eltransplus.ru/rest/1/szxa4ogn53mr5x0z/" + Command + ".json";

        if (String.IsNullOrEmpty(GetParams) == false)
        {
            BX_REST_URI = BX_REST_URI + "?" + GetParams;
        }

        //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
        HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
        requestBitrixREST.Method = "POST";

        //Готовим тело запроса и вставляем его в тело POST-запроса  
        byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);
        requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
        requestBitrixREST.ContentLength = byteArrayBody.Length;

        Stream dataBodyStream = requestBitrixREST.GetRequestStream();
        dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
        dataBodyStream.Close();

        //Отправляем данные в Битрикс24
        HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

        //Читаем тело ответа от Битрикс24
        Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
        var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
        string stringBitrixREST = readerBitrixREST.ReadToEnd();

        //Закрываем все подключения и потоки
        readerBitrixREST.Close();
        dataStreamBitrixREST.Close();
        responseBitrixREST.Close();

        //Возвращаем строку ответа в формате JSON
        return stringBitrixREST;
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_23ff863071574b32b7711770e05366fa.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_23ff863071574b32b7711770e05366fa.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_23ff863071574b32b7711770e05366fa
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            try
            {
                Bitrix24 bx_logon = new Bitrix24();

                //общая выгрузка сообщений заняла 26 минут
                //данные возвращаются по 50 сообщений начиная с самых последних
                //расчет на работу скрипта ежечасно. забирает последние 50 сообщений одним запросом и сопоставляет с базой            
                string jsonResponse = bx_logon.SendCommand("log.blogpost.get", "LOG_RIGHTS[0]=SG330&start=0");
                jsonResponse = ResponseProcessor.FixJson(jsonResponse);
                _ = ResponseProcessor.ProcessNewRecords(jsonResponse);
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, "", e.Message, "", 0);
            }
            /*
            int start = 0;         
            do
            {
                string jsonResponse = bx_logon.SendCommand("log.blogpost.get", "LOG_RIGHTS[0]=SG330&start=" + start.ToString());
                jsonResponse = ResponseProcessor.FixJson(jsonResponse);
                start = ResponseProcessor.ProcessNewRecords(jsonResponse);

            } while (start > 0);
            */

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="BitrixMessage.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [DataContract]
    public class BitrixMessage
    {
        [DataMember]
        public string ID { get; set; }
        [DataMember]
        public string BLOG_ID { get; set; }
        [DataMember]
        public string TITLE { get; set; }
        [DataMember]
        public string AUTHOR_ID { get; set; }
        [DataMember]
        public string DETAIL_TEXT { get; set; }
        [DataMember]
        public string DATE_PUBLISH { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ResponseProcessor.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;

namespace ST_23ff863071574b32b7711770e05366fa
{
    class ResponseProcessor
    {
        //метод переводит Unicode-символы из ответа в читаемый вид
        //исправляет лишние двойные кавычки в элементах TITLE и DETAIL_TEXT
        public static string FixJson(string jsonResponse)
        {
            Regex regex = new Regex(@"\\[U][0-9A-Z]{4}", RegexOptions.IgnoreCase);
            MatchCollection m = regex.Matches(jsonResponse);
            IFormatProvider prov = new CultureInfo("ru-RU");
            string temp = string.Empty;

            foreach (Match match in m)
            {
                if (int.TryParse(match.Value.Substring(2), NumberStyles.HexNumber, prov, out int output) == true)
                {
                    char c = (char)output;
                    jsonResponse = jsonResponse.Replace(match.Value, c.ToString());
                }
            }

            regex = new Regex("[T][I][T][L][E][\"][:][\"].*?[\"][,][\"][A][U][T][H][O][R][_][I][D]", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("TITLE':'", "TITLE\":\"");
                temp = temp.Replace("','AUTHOR_ID", "\",\"AUTHOR_ID");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("[D][E][T][A][I][L][_][T][E][X][T][\"][:][\"].*?[\"][,][\"][D][A][T][E]", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("DETAIL_TEXT':'", "DETAIL_TEXT\":\"");
                temp = temp.Replace("','DATE", "\",\"DATE");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            return jsonResponse;
        }

        //метод десериализует JSON, проверяет наличие записи в базе и добавляет новые записи
        //возвращаемое значение соответствует указателю для повторного запроса следующих записей или 0 если достигнут конец
        public static int ProcessNewRecords(string json)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            IDbConnection connection = new SqlConnection(connBuilder.ConnectionString);

            DataContext db = new DataContext(connection);
            Table<messages> msg = db.GetTable<messages>();

            DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(RootObject));

            using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                var result = (RootObject)deserializer.ReadObject(ms);

                foreach (var item in result.result)
                {
                    Regex reg = new Regex("[D][0-9]{6}");
                    Match match = reg.Match(item.TITLE + item.DETAIL_TEXT);
                    int count = msg.Where(m => m.bitrix_message_id.ToString() == item.ID && m.author_id.ToString() == item.AUTHOR_ID).Select(m => m).Count();

                    if (match.Success == true && count == 0)
                    {
                        msg.InsertOnSubmit(new messages
                        {
                            bitrix_message_id = Convert.ToInt32(item.ID),
                            date_publish = item.DATE_PUBLISH,
                            delivery_id = match.Value,
                            message = item.TITLE,
                            detail = item.DETAIL_TEXT,
                            message_url = @"https://bitrix.eltransplus.ru/company/personal/user/" + item.AUTHOR_ID + @"/blog/" + item.ID + @"/",
                            blog_id = Convert.ToInt32(item.BLOG_ID),
                            author_id = Convert.ToInt32(item.AUTHOR_ID)
                        });                      
                    }
                }

                db.SubmitChanges();

                if (String.IsNullOrWhiteSpace(result.next) == false)
                {
                    return Convert.ToInt32(result.next);
                }
                else
                {
                    return 0;
                }
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="messages.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Data.Linq.Mapping;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [Table(Name = "aberration.dbo.only_messages_330")]
    public class messages
    {
        [Column(IsDbGenerated = true, IsPrimaryKey = true)]
        public int id { get; set; }
        [Column]
        public int bitrix_message_id { get; set; }
        [Column]
        public string date_publish { get; set; }
        [Column]
        public string delivery_id { get; set; }
        [Column]
        public string message { get; set; }
        [Column]
        public string detail { get; set; }
        [Column]
        public string message_url { get; set; }
        [Column]
        public int blog_id { get; set; }
        [Column]
        public int author_id { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_23ff863071574b32b7711770e05366fa.dll">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
MQAQDBAAOQAQDBAAQQAQDBAASQAQDBAAUQAQDBAAWQAQDBAAYQAQDBAAcQAQDAYAeQAQDAYAgQAQ
DAYAiQAQDAYAkQAQDAYA4QAQDAYAAQEQDAYAIQEQDBUAMQHLDSMAMQHIDioAOQG5BS8AOQG/AxAA
SQFQADYASQEgDTwAOQHgBBAAOQFZCEIAOQFWCUcAUQHVBU0AUQGiBQYAOQGWBVUAWQFECUcAaQEQ
DFsAcQGpA2IAcQGiBQYAWQGiBQYAaQAQDAYAeQEQDHgAeQHcDIAAEQEQDBAAMQHQDocAiQECDIoA
oQBZDo8AkQG9B2IAMQEnCJMAmQGwBZgAqQEeCGIAMQHXA6QAoQCCDqoAsQCoBQYAsQEQDAYAsQEC
BBAAsQGoABAAsQHKAxAAuQEJCGIAwQEQDBAAuQAQDMwAuQBPBNMA0QHOBOIAyQAQDOsASQERBDYA
0QAQDPIA4QHSDfgAeQEQDBAAMQHLDf8AeQExCAUB6QGhCwsB8QG6BBQB6QHWDh0BmQEeCGIA6QH3
CCkB6QE6DjkBIQKnBEMB6QGjA0wB6QGzCFgB6QHsClgB6QEbAWQBSQLwBIABSQLoDasBSQJlDtIB
WQKeDaoAYQI4AN4BMQHLDeMBDAD6DfABuQDODAYAMQHfAyoA6QCqDfsBaQLADQEC8QAdBGIAcQLa
CwcCaQIVDgEA6QAQDAYA0QG7DhACCQEQDBYCKQEQDAYADgAJAAAADgANAAAACABgADACCABkADUC
IQBrADUCKQBzADUCLgALALQCLgATAL0CLgAbANwCLgAjAOUCLgArAA4DLgAzAA4DLgA7AA4DLgBD
AOUCLgBLABQDLgBTAA4DLgBbACsDQQBrADUCSQBzADUCYABrADUCYQBrADUCYwBjADUCaQBzADUC
gABrADUCgQBrADUCgwB7AHUDiQBzADUCoABrADUCoQBrADUCqQBzADUCwABrADUCwQBrADUCwwBj
ADUCyQBzADUC4ABrADUC4QBrADUC4wCLADUC6QCDAKIDAAFrADUCAQFrADUCAwGTADUCCQGDADUC
IAFrADUCIQFrADUCKQGDADUCQAFrADUCQQFrADUCQwFrADUCSQGDADUCYAFrADUCYQFrADUCYwFr
ADUCaQGDADUCgAFrADUCgQFrADUCiQGDADUCoAFrADUCoQFrADUCqQGDADUCwAFrADUCwQFrADUC
yQGDADUC4QFrADUC6QGDADUCAAJrADUCAQJrADUCCQJzADUCIAJrADUCIQJrADUCKQJzADUCQAJr
ADUCSQKbANwCYAJrADUCaQKbANwCgAJrADUCgQJrADUCoAJrADUCwAJrADUC4AJrADUCAANrADUC
IANrADUCQANrADUCYANrADUCgANrADUCoANrADUCwANrADUC4ANrADUCAARrADUCIARrADUCwARr
ADUC4ARrADUCAAVrADUCIAVrADUCHABmAK4A9gEDAAEABAAHAAYAEAAIABIACQAUAAAAsACVAgAA
dgCVAgAAwQCVAgAAkACVAgAABwGVAgAA3ACVAgAA6gGZAgAAeQGZAgAATAiVAgAA4QGVAgAARwSV
AgAA8AiVAgAAOAmVAgAAmwGZAgAAtQGZAgAAMw6dAgAApA6VAgAAfQujAgAAKgWpAgAADQ6vAgIA
AwADAAEABAADAAIABQAFAAEABgAFAAIABwAHAAEACAAHAAIACQAJAAEACgAJAAIACwALAAEADAAL
AAIADQANAAEADgANAAIAEAAPAAEAEQAPAAIAEgARAAEAEwARAAIAFAATAAEAFQATAAIAFgAVAAEA
FwAVAAIAGAAXAAEAGQAXAAIAGgAZAAEAGwAZAAIAHAAbAAEAHQAbAAIAHgAdAAEAHwAdAAIAIAAf
AAEAIQAfAAIAJgAhAAEAJwAhAAIAKAAjAAEAKQAjAAIALgAlAAIALwAnAAEAMAAnAAIAMQApAOkB
BIAAAAEAAADoHS19AAAAAAAAIgEAAAQAAAAAAAAAAAAAAB4CUgEAAAAABAAAAAAAAAAAAAAAHgIk
CgAAAAAEAAAAAAAAAAAAAAAeAvoKAAAAAAQAAAAAAAAAAAAAAB4CeQkAAAAABAAAAAAAAAAAAAAA
HgL2BAAAAAANAAAAAAAAAAAAAAAnAmsIAAAAAAQAAAAAAAAAAAAAAB4CRgEAAAAAAAAAAAEAAABz
DAAACgAFAAsABQAMAAcAdQDdAJsAdQGdAN0AmwCfAZ8AywGhAN0AAAAAAAA8PmNfX0Rpc3BsYXlD
bGFzczFfMABUYWJsZWAxAElRdWVyeWFibGVgMQBFeHByZXNzaW9uYDEAVG9JbnQzMgBGdW5jYDIA
Qml0cml4MjQAZ2V0X1VURjgAPD45ADxNb2R1bGU+AGdldF9CTE9HX0lEAHNldF9CTE9HX0lEAGdl
dF9BVVRIT1JfSUQAc2V0X0FVVEhPUl9JRABnZXRfSUQAc2V0X0lEAHNldF9Vc2VySUQAZ2V0X1RJ
VExFAHNldF9USVRMRQBnZXRfREFURV9QVUJMSVNIAHNldF9EQVRFX1BVQkxJU0gAU3lzdGVtLklP
AGdldF9ERVRBSUxfVEVYVABzZXRfREVUQUlMX1RFWFQAdmFsdWVfXwBMYW1iZGEAU1RfMjNmZjg2
MzA3MTU3NGIzMmI3NzExNzcwZTA1MzY2ZmEAU3lzdGVtLkRhdGEAbXNjb3JsaWIAPD5jAGdldF9i
aXRyaXhfbWVzc2FnZV9pZABzZXRfYml0cml4X21lc3NhZ2VfaWQAZ2V0X2Jsb2dfaWQAc2V0X2Js
b2dfaWQAZ2V0X2F1dGhvcl9pZABzZXRfYXV0aG9yX2lkAGdldF9pZABzZXRfaWQAZ2V0X2RlbGl2
ZXJ5X2lkAHNldF9kZWxpdmVyeV9pZAA8SUQ+a19fQmFja2luZ0ZpZWxkADxCTE9HX0lEPmtfX0Jh
Y2tpbmdGaWVsZAA8QVVUSE9SX0lEPmtfX0JhY2tpbmdGaWVsZAA8VElUTEU+a19fQmFja2luZ0Zp
ZWxkADxEQVRFX1BVQkxJU0g+a19fQmFja2luZ0ZpZWxkADxERVRBSUxfVEVYVD5rX19CYWNraW5n
RmllbGQAPGlkPmtfX0JhY2tpbmdGaWVsZAA8Yml0cml4X21lc3NhZ2VfaWQ+a19fQmFja2luZ0Zp
ZWxkADxibG9nX2lkPmtfX0JhY2tpbmdGaWVsZAA8YXV0aG9yX2lkPmtfX0JhY2tpbmdGaWVsZAA8
ZGVsaXZlcnlfaWQ+a19fQmFja2luZ0ZpZWxkADxtZXNzYWdlPmtfX0JhY2tpbmdGaWVsZAA8ZGF0
ZV9wdWJsaXNoPmtfX0JhY2tpbmdGaWVsZAA8ZGV0YWlsPmtfX0JhY2tpbmdGaWVsZAA8bWVzc2Fn
ZV91cmw+a19fQmFja2luZ0ZpZWxkADxyZXN1bHQ+a19fQmFja2luZ0ZpZWxkADxuZXh0PmtfX0Jh
Y2tpbmdGaWVsZABSZWFkVG9FbmQAU2VuZENvbW1hbmQAc2V0X01ldGhvZABzZXRfUGFzc3dvcmQA
UmVwbGFjZQBJc051bGxPcldoaXRlU3BhY2UAZGVmYXVsdEluc3RhbmNlAHNldF9EYXRhU291cmNl
AGdldF9Vbmljb2RlAGdldF9NZXNzYWdlAEJpdHJpeE1lc3NhZ2UAZ2V0X21lc3NhZ2UAc2V0X21l
c3NhZ2UAR2V0VGFibGUASURpc3Bvc2FibGUAUXVlcnlhYmxlAFJ1bnRpbWVGaWVsZEhhbmRsZQBS
dW50aW1lTWV0aG9kSGFuZGxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldEZpZWxkRnJvbUhhbmRsZQBH
ZXRNZXRob2RGcm9tSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAHNldF9Db250ZW50VHlwZQBXaGVy
ZQBTeXN0ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBDYXB0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxp
Y2F0aW9uU2V0dGluZ3NCYXNlAEh0dHBXZWJSZXNwb25zZQBqc29uUmVzcG9uc2UAR2V0UmVzcG9u
c2UAQ2xvc2UARGlzcG9zZQBUcnlQYXJzZQBDcmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAV3Jp
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBUYWJsZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJp
YnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBDb2x1bW5BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0
aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUARGF0YU1lbWJlckF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAERhdGFDb250cmFjdEF0dHJpYnV0
ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJ
U1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBS
dW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAdmFsdWUARW5jb2RpbmcAU3lz
dGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTeXN0ZW0uRGF0YS5MaW5xLk1hcHBpbmcAZ2V0X0Nvbm5l
Y3Rpb25TdHJpbmcAVG9TdHJpbmcAU3Vic3RyaW5nAE1hdGNoAGdldF9kYXRlX3B1Ymxpc2gAc2V0
X2RhdGVfcHVibGlzaABzZXRfQ29udGVudExlbmd0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlw
dFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBFcXVhbABTY3Jp
cHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAZ2V0X2RldGFpbABzZXRfZGV0YWls
AENhbGwAU1RfMjNmZjg2MzA3MTU3NGIzMmI3NzExNzcwZTA1MzY2ZmEuZGxsAGdldF9tZXNzYWdl
X3VybABzZXRfbWVzc2FnZV91cmwAR2V0UmVzcG9uc2VTdHJlYW0AR2V0UmVxdWVzdFN0cmVhbQBN
ZW1vcnlTdHJlYW0AaXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAE1ldGhv
ZENhbGxFeHByZXNzaW9uAE1lbWJlckV4cHJlc3Npb24AUGFyYW1ldGVyRXhwcmVzc2lvbgBDb25z
dGFudEV4cHJlc3Npb24AQmluYXJ5RXhwcmVzc2lvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uAFN5c3RlbS5SZWZs
ZWN0aW9uAE1hdGNoQ29sbGVjdGlvbgBJRGJDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0
aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uLkpzb24A
Rml4SnNvbgBqc29uAEZpZWxkSW5mbwBNZXRob2RJbmZvAEN1bHR1cmVJbmZvAEFuZEFsc28AR3Jv
dXAAU3lzdGVtLkRhdGEuTGlucQBTeXN0ZW0uTGlucQBDaGFyAFN0cmVhbVJlYWRlcgBUZXh0UmVh
ZGVyAElGb3JtYXRQcm92aWRlcgBEYkNvbm5lY3Rpb25TdHJpbmdCdWlsZGVyAFNxbENvbm5lY3Rp
b25TdHJpbmdCdWlsZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBQ
YXJhbWV0ZXIARGF0YUNvbnRyYWN0SnNvblNlcmlhbGl6ZXIAWG1sT2JqZWN0U2VyaWFsaXplcgBG
aXJlRXJyb3IAUmVzcG9uc2VQcm9jZXNzb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3Rv
cgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFByb2Nlc3NOZXdSZWNvcmRzAFN5c3RlbS5SdW50
aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8yM2ZmODYzMDcxNTc0YjMy
Yjc3MTE3NzBlMDUzNjZmYS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5n
TW9kZXMAbWVzc2FnZXMAU3VibWl0Q2hhbmdlcwBNYXRjaGVzAFNUXzIzZmY4NjMwNzE1NzRiMzJi
NzcxMTc3MGUwNTM2NmZhLlByb3BlcnRpZXMATnVtYmVyU3R5bGVzAEdldEJ5dGVzAFNldHRpbmdz
AEdldFBhcmFtcwBQb3N0UGFyYW1zAFN5c3RlbS5MaW5xLkV4cHJlc3Npb25zAFN5c3RlbS5UZXh0
LlJlZ3VsYXJFeHByZXNzaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAUmVnZXhPcHRpb25zAGdldF9T
dWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAENvbmNhdABSZWFkT2JqZWN0
AFJvb3RPYmplY3QAU2VsZWN0AFN5c3RlbS5OZXQASW5zZXJ0T25TdWJtaXQAZ2V0X0RlZmF1bHQA
c2V0X1Rhc2tSZXN1bHQAZ2V0X3Jlc3VsdABzZXRfcmVzdWx0AENvbnN0YW50AFN5c3RlbS5EYXRh
LlNxbENsaWVudABnZXRfQ3VycmVudABDb3VudABDb252ZXJ0AEh0dHBXZWJSZXF1ZXN0AE1vdmVO
ZXh0AFN5c3RlbS5UZXh0AGdldF9uZXh0AHNldF9uZXh0AERhdGFDb250ZXh0AFJlZ2V4AGdldF9B
c3NlbWJseQBJc051bGxPckVtcHR5AFByb3BlcnR5AAAAbWgAdAB0AHAAcwA6AC8ALwBiAGkAdABy
AGkAeAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAvAHIAZQBzAHQALwAxAC8AcwB6AHgA
YQA0AG8AZwBuADUAMwBtAHIANQB4ADAAegAvAAALLgBqAHMAbwBuAAADPwAACVAATwBTAFQAAENh
AHAAcABsAGkAYwBhAHQAaQBvAG4ALwB4AC0AdwB3AHcALQBmAG8AcgBtAC0AdQByAGwAZQBuAGMA
bwBkAGUAZAABIVwAXABbAFUAXQBbADAALQA5AEEALQBaAF0AewA0AH0AAQtyAHUALQBSAFUAAX9b
AFQAXQBbAEkAXQBbAFQAXQBbAEwAXQBbAEUAXQBbACIAXQBbADoAXQBbACIAXQAuACoAPwBbACIA
XQBbACwAXQBbACIAXQBbAEEAXQBbAFUAXQBbAFQAXQBbAEgAXQBbAE8AXQBbAFIAXQBbAF8AXQBb
AEkAXQBbAEQAXQAAAyIAAAMnAAERVABJAFQATABFACcAOgAnAAERVABJAFQATABFACIAOgAiAAAZ
JwAsACcAQQBVAFQASABPAFIAXwBJAEQAARkiACwAIgBBAFUAVABIAE8AUgBfAEkARAAAgIVbAEQA
XQBbAEUAXQBbAFQAXQBbAEEAXQBbAEkAXQBbAEwAXQBbAF8AXQBbAFQAXQBbAEUAXQBbAFgAXQBb
AFQAXQBbACIAXQBbADoAXQBbACIAXQAuACoAPwBbACIAXQBbACwAXQBbACIAXQBbAEQAXQBbAEEA
XQBbAFQAXQBbAEUAXQAAHUQARQBUAEEASQBMAF8AVABFAFgAVAAnADoAJwABHUQARQBUAEEASQBM
AF8AVABFAFgAVAAiADoAIgAADycALAAnAEQAQQBUAEUAAQ8iACwAIgBEAEEAVABFAAAVMQAwAC4A
MQAwAC4AMAAuADIAOAAAD3AAaABwAHUAcwBlAHIAABFnAG4AUQBDAFUARQBsAFUAABdbAEQAXQBb
ADAALQA5AF0AewA2AH0AAQNtAABpaAB0AHQAcABzADoALwAvAGIAaQB0AHIAaQB4AC4AZQBsAHQA
cgBhAG4AcwBwAGwAdQBzAC4AcgB1AC8AYwBvAG0AcABhAG4AeQAvAHAAZQByAHMAbwBuAGEAbAAv
AHUAcwBlAHIALwAADS8AYgBsAG8AZwAvAAADLwAAIWwAbwBnAC4AYgBsAG8AZwBwAG8AcwB0AC4A
ZwBlAHQAADdMAE8ARwBfAFIASQBHAEgAVABTAFsAMABdAD0AUwBHADMAMwAwACYAcwB0AGEAcgB0
AD0AMAAAAQBxUwBUAF8AMgAzAGYAZgA4ADYAMwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEA
NwA3ADAAZQAwADUAMwA2ADYAZgBhAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAACFEkqCXecWT5TNm290rQhRAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAjQYHAw4d
BQ4GAAMODg4OBAABAg4GAAESgJ0OBQAAEoClBSABHQUOBCABAQoFIAASgKkHIAMBHQUICAUgABKA
rQYgAQESgKkDIAAOEQcJEk0OElESVQgDElkSVRJVByACAQ4RgMEGIAESgMUOAgYOBCAAElEDIAAc
BCABDggLAAQCDhGA0RJNEAgFIAIODg4DIAACHQcMEl0VEmEBEhASZRJpEhgdEgwIEigSVQgSbRIQ
BiABARKA5QkwAQAVEmEBHgAECgESEAgAARKA6RGA7QYgAQESgOkFIAEBHQUGIAEcEoCpBQACDg4O
BSABElUOCAACEm0SgOkOCAABEoD5EYD9CwACEoEFEoD1EoEBDwADEoEJEoD1EoEBHRKA9QkAAhKB
DRwSgOkIAAESgRERgRULAAISgQUSgPUSgRELAAISgRkSgPUSgPUQEAECFRKBIQEeABKA9R0SbQoK
ARUSgR0CEhACHhABAhUSgSkBHgAVEoEpAR4AFRKBIQEVEoEdAh4AAgsKARUSgR0CEhASEB8QAgIV
EoEpAR4BFRKBKQEeABUSgSEBFRKBHQIeAB4BBgoCEhASEAsQAQEIFRKBKQEeAAQAAQgOBQABDh0O
BhUSYQESEAUgAQETAAQHARJ5BSAAEoE1BSAAEoE5CCAFAggODg4IBSAAEoE9ByACAQ4SgT0It3pc
Vhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAAgYIBAYdEgwEBhKAhQQGEoCJAwYSJAMGEgwDBhIsAwYR
MAYgAw4ODg4DIAAIBAABDg4FIAAdEgwGIAEBHRIMBQAAEoCFBQAAEoCJBgABARKAiQQAABIkAwAA
AQMoAA4DKAAIBSgAHRIMBQgAEoCFBQgAEoCJBAgAEiQIAQAIAAAAAAAeAQABAFQCFldyYXBOb25F
eGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzIzZmY4NjMwNzE1NzRiMzJiNzcxMTc3MGUw
NTM2NmZhAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAEkBABouTkVURnJhbWV3b3JrLFZl
cnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41LAEA
AQBUDgROYW1lIGFiZXJyYXRpb24uZGJvLm9ubHlfbWVzc2FnZXNfMzMwJQEAAgBUAg1Jc0RiR2Vu
ZXJhdGVkAVQCDElzUHJpbWFyeUtleQG0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAZE4AAAAAAAAAAAAAfk4AAAAgAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHBOAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwA
AAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAA
AAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAA
AAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAB
AC196B0AAAEALX3oHT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAAB
AFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoA
AQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAA
AAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMgAzAGYA
ZgA4ADYAMwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBh
AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcANgA1ADYALgAzADIA
MAA0ADUAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMgAzAGYAZgA4
ADYAMwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAC4A
ZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBn
AGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsA
cwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAy
ADMAZgBmADgANgAzADAANwAxADUANwA0AGIAMwAyAGIANwA3ADEAMQA3ADcAMABlADAANQAzADYA
NgBmAGEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgAz
AGYAZgA4ADYAMwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYA
ZgBhAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADYANQA2
AC4AMwAyADAANAA1AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAA
MQAuADAALgA3ADYANQA2AC4AMwAyADAANAA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAJA+AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Загрузка реестра отклонений"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{88836BFD-0102-4B5A-9135-B181B7489314}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка реестра отклонений"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7e5970296ac341b2bc0dd4c73f15a22b"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Settings.get_Default():ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Sett" +
    "ings")]

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_7e5970296ac341b2bc0dd4c73f15a22b</msb:CodeName>
		<msb:DisplayName>ST_7e5970296ac341b2bc0dd4c73f15a22b</msb:DisplayName>
		<msb:ProjectId>{A5FAE179-2FEB-48D9-BB0E-304F8115EC77}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7e5970296ac341b2bc0dd4c73f15a22b.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="messages.cs"/>
		<msb:File Include="BitrixMessage.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="ResponseProcessor.cs"/>
		<msb:File Include="RootObject.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7e5970296ac341b2bc0dd4c73f15a22b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7e5970296ac341b2bc0dd4c73f15a22b")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="RootObject.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    [DataContract]
    public class RootObject
    {
        [DataMember]
        public BitrixMessage[] result { get; set; }
        [DataMember]
        public string next { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
#endregion
using System.IO;
using System.Net;
using System.Text;

partial class Bitrix24
{
    public string SendCommand(string Command, string GetParams = "", string PostParams = "")
    {
        string BX_REST_URI = "https://bitrix.eltransplus.ru/rest/1/szxa4ogn53mr5x0z/" + Command + ".json";

        if (String.IsNullOrEmpty(GetParams) == false)
        {
            BX_REST_URI = BX_REST_URI + "&" + GetParams;
        }

        //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
        HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
        requestBitrixREST.Method = "POST";

        //Готовим тело запроса и вставляем его в тело POST-запроса  
        byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);
        requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
        requestBitrixREST.ContentLength = byteArrayBody.Length;

        Stream dataBodyStream = requestBitrixREST.GetRequestStream();
        dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
        dataBodyStream.Close();

        //Отправляем данные в Битрикс24
        HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

        //Читаем тело ответа от Битрикс24
        Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
        var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
        string stringBitrixREST = readerBitrixREST.ReadToEnd();

        //Закрываем все подключения и потоки
        readerBitrixREST.Close();
        dataStreamBitrixREST.Close();
        responseBitrixREST.Close();

        //Возвращаем строку ответа в формате JSON
        return stringBitrixREST;
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
#endregion

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            Bitrix24 bx_logon = new Bitrix24();

            string jsonResponse = bx_logon.SendCommand("lists.element.get", "",
                                              "IBLOCK_TYPE_ID=lists_socnet" +
                                              "&SOCNET_GROUP_ID=330" +
                                              "&IBLOCK_ID=184" +
                                              "&ELEMENT_ORDER[ID]=DESC"
                                              );

            jsonResponse = ResponseProcessor.FixJson(jsonResponse);
            _ = ResponseProcessor.ProcessNewRecords(jsonResponse);

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="BitrixMessage.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Collections.Generic;
using System.Runtime.Serialization;
#endregion

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    [DataContract]
    public class BitrixMessage
    {
        [DataMember]
        public string ID { get; set; }
        [DataMember]
        public string NAME { get; set; }
        [DataMember]
        public string DATE_CREATE { get; set; }
        [DataMember] 
        public string DETAIL_TEXT { get; set; }
        [DataMember]
        public string CREATED_USER_NAME { get; set; }
        [DataMember]
        public Dictionary<string, string> PROPERTY_1292 { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ResponseProcessor.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    public static class ResponseProcessor
    {
        //метод переводит Unicode-символы из ответа в читаемый вид
        //исправляет лишние двойные кавычки в элементах
        public static string FixJson(string jsonResponse)
        {
            Regex regex = new Regex(@"\\[U][0-9A-Z]{4}", RegexOptions.IgnoreCase);
            MatchCollection m = regex.Matches(jsonResponse);
            IFormatProvider prov = new CultureInfo("ru-RU");
            string temp = string.Empty;

            foreach (Match match in m)
            {
                if (int.TryParse(match.Value.Substring(2), NumberStyles.HexNumber, prov, out int output) == true)
                {
                    char c = (char)output;
                    jsonResponse = jsonResponse.Replace(match.Value, c.ToString());
                }
            }

            regex = new Regex("{\"TYPE\":\"HTML\",\"TEXT\":\".*?\"}", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);           

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");

                
                temp = temp.Replace("{'TYPE':'HTML','TEXT':'", "{\"TYPE\":\"HTML\",\"TEXT\":\"");
                temp = temp.Replace("'}", "\"}");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("\"PREVIEW_TEXT\":\".*?\",\"TIMESTAMP", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("'PREVIEW_TEXT':'", "\"PREVIEW_TEXT\":\"");
                temp = temp.Replace("','TIMESTAMP", "\",\"TIMESTAMP");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("\"DETAIL_TEXT\":\".*?\",\"PREVIEW", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("'DETAIL_TEXT':'", "\"DETAIL_TEXT\":\"");
                temp = temp.Replace("','PREVIEW", "\",\"PREVIEW");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("\"PROPERTY_[0-9]{4}\":{\".*?\":\".*?\"}", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("'PROPERTY_", "\"PROPERTY_");
                temp = temp.Replace("':{'", "\":{\"");
                temp = temp.Replace("':'", "\":\"");
                temp = temp.Replace("'}", "\"}");
                temp = temp.Replace("','", "\",\""); 
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }
                
            return jsonResponse;
        }

        //метод десериализует JSON, проверяет наличие записи в базе и добавляет новые записи
        //возвращаемое значение соответствует указателю для повторного запроса следующих записей или 0 если достигнут конец
        public static int ProcessNewRecords(string json)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            IDbConnection connection = new SqlConnection(connBuilder.ConnectionString);

            DataContext db = new DataContext(connection);
            Table<messages> msg = db.GetTable<messages>();

            DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(RootObject), new DataContractJsonSerializerSettings
            {
                UseSimpleDictionaryFormat = true
            });

            using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                var result = (RootObject)deserializer.ReadObject(ms);

                foreach (var item in result.result)
                {
                    Regex reg = new Regex("[D][0-9]{6}");
                    MatchCollection match = reg.Matches(item.NAME);
                    int count = msg.Where(m => m.element_id.ToString() == item.ID).Select(m => m).Count();

                    if (match.Count > 0 && count == 0)
                    {
                        foreach (Match m in match)
                        {
                            msg.InsertOnSubmit(new messages
                            {
                                element_id = Convert.ToInt32(item.ID),
                                date_create = item.DATE_CREATE,
                                delivery_id = m.Value,
                                message = item.DETAIL_TEXT,
                                message_url = @"https://bitrix.eltransplus.ru/workgroups/group/330/lists/184/element/0/" + item.ID.ToString() + @"/?list_section_id=",
                                author = item.CREATED_USER_NAME,
                                task_url = @"https://bitrix.eltransplus.ru/workgroups/group/330/tasks/task/view/" + item.PROPERTY_1292.First().Value.ToString() + @"/"
                            });  
                        }                     
                    }
                }

                db.SubmitChanges();

                if (String.IsNullOrWhiteSpace(result.next) == false)
                {
                    return Convert.ToInt32(result.next);
                }
                else
                {
                    return 0;
                }
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="messages.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Data.Linq.Mapping;
#endregion


namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    [Table(Name = "aberration.dbo.list_330")]
    public class messages
    {
        [Column(IsDbGenerated = true, IsPrimaryKey = true)]
        public int id { get; set; }
        [Column]
        public int element_id { get; set; }
        [Column]
        public string date_create { get; set; }
        [Column]
        public string delivery_id { get; set; }
        [Column]
        public string message { get; set; }      
        [Column]
        public string message_url { get; set; }       
        [Column]
        public string author { get; set; }
        [Column]
        public string task_url { get; set; }
    }    
}]]></ProjectItem>
          <ProjectItem
            Name="ST_7e5970296ac341b2bc0dd4c73f15a22b.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{5EE044C4-B069-4567-A8E1-A7785F3A9209}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7e5970296ac341b2bc0dd4c73f15a22b</RootNamespace>
    <AssemblyName>ST_7e5970296ac341b2bc0dd4c73f15a22b</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="BitrixMessage.cs" />
    <Compile Include="messages.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ResponseProcessor.cs" />
    <Compile Include="RootObject.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_7e5970296ac341b2bc0dd4c73f15a22b.dll">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
rn4RAAAELR5yFAYAcNAIAAACKDsAAApvWwAACnNcAAAKgBEAAAR+EQAABCoafhIAAAQqHgKAEgAA
BCoafhMAAAQqHgIoXQAACioucy8AAAaAEwAABCouczMAAAaAFQAABCoAAEJTSkIBAAEAAAAAAAwA
AAB2NC4wLjMwMzE5AAAAAAUAbAAAAGANAAAjfgAAzA0AAPgOAAAjU3RyaW5ncwAAAADEHAAAiAYA
ACNVUwBMIwAAEAAAACNHVUlEAAAAXCMAAPQDAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEz
ABYAAAEAAABRAAAADAAAABgAAAAzAAAAFgAAAF0AAAAEAAAAVQAAAAMAAAAFAAAAEwAAACQAAAAC
AAAAAQAAAAcAAAABAAAAAwAAAAcAAAAAAOgIAQAAAAAABgAeBygMBgDDBygMBgBGBgMMDwCcDAAA
BgBzBkcKBgDtBkcKBgDOBkcKBgCqB0cKBgBUB0cKBgBtB0cKBgCKBkcKBgClBvoHBgDwDX8JCgA+
ByoKBgD/BSgMBgCIAKEBCgAKByoKDgA3BhQIDgC+BhQIBgAiC38JBgDcC34NEgBVCF8NBgBcBH8J
DgDCDugKDgAWAOgKCgCFC5gKBgBtCSsBEgBZCl8NFgDICUcNBgB5AKEBGgCIB4wIGgBJBYwIBgCG
CX8JBgAaBgMMBgBrC0gMBgDcChUKEgDkBc0IEgBaBs0IEgBlBQAKBgBECH8JEgCKDv4NEgCGDv4N
BgDxB6QOBgBzCSsBEgCBBf4NEgB9Bf4NBgAKCysBBgAXCysBEgDODl8NEgCRDV8NEgA2BV8NBgBI
AH8JBgD5DBUKBgAFC38JHgBMC1IOHgAyC4UKHgB3ClIOHgBpCmQBBgDvBH8JBgCZBH8JCgAPDZgK
CgCgCyoKFgD1CUcNBgA+BUcKBgCFBH8JBgDRCkcKFgC3CUcNFgCiCUcNFgDcCUcNBgDHCkcKBgBy
BH8JFgDvCUcNBgByAH8JFgA5AEcNFgBoBPkKFgAsAPkKBgB+Dn8JFgBRBPkKBgAeAKEBGgC7CIwI
BgDYDkcKAAAAAKsAAAAAAAEAAQAAABAAlQAAADUAAQABAAEAEAAiBHABNQABAAMAAQAQAKsMcAE1
AAcAEACBARAAygtwATUADwAhAAEAEADsDXABNQAPACMAAQAQAJcJcAGBABEAKAAAABAATwzKDDUA
EQAqAAABEAApDcoMnQATAC4AAwEQAAEAAAA1ABQAMQADIRAAnQEAADUAFQAyAAMBAACuDQAAhQAW
ADQAAQAnAooAAQA7AooAAQB0AooAAQCRAooAAQBRAooAAQAIAk8CAQCuAlcCAQDCAlcCAQAUA4oA
AQDeAooAAQD7AooAAQAxA4oAAQBoA4oAAQBOA4oAAQCAA1oCAQCYA4oAEQCLCV8CEQAmBWQCEQD3
A2kCBgB6CW0CNgCnAHECBgZVAVcCVoCeDXUCVoAGBXUCUCAAAAAAhgC4A3kCAQD9IAAAAACGGPYL
BgAEAAUhAAAAAIYItABiAAQADSEAAAAAhgi7ABAABAAWIQAAAACGCPkAYgAFAB4hAAAAAIYIAgEQ
AAUAJyEAAAAAhggLAWIABgAvIQAAAACGCBsBEAAGADghAAAAAIYINQFiAAcAQCEAAAAAhghFARAA
BwBJIQAAAACGCM0AYgAIAFEhAAAAAIYI4wAQAAgAWiEAAAAAhghOAIACCQBiIQAAAACGCGAAiQIJ
AP0gAAAAAIYY9gsGAAoAayEAAAAAhgi8AecBCgBzIQAAAACGCMMBAQAKAHwhAAAAAIYIygHnAQsA
hCEAAAAAhgjZAQEACwCNIQAAAACGCMQFYgAMAJUhAAAAAIYI1AUQAAwAniEAAAAAhgjoAWIADQCm
IQAAAACGCPgBEAANAK8hAAAAAIYIMARiAA4AtyEAAAAAhgg8BBAADgDAIQAAAACGCBAJYgAPAMgh
AAAAAIYIIAkQAA8A0SEAAAAAhgi0C2IAEADZIQAAAACGCL8LEAAQAOIhAAAAAIYIMAliABEA6iEA
AAAAhgg9CRAAEQD9IAAAAACGGPYLBgASAPQhAAAAAJYAugqTAhIAOCUAAAAAlgAWDOsBEwBUKAAA
AACGCDMOmAIUAFwoAAAAAIYIPg6eAhQAZSgAAAAAhgiwDmIAFQBtKAAAAACGCLkOEAAVAP0gAAAA
AIYY9gsGABYAdigAAAAAhgCdCQYAFgCoKAAAAACGGPYLBgAWAP0gAAAAAIMY9gsGABYAsCgAAAAA
kwhnC6UCFgDcKAAAAACTCA4FqwIWAOMoAAAAAJMIGgWxAhYA6ygAAAAAlggYDrgCFwDyKAAAAACG
GPYLBgAXAPooAAAAAJEY/Au9AhcA/SAAAAAAhhj2CwYAFwAGKQAAAACRGPwLvQIXAP0gAAAAAIYY
9gsGABcAAAABALwDEBACADINEBADADwNAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAAB
AOsHAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAABAOsHAAABAI0F
AAABAMIKAAABAOsHAAABAOsHAAABAOsHCQD2CwEAEQD2CwYAGQD2CwoAKQD2CxAAMQD2CxAAOQD2
CxAAQQD2CxAASQD2CxAAUQD2CxAAWQD2CxAAYQD2CxAAcQD2CwYAeQD2CwYAiQD2CwYAkQD2CwYA
mQD2CwYA+QD2CwYAEQH2CwYAMQH2CxUAQQG8DSMAQQHhDioASQG9BS8ASQHEAxAAWQGeADYAWQEG
DTwASQHkBBAASQFbCEIASQFcCUcAYQH5BU0AYQGmBQYASQGaBVUAaQFKCUcAeQH2C1sAgQGuA2IA
gQGmBQYAaQGmBQYAaQD2CwYAiQH2C3wAiQHCDIQAIQH2CxAAQQHpDooA4QDoC40AqQBoDpIAmQHh
B2IAQQFLCJYAoQG0BZsAsQFCCGIAQQHcA6cAqQCbDq0AuQCsBQYAuQH2CwYAuQEHBBAAuQHCABAA
uQHPAxAAwQEtCGIAyQH2CxAAwQD2C9kAwQBIBOAA2QHSBO8A6QH2CwYA6QHDDfgA0QD2C/0AWQEW
BDYA2QD2CwcB8QHhDQ0BiQH2CxAA+QF7CxQBAQK+BB0B+QHvDiYBoQFCCGIA+QHjCDIB+QFJDkIB
MQKrBEwB+QGoA1UB+QG1CGEB+QFdAW0BWQL0BIkBWQL3DbQBWQJ4DtsB4QB0DucBaQJGAOsBaQBC
CGIAcQKVDvABDADhBw0CFAAJDhkCwQC0DAYAQQHkAyoAAQGmDR8CgQIkDgEAAQH2CwYA2QHUDiUC
GQH2CysCOQH2CwYADgAJAAAADgANAAAACABcAEUCCABgAEoCIQBrAEoCKQBzAEoCLgALAOkCLgAT
APICLgAbABEDLgAjABoDLgArAEMDLgAzAEMDLgA7AEMDLgBDABoDLgBLAEkDLgBTAEMDLgBbAGAD
QQBrAEoCSQBzAEoCYABrAEoCYQBrAEoCYwBjAEoCaQBzAEoCgABrAEoCgQBrAEoCgwB7AKoDiQBz
AEoCoABrAEoCoQBrAEoCqQBzAEoCwABrAEoCwQBrAEoCwwBjAEoCyQBzAEoC4ABrAEoC4QBrAEoC
4wCLAEoC6QCDAM4DAAFrAEoCAQFrAEoCAwGTAEoCCQGDAEoCIAFrAEoCIQFrAEoCKQGDAEoCQAFr
AEoCQQFrAEoCQwFrAEoCSQGDAEoCYAFrAEoCYQFrAEoCYwFrAEoCaQGDAEoCgAFrAEoCgQFrAEoC
iQGDAEoCoAFrAEoCoQFrAEoCqQGDAEoCwAFrAEoCwQFrAEoCyQGDAEoC4QFrAEoC6QFzAEoCAAJr
AEoCAQJrAEoCCQJzAEoCIAJrAEoCKQKbABEDQAJrAEoCSQKbABEDYAJrAEoCYQJrAEoCgAJrAEoC
oAJrAEoCwAJrAEoC4AJrAEoCAANrAEoCIANrAEoCQANrAEoCYANrAEoCgANrAEoCoANrAEoCwANr
AEoC4ANrAEoCYARrAEoCgARrAEoCoARrAEoCwARrAEoCHABmALEAAwABAAQABwAGAA8ACAARAAkA
EwAAAMoAwQIAAAYBwQIAAB8BwQIAAEkBwQIAAOcAwQIAAGQAxQIAAAUCzgIAAN0BzgIAANgFwQIA
APwBwQIAAEAEwQIAACQJwQIAAMMLwQIAAEEJwQIAAEIO0gIAAL0OwQIAAGsL2AIAAC4F3gIAABwO
5AICAAMAAwABAAQAAwACAAUABQABAAYABQACAAcABwABAAgABwACAAkACQABAAoACQACAAsACwAB
AAwACwACAA0ADQABAA4ADQACABAADwABABEADwACABIAEQABABMAEQACABQAEwABABUAEwACABYA
FQABABcAFQACABgAFwABABkAFwACABoAGQABABsAGQACABwAGwABAB0AGwACAB4AHQABAB8AHQAC
ACMAHwABACQAHwACACUAIQABACYAIQACACsAIwACACwAJQABAC0AJQACAC4AJwAGAhICBIAAAAEA
AADoHU99AAAAAAAAcAEAAAQAAAAAAAAAAAAAADMClAEAAAAABAAAAAAAAAAAAAAAMwIqCgAAAAAE
AAAAAAAAAAAAAAAzAugKAAAAAAQAAAAAAAAAAAAAADMCfwkAAAAABAAAAAAAAAAAAAAAMwL6BAAA
AAANAAAAAAAAAAAAAAA8Am0IAAAAAAQAAAAAAAAAAAAAADMCZAEAAAAAAAAAAAEAAABZDAAACgAF
AAsABQAMAAcAdQDqAJkAfgGbAOoAmQCoAZ0A1AGfAOoApwD9AQAAAAAAPD5jX19EaXNwbGF5Q2xh
c3MxXzAAVGFibGVgMQBJRW51bWVyYWJsZWAxAElRdWVyeWFibGVgMQBFeHByZXNzaW9uYDEAVG9J
bnQzMgBnZXRfUFJPUEVSVFlfMTI5MgBzZXRfUFJPUEVSVFlfMTI5MgBGdW5jYDIAS2V5VmFsdWVQ
YWlyYDIARGljdGlvbmFyeWAyAEJpdHJpeDI0AGdldF9VVEY4ADw+OQA8TW9kdWxlPgBnZXRfSUQA
c2V0X0lEAHNldF9Vc2VySUQAZ2V0X0NSRUFURURfVVNFUl9OQU1FAHNldF9DUkVBVEVEX1VTRVJf
TkFNRQBnZXRfTkFNRQBzZXRfTkFNRQBnZXRfREFURV9DUkVBVEUAc2V0X0RBVEVfQ1JFQVRFAFN5
c3RlbS5JTwBnZXRfREVUQUlMX1RFWFQAc2V0X0RFVEFJTF9URVhUAHZhbHVlX18ATGFtYmRhAFN5
c3RlbS5EYXRhAFNUXzdlNTk3MDI5NmFjMzQxYjJiYzBkZDRjNzNmMTVhMjJiAG1zY29ybGliADw+
YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBnZXRfaWQAc2V0X2lkAGdldF9lbGVtZW50X2lk
AHNldF9lbGVtZW50X2lkAGdldF9kZWxpdmVyeV9pZABzZXRfZGVsaXZlcnlfaWQAPFBST1BFUlRZ
XzEyOTI+a19fQmFja2luZ0ZpZWxkADxJRD5rX19CYWNraW5nRmllbGQAPE5BTUU+a19fQmFja2lu
Z0ZpZWxkADxDUkVBVEVEX1VTRVJfTkFNRT5rX19CYWNraW5nRmllbGQAPERBVEVfQ1JFQVRFPmtf
X0JhY2tpbmdGaWVsZAA8REVUQUlMX1RFWFQ+a19fQmFja2luZ0ZpZWxkADxpZD5rX19CYWNraW5n
RmllbGQAPGVsZW1lbnRfaWQ+a19fQmFja2luZ0ZpZWxkADxkZWxpdmVyeV9pZD5rX19CYWNraW5n
RmllbGQAPG1lc3NhZ2U+a19fQmFja2luZ0ZpZWxkADxkYXRlX2NyZWF0ZT5rX19CYWNraW5nRmll
bGQAPG1lc3NhZ2VfdXJsPmtfX0JhY2tpbmdGaWVsZAA8dGFza191cmw+a19fQmFja2luZ0ZpZWxk
ADxhdXRob3I+a19fQmFja2luZ0ZpZWxkADxyZXN1bHQ+a19fQmFja2luZ0ZpZWxkADxuZXh0Pmtf
X0JhY2tpbmdGaWVsZABSZWFkVG9FbmQAU2VuZENvbW1hbmQAc2V0X01ldGhvZABzZXRfUGFzc3dv
cmQAUmVwbGFjZQBJc051bGxPcldoaXRlU3BhY2UAZGVmYXVsdEluc3RhbmNlAHNldF9EYXRhU291
cmNlAGdldF9Vbmljb2RlAEJpdHJpeE1lc3NhZ2UAZ2V0X21lc3NhZ2UAc2V0X21lc3NhZ2UAR2V0
VGFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBRdWVyeWFibGUAUnVudGltZUZpZWxkSGFuZGxl
AFJ1bnRpbWVNZXRob2RIYW5kbGUAUnVudGltZVR5cGVIYW5kbGUAR2V0RmllbGRGcm9tSGFuZGxl
AEdldE1ldGhvZEZyb21IYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAc2V0X0NvbnRlbnRUeXBlAFdo
ZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VD
dWx0dXJlAENhcHR1cmUATWV0aG9kQmFzZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UASHR0cFdlYlJlc3BvbnNlAGpzb25SZXNwb25zZQBHZXRSZXNw
b25zZQBDbG9zZQBEaXNwb3NlAFRyeVBhcnNlAENyZWF0ZQBnZXRfZGF0ZV9jcmVhdGUAc2V0X2Rh
dGVfY3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAFdyaXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0
cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVGFibGVBdHRyaWJ1dGUARGVidWdn
YWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJp
YnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUA
Q29sdW1uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAERhdGFNZW1iZXJBdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0
aW9uc0F0dHJpYnV0ZQBEYXRhQ29udHJhY3RBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmli
dXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0
dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRy
aWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAEVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcA
U3lzdGVtLkRhdGEuTGlucS5NYXBwaW5nAGdldF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAFN1
YnN0cmluZwBNYXRjaABzZXRfQ29udGVudExlbmd0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlw
dFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBFcXVhbABTY3Jp
cHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAQ2FsbABTVF83ZTU5NzAyOTZhYzM0
MWIyYmMwZGQ0YzczZjE1YTIyYi5kbGwAZ2V0X21lc3NhZ2VfdXJsAHNldF9tZXNzYWdlX3VybABn
ZXRfdGFza191cmwAc2V0X3Rhc2tfdXJsAEdldFJlc3BvbnNlU3RyZWFtAEdldFJlcXVlc3RTdHJl
YW0ATWVtb3J5U3RyZWFtAGl0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBN
ZXRob2RDYWxsRXhwcmVzc2lvbgBNZW1iZXJFeHByZXNzaW9uAFBhcmFtZXRlckV4cHJlc3Npb24A
Q29uc3RhbnRFeHByZXNzaW9uAEJpbmFyeUV4cHJlc3Npb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
U3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJ1bnRpbWUuU2VyaWFsaXphdGlvbgBTeXN0ZW0u
UmVmbGVjdGlvbgBNYXRjaENvbGxlY3Rpb24ASURiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAFN5
c3RlbS5EYXRhLkNvbW1vbgBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uLkpzb24ARml4SnNv
bgBqc29uAEZpZWxkSW5mbwBNZXRob2RJbmZvAEN1bHR1cmVJbmZvAFN5c3RlbS5EYXRhLkxpbnEA
U3lzdGVtLkxpbnEAQ2hhcgBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBJRm9ybWF0UHJvdmlkZXIA
RGJDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBTcWxDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBnZXRf
UmVzb3VyY2VNYW5hZ2VyAFBhcmFtZXRlcgBEYXRhQ29udHJhY3RKc29uU2VyaWFsaXplcgBYbWxP
YmplY3RTZXJpYWxpemVyAGdldF9hdXRob3IAc2V0X2F1dGhvcgBSZXNwb25zZVByb2Nlc3NvcgBJ
RW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MA
UHJvY2Vzc05ld1JlY29yZHMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0u
UmVzb3VyY2VzAFNUXzdlNTk3MDI5NmFjMzQxYjJiYzBkZDRjNzNmMTVhMjJiLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBtZXNzYWdlcwBTdWJtaXRDaGFuZ2Vz
AE1hdGNoZXMAU1RfN2U1OTcwMjk2YWMzNDFiMmJjMGRkNGM3M2YxNWEyMmIuUHJvcGVydGllcwBO
dW1iZXJTdHlsZXMAR2V0Qnl0ZXMARGF0YUNvbnRyYWN0SnNvblNlcmlhbGl6ZXJTZXR0aW5ncwBH
ZXRQYXJhbXMAUG9zdFBhcmFtcwBTeXN0ZW0uTGlucS5FeHByZXNzaW9ucwBTeXN0ZW0uVGV4dC5S
ZWd1bGFyRXhwcmVzc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAFJlZ2V4T3B0aW9ucwBTdWNjZXNz
AGdldF9EdHMAU2NyaXB0UmVzdWx0cwBDb25jYXQAc2V0X1VzZVNpbXBsZURpY3Rpb25hcnlGb3Jt
YXQAUmVhZE9iamVjdABSb290T2JqZWN0AFNlbGVjdABTeXN0ZW0uTmV0AEluc2VydE9uU3VibWl0
AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AGdldF9yZXN1bHQAc2V0X3Jlc3VsdABDb25zdGFu
dABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AENvbnZlcnQASHR0
cFdlYlJlcXVlc3QARmlyc3QATW92ZU5leHQAU3lzdGVtLlRleHQAZ2V0X25leHQAc2V0X25leHQA
RGF0YUNvbnRleHQAUmVnZXgAZ2V0X0Fzc2VtYmx5AElzTnVsbE9yRW1wdHkAUHJvcGVydHkAAG1o
AHQAdABwAHMAOgAvAC8AYgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBzAHAAbAB1AHMALgByAHUA
LwByAGUAcwB0AC8AMQAvAHMAegB4AGEANABvAGcAbgA1ADMAbQByADUAeAAwAHoALwAACy4AagBz
AG8AbgAAAyYAAAlQAE8AUwBUAABDYQBwAHAAbABpAGMAYQB0AGkAbwBuAC8AeAAtAHcAdwB3AC0A
ZgBvAHIAbQAtAHUAcgBsAGUAbgBjAG8AZABlAGQAASFcAFwAWwBVAF0AWwAwAC0AOQBBAC0AWgBd
AHsANAB9AAELcgB1AC0AUgBVAAE5ewAiAFQAWQBQAEUAIgA6ACIASABUAE0ATAAiACwAIgBUAEUA
WABUACIAOgAiAC4AKgA/ACIAfQAAAyIAAAMnAAEvewAnAFQAWQBQAEUAJwA6ACcASABUAE0ATAAn
ACwAJwBUAEUAWABUACcAOgAnAAEvewAiAFQAWQBQAEUAIgA6ACIASABUAE0ATAAiACwAIgBUAEUA
WABUACIAOgAiAAAFJwB9AAEFIgB9AAA/IgBQAFIARQBWAEkARQBXAF8AVABFAFgAVAAiADoAIgAu
ACoAPwAiACwAIgBUAEkATQBFAFMAVABBAE0AUAAAIScAUABSAEUAVgBJAEUAVwBfAFQARQBYAFQA
JwA6ACcAASEiAFAAUgBFAFYASQBFAFcAXwBUAEUAWABUACIAOgAiAAAZJwAsACcAVABJAE0ARQBT
AFQAQQBNAFAAARkiACwAIgBUAEkATQBFAFMAVABBAE0AUAAAOSIARABFAFQAQQBJAEwAXwBUAEUA
WABUACIAOgAiAC4AKgA/ACIALAAiAFAAUgBFAFYASQBFAFcAAB8nAEQARQBUAEEASQBMAF8AVABF
AFgAVAAnADoAJwABHyIARABFAFQAQQBJAEwAXwBUAEUAWABUACIAOgAiAAAVJwAsACcAUABSAEUA
VgBJAEUAVwABFSIALAAiAFAAUgBFAFYASQBFAFcAAEMiAFAAUgBPAFAARQBSAFQAWQBfAFsAMAAt
ADkAXQB7ADQAfQAiADoAewAiAC4AKgA/ACIAOgAiAC4AKgA/ACIAfQABFScAUABSAE8AUABFAFIA
VABZAF8AARUiAFAAUgBPAFAARQBSAFQAWQBfAAAJJwA6AHsAJwABCSIAOgB7ACIAAAcnADoAJwAB
ByIAOgAiAAAHJwAsACcAAQciACwAIgAAFTEAMAAuADEAMAAuADAALgAyADgAAA9wAGgAcAB1AHMA
ZQByAAARZwBuAFEAQwBVAEUAbABVAAAXWwBEAF0AWwAwAC0AOQBdAHsANgB9AAEDbQAAgI9oAHQA
dABwAHMAOgAvAC8AYgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBzAHAAbAB1AHMALgByAHUALwB3
AG8AcgBrAGcAcgBvAHUAcABzAC8AZwByAG8AdQBwAC8AMwAzADAALwBsAGkAcwB0AHMALwAxADgA
NAAvAGUAbABlAG0AZQBuAHQALwAwAC8AACUvAD8AbABpAHMAdABfAHMAZQBjAHQAaQBvAG4AXwBp
AGQAPQAAgIdoAHQAdABwAHMAOgAvAC8AYgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBzAHAAbAB1
AHMALgByAHUALwB3AG8AcgBrAGcAcgBvAHUAcABzAC8AZwByAG8AdQBwAC8AMwAzADAALwB0AGEA
cwBrAHMALwB0AGEAcwBrAC8AdgBpAGUAdwAvAAADLwAAI2wAaQBzAHQAcwAuAGUAbABlAG0AZQBu
AHQALgBnAGUAdAAAAQCAqUkAQgBMAE8AQwBLAF8AVABZAFAARQBfAEkARAA9AGwAaQBzAHQAcwBf
AHMAbwBjAG4AZQB0ACYAUwBPAEMATgBFAFQAXwBHAFIATwBVAFAAXwBJAEQAPQAzADMAMAAmAEkA
QgBMAE8AQwBLAF8ASQBEAD0AMQA4ADQAJgBFAEwARQBNAEUATgBUAF8ATwBSAEQARQBSAFsASQBE
AF0APQBEAEUAUwBDAABxUwBUAF8ANwBlADUAOQA3ADAAMgA5ADYAYQBjADMANAAxAGIAMgBiAGMA
MABkAGQANABjADcAMwBmADEANQBhADIAMgBiAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBz
AG8AdQByAGMAZQBzAAAAAGnzyD9mEWVMsoL8VhYXSN8ABCABAQgDIAABBSABARERBCABAQ4GIAEB
EYCVBgcDDh0FDgYAAw4ODg4EAAECDgYAARKApQ4FAAASgK0FIAEdBQ4EIAEBCgUgABKAsQcgAwEd
BQgIBSAAEoC1BiABARKAsQMgAA4VBwsSUQ4SVRJZCAMSXRJZElkSWRJZByACAQ4RgMkFIAEScQ4C
Bg4EIAASVQMgABwEIAEOCAsABAIOEYDVElEQCAUgAg4ODgMgAAInBw8SYRUSZQESEBJpEm0SGB0S
DAgSKBJxCBJ1ElUSWRUReQIODhJdBiABARKA6QkwAQAVEmUBHgAECgESEAgAARKA7RGA8QQgAQEC
CSACARKA7RKA9QUgAQEdBQYgARwSgLEIAAISdRKA7Q4IAAESgQERgQULAAISgQ0SgP0SgQkPAAMS
gRESgP0SgQkdEoD9CQACEoEVHBKA7QgAARKBGRGBHQsAAhKBDRKA/RKBGQsAAhKBIRKA/RKA/RAQ
AQIVEoEpAR4AEoD9HRJ1CgoBFRKBJQISEAIeEAECFRKBMQEeABUSgTEBHgAVEoEpARUSgSUCHgAC
CwoBFRKBJQISEBIQHxACAhUSgTEBHgEVEoExAR4AFRKBKQEVEoElAh4AHgEGCgISEBIQCxABAQgV
EoExAR4AAyAACAQAAQgODBABAR4AFRKBPQEeAAgKARUReQIODgYVEXkCDg4EIAATAQYVEmUBEhAF
IAEBEwAFIAASgUEFIAASgUUHIAIBDhKBRQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAHBhUS
QQIODgIGCAQGHRIMBAYSgI0EBhKAkQMGEiQDBhIMAwYSLAMGETAGIAMODg4OCCAAFRJBAg4OCSAB
ARUSQQIODgQAAQ4OBSAAHRIMBiABAR0SDAUAABKAjQUAABKAkQYAAQESgJEEAAASJAMAAAEDKAAO
CCgAFRJBAg4OAygACAUoAB0SDAUIABKAjQUIABKAkQQIABIkCAEACAAAAAAAHgEAAQBUAhZXcmFw
Tm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF83ZTU5NzAyOTZhYzM0MWIyYmMwZGQ0
YzczZjE1YTIyYgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIwAABJAQAaLk5FVEZyYW1ld29y
ayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQu
NSMBAAEAVA4ETmFtZRdhYmVycmF0aW9uLmRiby5saXN0XzMzMCUBAAIAVAINSXNEYkdlbmVyYXRl
ZAFUAgxJc1ByaW1hcnlLZXkBtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291
cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAERRAAAAAAAAAAAAAF5RAAAAIAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABQUQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/
JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAA
AAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
T33oHQAAAQBPfegdPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgAB
AAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAA
AAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA3AGUANQA5
ADcAMAAyADkANgBhAGMAMwA0ADEAYgAyAGIAYwAwAGQAZAA0AGMANwAzAGYAMQA1AGEAMgAyAGIA
AAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA2ADUANgAuADMAMgAw
ADcAOQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3AGUANQA5ADcA
MAAyADkANgBhAGMAMwA0ADEAYgAyAGIAYwAwAGQAZAA0AGMANwAzAGYAMQA1AGEAMgAyAGIALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBz
AAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADcA
ZQA1ADkANwAwADIAOQA2AGEAYwAzADQAMQBiADIAYgBjADAAZABkADQAYwA3ADMAZgAxADUAYQAy
ADIAYgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3AGUA
NQA5ADcAMAAyADkANgBhAGMAMwA0ADEAYgAyAGIAYwAwAGQAZAA0AGMANwAzAGYAMQA1AGEAMgAy
AGIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANgA1ADYA
LgAzADIAMAA3ADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADcANgA1ADYALgAzADIAMAA3ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAcDEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Объединение в общий источник"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{2E354A7C-820F-4C35-BEF7-BCAF6750DA48}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Объединение в общий источник"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
          SQLTask:SqlStatementSource="INSERT INTO [aberration].[dbo].[messages_330]&#xA;           ([bitrix_message_id]&#xA;           ,[date_publish]&#xA;           ,[delivery_id]&#xA;           ,[message]&#xA;           ,[detail]&#xA;           ,[blog_id]&#xA;           ,[author_id]&#xA;           ,[message_url])&#xA;&#x9; SELECT [bitrix_message_id]&#xA;&#x9;&#x9;  ,[date_publish]&#xA;&#x9;&#x9;  ,[delivery_id]&#xA;&#x9;&#x9;  ,[message]&#xA;&#x9;&#x9;  ,[detail]&#xA;&#x9;&#x9;  ,[blog_id]&#xA;&#x9;&#x9;  ,[author_id]&#xA;&#x9;&#x9;  ,[message_url]&#xA;&#x9;  FROM [aberration].[dbo].[only_messages_330] msg&#xA;&#x9;  WHERE author_id = 1716 &#xA;&#x9;  AND NOT EXISTS (&#xA;&#x9;  SELECT 0 FROM [aberration].[dbo].[messages_330] every&#xA;&#x9;  WHERE every.author_id = 1716 AND every.bitrix_message_id = msg.bitrix_message_id&#xA;&#x9;  )&#xA;GO&#xA;INSERT [aberration].[dbo].[messages_330]&#xA;           ([bitrix_message_id]&#xA;           ,[date_publish]&#xA;           ,[delivery_id]&#xA;           ,[message]&#xA;           ,[detail]&#xA;           ,[blog_id]&#xA;           ,[author_id]&#xA;           ,[message_url]&#xA;           ,[list_id]&#xA;&#x9;&#x9;   ,[task_url])     &#xA;&#x9; SELECT &#xA;&#x9;   [element_id] [bitrix_message_id]&#xA;      ,COALESCE([date_create], '') [date_publish]&#xA;&#x9;  ,[delivery_id]   &#xA;      ,COALESCE([message], 'описание отклонения не указано') [message]&#xA;      ,COALESCE([message], '') [detail]&#xA;&#x9;  ,0 [blog_id]&#xA;&#x9;  ,0 [author_id]&#xA;&#x9;  ,[message_url]&#xA;&#x9;  ,[element_id] [list_id]   &#xA;&#x9;  ,[task_url]&#xA;  FROM [aberration].[dbo].[list_330] l&#xA;  WHERE NOT EXISTS (SELECT 0 FROM [aberration].[dbo].[messages_330] m&#xA;  WHERE m.list_id = l.element_id)&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение]"
      DTS:CreationName=""
      DTS:DTSID="{86A3843D-E43D-4774-AE8D-BF4FC082EB85}"
      DTS:From="Package\Загрузка и обновление базы сообщений об отклонениях"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение"
      DTS:To="Package\Загрузка реестра отклонений" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 1]"
      DTS:CreationName=""
      DTS:DTSID="{A5788B3E-B761-4092-BA1C-698EEF2E81B8}"
      DTS:From="Package\Загрузка реестра отклонений"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 1"
      DTS:To="Package\Объединение в общий источник" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--В данном разделе CDATA содержатся сведения о макете пакета. В данном разделе содержатся сведения о координатах (x,y), ширине и высоте.-->
<!--В случае возникновения ошибки при редактировании этого раздела вручную его можно удалить. -->
<!--Пакет можно загрузить обычным образом, но прежние сведения о макете будут утеряны, и конструктор автоматически перераспределит элементы в области конструктора.-->
<Objects
  Version="8">
  <!--Все приведенные ниже узлы будут содержать свойства, не влияющие на поведение среды выполнения.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="358,42"
          Id="Package\Загрузка и обновление базы сообщений об отклонениях"
          TopLeft="257,187" />
        <NodeLayout
          Size="224,42"
          Id="Package\Загрузка реестра отклонений"
          TopLeft="325,264" />
        <NodeLayout
          Size="238,42"
          Id="Package\Объединение в общий источник"
          TopLeft="323,339" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение]"
          TopLeft="436.5,229">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35"
              Start="0,0"
              End="0,27.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 1]"
          TopLeft="439.5,306">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33"
              Start="0,0"
              End="0,25.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>