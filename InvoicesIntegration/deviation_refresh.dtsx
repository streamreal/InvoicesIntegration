<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/2/2020 6:06:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ETP025"
  DTS:CreatorName="ELTRANSPLUS\andreydruzhinin"
  DTS:DTSID="{0E750AA6-B6ED-4B1A-A03C-C422BB6B8627}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1049"
  DTS:ObjectName="Package2"
  DTS:PackageType="5"
  DTS:VersionBuild="5"
  DTS:VersionGUID="{532C48AC-69A9-47A9-8513-8C71457614B1}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Загрузка и обновление базы сообщений об отклонениях"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{6BF5FA1E-9395-4763-8F47-068F6F6DB22F}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка и обновление базы сообщений об отклонениях"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_23ff863071574b32b7711770e05366fa"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Settings.get_Default():ST_23ff863071574b32b7711770e05366fa.Properties.Sett" +
    "ings")]

namespace ST_23ff863071574b32b7711770e05366fa.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_23ff863071574b32b7711770e05366fa</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_23ff863071574b32b7711770e05366fa</msb:DisplayName>
		<msb:ProjectId>{96CFAD18-7A59-4A23-A7E7-3693283CA20E}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_23ff863071574b32b7711770e05366fa.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="messages.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BitrixMessage.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="ResponseProcessor.cs"/>
		<msb:File Include="RootObject.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="ST_23ff863071574b32b7711770e05366fa.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8C1C04CF-7830-4F64-8533-13AA38EB04AB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_23ff863071574b32b7711770e05366fa</RootNamespace>
    <AssemblyName>ST_23ff863071574b32b7711770e05366fa</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="BitrixMessage.cs" />
    <Compile Include="messages.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ResponseProcessor.cs" />
    <Compile Include="RootObject.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_23ff863071574b32b7711770e05366fa")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_23ff863071574b32b7711770e05366fa")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="RootObject.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [DataContract]
    public class RootObject
    {
        [DataMember]
        public BitrixMessage[] result { get; set; }
        [DataMember]
        public string next { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;

namespace ST_23ff863071574b32b7711770e05366fa
{   
    class Bitrix24
    {
        //боевой
        private const string BX_ClientID = "local.5e8255b199d0e7.70800677";
        private const string BX_ClientSecret = "730hvSv5yrgmVv0gcwkxUz2ATaGGIx0fZmuOXMQjSkehKaFzMz";
        private const string BX_Portal = "https://bitrix.eltransplus.ru";

        //битест
        //private const string BX_ClientID = "local.5e834c45530933.17923150"; 
        //private const string BX_ClientSecret = "lBA05N9gi8dw3sVX4A7V7R7oSqY5EU0L779BZNi0TGutrIzVFh";
        //private const string BX_Portal = "https://bitest.eltransplus.ru"; 


        private const string BX_OAuthSite = "https://oauth.bitrix.info";
        private string AccessToken;
        private string RefreshToken;
        private DateTime RefreshTime;
        private string Code;
        private string Cookie;

        public Bitrix24()
        {
            Connect();
        }

        private void Connect()
        {
            //Создание HTTP подключения
            string BX_URI = BX_Portal + "/oauth/authorize/?client_id=" + BX_ClientID;
            HttpWebRequest requestLogonBitrix24 = (HttpWebRequest)WebRequest.Create(BX_URI);

            //Логин и пароль администратора, под которым будут выполняться запросы
            string username = "andreydruzhinin@eltransplus.ru";
            string password = "J4e3Yv";

            //Настройка запроса
            string svcCredentials = Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(username + ":" + password));
            requestLogonBitrix24.Headers.Add("Authorization", "Basic " + svcCredentials);
            requestLogonBitrix24.AllowAutoRedirect = false; //обязательное условие, чтобы не было автоматической переадресации на другую страницу (теряются пользовательские сведения об авторизации)
            requestLogonBitrix24.Method = "POST";            
 
            HttpWebResponse responseLogonBitrix24 = (HttpWebResponse)requestLogonBitrix24.GetResponse();

            //Проверяем что статус-код 302, должны предложить переадресацию, иначе авторизация не требуется, мы и так авторизированы
            if (responseLogonBitrix24.StatusCode == HttpStatusCode.Found)
            {
                //Получаем из заголовков ответа Куки и параметры адреса переадресации (из поля "Location"), параметр Code
                Uri locationURI = new Uri(responseLogonBitrix24.Headers["Location"]);

                //Получаем параметры из строки ответа (нужен System.Web)
                var locationParams = HttpUtility.ParseQueryString(locationURI.Query);
                Cookie = responseLogonBitrix24.Headers["Set-Cookie"];
                Code = locationParams["Code"];

                //Вызываем исключение, если Код мы не смогли получить, без него далее никак.
                if (String.IsNullOrEmpty(Code))
                {
                    throw new FormatException("CodeNotFound");
                }

                //Закрываем подключение
                responseLogonBitrix24.Close();

                //Если код успешно получили, то формируем новый HTTP запрос для получения Токенов авторизации
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=authorization_code" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "code=" + Code;
                SetToken(BX_OAuth_URI);
            }

        }

        //Закрытый метод для получения и записи Токенов авторизации
        private void SetToken(string BX_OAuth_URI)
        {
            //Формируем новый HTTP запрос для получения Токенов авторизации
            HttpWebRequest requestLogonBitrixOAuth = (HttpWebRequest)WebRequest.Create(BX_OAuth_URI);
            requestLogonBitrixOAuth.Method = "POST";
            requestLogonBitrixOAuth.Headers["Cookie"] = Cookie; //Используем Куки полученный в предыдущем запросе авторизации

            //Подключаемся (отправляем запрос)
            HttpWebResponse responseLogonBitrixOAuth = (HttpWebResponse)requestLogonBitrixOAuth.GetResponse();

            //Если в ответ получаем статус-код отличный от 200, то это ошибка, вызываем исключение
            if (responseLogonBitrixOAuth.StatusCode != HttpStatusCode.OK)
            {
                throw new FormatException("ErrorLogonBitrixOAuth");
            }
            else
            {
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(objLogonBitrixOAuth));
                objLogonBitrixOAuth objLogonBitrixOAuth;

                using (Stream st = responseLogonBitrixOAuth.GetResponseStream())
                {
                    objLogonBitrixOAuth = (objLogonBitrixOAuth)deserializer.ReadObject(st);
                }

                //Записывем Токены авторизации в поля
                AccessToken = objLogonBitrixOAuth.access_token;
                RefreshToken = objLogonBitrixOAuth.refresh_token;
                RefreshTime = DateTime.Now.AddSeconds(Convert.ToDouble(objLogonBitrixOAuth.expires_in)); //Добавляем к текущей дате количество секунд действия токена, обычно это плюс один час
            }
        }

        //Закрытый метод для обновления Токенов авторизации, если истекло время их действия
        private void RefreshTokens()
        {
            if (RefreshTime == DateTime.MinValue) // Если RefreshTime пустая
            {
                //Тогда вызываем авторизацию по полной программе
                Connect();
                return;
            }

            //Проверяем, если истекло время действия Токена авторизации, то обновляем его
            if (RefreshTime.AddSeconds(-5) < DateTime.Now)
            {
                //Формируем новый HTTP запрос для обновления Токена авторизации, здесь Code уже не нужен
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=refresh_token" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "refresh_token=" + RefreshToken;
                SetToken(BX_OAuth_URI);
            }
        }

        //Открытый метод для отправки REST-запросов в Битрикс24
        public string SendCommand(string Command, string GetParams = "", string PostParams = "")
        {
            //Проверяем и обновлем Токены авторизации
            RefreshTokens();

            //Проверяем возможное указание параметров
            string BX_REST_URI = BX_Portal + "/rest/" + Command + "?auth=" + AccessToken;
            
            if (String.IsNullOrEmpty(GetParams) == false)
            {
                BX_REST_URI = BX_REST_URI + "&" + GetParams;
            }        

            //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
            HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
            requestBitrixREST.Method = "POST";
            requestBitrixREST.Accept = "application/json";
            requestBitrixREST.Headers["Cookie"] = Cookie; //Используем Куки полученный в запросе авторизации

            //Готовим тело запроса и вставляем его в тело POST-запроса  
            byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);         
            requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
            requestBitrixREST.ContentLength = byteArrayBody.Length;

            Stream dataBodyStream = requestBitrixREST.GetRequestStream();
            dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
            dataBodyStream.Close();

            //Отправляем данные в Битрикс24
            HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

            //Читаем тело ответа от Битрикс24
            Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
            var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
            string stringBitrixREST = readerBitrixREST.ReadToEnd();

            //Закрываем все подключения и потоки
            readerBitrixREST.Close();
            dataStreamBitrixREST.Close();
            responseBitrixREST.Close();

            //Возвращаем строку ответа в формате JSON
            return stringBitrixREST;
        }

        [DataContract]
        public class objLogonBitrixOAuth
        {
            [DataMember]
            public string expires_in { get; set; }
            [DataMember]
            public string refresh_token { get; set; }
            [DataMember]
            public string access_token { get; set; }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_23ff863071574b32b7711770e05366fa.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_23ff863071574b32b7711770e05366fa.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_23ff863071574b32b7711770e05366fa
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            Bitrix24 bx_logon = new Bitrix24();

            //общая выгрузка сообщений заняла 26 минут
            //данные возвращаются по 50 сообщений начиная с самых последних
            //расчет на работу скрипта ежечасно. забирает последние 50 сообщений одним запросом и сопоставляет с базой            
            string jsonResponse = bx_logon.SendCommand("log.blogpost.get", "LOG_RIGHTS[0]=SG330&start=0");
            jsonResponse = ResponseProcessor.FixJson(jsonResponse);
            _ = ResponseProcessor.ProcessNewRecords(jsonResponse);
            
            /*
            int start = 0;         
            do
            {
                string jsonResponse = bx_logon.SendCommand("log.blogpost.get", "LOG_RIGHTS[0]=SG330&start=" + start.ToString());
                jsonResponse = ResponseProcessor.FixJson(jsonResponse);
                start = ResponseProcessor.ProcessNewRecords(jsonResponse);

            } while (start > 0);
            */

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="BitrixMessage.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [DataContract]
    public class BitrixMessage
    {
        [DataMember]
        public string ID { get; set; }
        [DataMember]
        public string BLOG_ID { get; set; }
        [DataMember]
        public string TITLE { get; set; }
        [DataMember]
        public string AUTHOR_ID { get; set; }
        [DataMember]
        public string DETAIL_TEXT { get; set; }
        [DataMember]
        public string DATE_PUBLISH { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ResponseProcessor.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;

namespace ST_23ff863071574b32b7711770e05366fa
{
    class ResponseProcessor
    {
        //метод переводит Unicode-символы из ответа в читаемый вид
        //исправляет лишние двойные кавычки в элементах TITLE и DETAIL_TEXT
        public static string FixJson(string jsonResponse)
        {
            Regex regex = new Regex(@"\\[U][0-9A-Z]{4}", RegexOptions.IgnoreCase);
            MatchCollection m = regex.Matches(jsonResponse);
            IFormatProvider prov = new CultureInfo("ru-RU");
            string temp = string.Empty;

            foreach (Match match in m)
            {
                if (int.TryParse(match.Value.Substring(2), NumberStyles.HexNumber, prov, out int output) == true)
                {
                    char c = (char)output;
                    jsonResponse = jsonResponse.Replace(match.Value, c.ToString());
                }
            }

            regex = new Regex("[T][I][T][L][E][\"][:][\"].*?[\"][,][\"][A][U][T][H][O][R][_][I][D]", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("TITLE':'", "TITLE\":\"");
                temp = temp.Replace("','AUTHOR_ID", "\",\"AUTHOR_ID");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("[D][E][T][A][I][L][_][T][E][X][T][\"][:][\"].*?[\"][,][\"][D][A][T][E]", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("DETAIL_TEXT':'", "DETAIL_TEXT\":\"");
                temp = temp.Replace("','DATE", "\",\"DATE");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            return jsonResponse;
        }

        //метод десериализует JSON, проверяет наличие записи в базе и добавляет новые записи
        //возвращаемое значение соответствует указателю для повторного запроса следующих записей или 0 если достигнут конец
        public static int ProcessNewRecords(string json)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            IDbConnection connection = new SqlConnection(connBuilder.ConnectionString);

            DataContext db = new DataContext(connection);
            Table<messages> msg = db.GetTable<messages>();

            DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(RootObject));

            using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                var result = (RootObject)deserializer.ReadObject(ms);

                foreach (var item in result.result)
                {
                    Regex reg = new Regex("[D][0-9]{6}");
                    Match match = reg.Match(item.TITLE + item.DETAIL_TEXT);
                    int count = msg.Where(m => m.bitrix_message_id.ToString() == item.ID && m.author_id.ToString() == item.AUTHOR_ID).Select(m => m).Count();

                    if (match.Success == true && count == 0)
                    {
                        msg.InsertOnSubmit(new messages
                        {
                            bitrix_message_id = Convert.ToInt32(item.ID),
                            date_publish = item.DATE_PUBLISH,
                            delivery_id = match.Value,
                            message = item.TITLE,
                            detail = item.DETAIL_TEXT,
                            message_url = @"https://bitrix.eltransplus.ru/company/personal/user/" + item.AUTHOR_ID + @"/blog/" + item.ID + @"/",
                            blog_id = Convert.ToInt32(item.BLOG_ID),
                            author_id = Convert.ToInt32(item.AUTHOR_ID)
                        });                      
                    }
                }

                db.SubmitChanges();

                if (String.IsNullOrWhiteSpace(result.next) == false)
                {
                    return Convert.ToInt32(result.next);
                }
                else
                {
                    return 0;
                }
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="messages.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Data.Linq.Mapping;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [Table(Name = "aberration.dbo.messages_330")]
    public class messages
    {
        [Column(IsDbGenerated = true, IsPrimaryKey = true)]
        public int id { get; set; }
        [Column]
        public int bitrix_message_id { get; set; }
        [Column]
        public string date_publish { get; set; }
        [Column]
        public string delivery_id { get; set; }
        [Column]
        public string message { get; set; }
        [Column]
        public string detail { get; set; }
        [Column]
        public string message_url { get; set; }
        [Column]
        public int blog_id { get; set; }
        [Column]
        public int author_id { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_23ff863071574b32b7711770e05366fa.dll">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
/Q0QAEEA/Q0QAEkA/Q0QAFEA/Q0QAFkA/Q0QAGEA/Q0QAJkA/Q0GAKEA/Q0GAKkA/Q0GALEA/Q0G
ALkA/Q0GAAEB/Q0GABkB/Q0GADkB/Q0VAGkA/Q0GAEkBmgYnAFkB9QAuAGEB0g80AFkBGA87AGkB
AAlBAEkBpA9HAGEB0g9NAIEAjQFTAFEB/g9ZAEkBaQQQAEkBdwZeAHkAuwRkAHkBpA9HAIEArQpq
AIkB/Q0QAIkBEBFvAJEBLQlzAGEBMhF5AJkB/Q0QAHkBgwYGAIEAtgpTAKEBmgWLAIkA/Q2UAHkB
fQqbALEB2Q+gANkAiQYGAHEA9RCmAGkBMQWrAHEAHQ6wAHEAtQi6AHEAGhG+AHEA3Aq+AGEB0g/N
AFEBoBAQAFkBUAAuAEkBwQUQAEkBcAnVAEkBjwqbAJEAwwbaAJEAgwYGALkB/Q3iAMEBUwRvAMEB
gwYGAMkB/Q36AMkB1A4CASkB/Q0QAGEBOhEJAdkB7w0MAckAjhARAeEBqwhvAGEBPgkVAekBkQYa
AfkBJAlvAGEBgQQmAckAwhAsAQEC/Q0GAAECrAQQAAECqAAQAAECdAQQAAkCDwlvABEC/Q0QAOEA
/Q1OAeEAEgVVAVkB2QQuAPEA/Q1kAckB/Q0QAMkBSAlqASECmA1wASkChgV5ASECQBGCAekBJAlv
ACECMAqOASECbxCeAVkCcwWoASECTQSxASEC7Am9ASEC9wy9ASECPgHJAYEC0QXlAYEC7w8QAoEC
mhA3ApECsA8sAWkBOABDAmEB0g9IAgwALxBVAuEAxg4GAGEBiQR5AAkBvA9bApkCShABAAkB/Q0G
AKEBAxFhAiEB/Q1nAkEB/Q0GAA4ABACKAg4ACADFAg4ADAAqAw4ADQAAAA4AEABlAw4AEQAAAAgA
kACYAwgAlACdAykAcwCdAy4ACwAcBC4AEwAlBC4AGwBEBC4AIwBNBC4AKwB2BC4AMwB2BC4AOwB2
BC4AQwBNBC4ASwB8BC4AUwB2BC4AWwCTBEkAcwCdA2MAYwCdA2kAcwCdA4MAewDdBIkAcwCdA6kA
cwCdA8AAawCdA8MAYwCdA8kAcwCdA+AAawCdA+MAiwCdA+kAgwAFBQABawCdAwMBkwCdAwkBgwCd
AyABawCdAykBgwCdA0ABawCdA0EBawCdA0MBYwCdA0kBgwCdA2ABawCdA2EBawCdA2MBawCdA2kB
gwCdA4ABawCdA4EBawCdA4MBawCdA4kBgwCdA6ABawCdA6EBawCdA6kBgwCdA8ABawCdA8EBawCd
A8kBgwCdA+ABawCdA+EBawCdA+kBgwCdAwACawCdAwECawCdAwkCcwCdAyACawCdAyECawCdAykC
cwCdA0ECawCdA0kCmwBEBGACawCdA2ECawCdA2kCmwBEBIACawCdA4ECawCdA6ACawCdA6ECawCd
A6kCcwCdA8ACawCdA8ECawCdA8kCcwCdA+ACawCdA+ECawCdA+kCcwCdAwADawCdAwEDawCdAyAD
awCdAyEDawCdA0ADawCdA0EDawCdA2ADawCdA4ADawCdA6ADawCdA6EDawCdA8ADawCdA8EDawCd
A+ADawCdA+EDawCdAwAEawCdAwEEawCdAyAEawCdA0AEawCdA2AEawCdA4AEawCdAyAFawCdA0AF
awCdA2AFawCdA4AFawCdA+AGawCdAwAHawCdAyAHawCdA0AHawCdA2AHawCdA4AHawCdAxwAfgC2
AMYA6AAwAQMAAQAEAAcABgAQAAgAEgAJABQACgAVAAAAvAD9AwAAdgD9AwAAzQD9AwAAkAD9AwAA
KgH9AwAA6AD9AwAAOwIBBAAAygEBBAAAYwn9AwAAMgL9AwAAAwX9AwAAKQr9AwAAcQr9AwAA7AEB
BAAABgIBBAAAaBAFBAAA5BD9AwAAiA0LBAAACwYRBAAAQhAXBAAAYwv9AwAAIAv9AwAAQwv9AwIA
BgADAAEABwADAAIACAAFAAEACQAFAAIACgAHAAEACwAHAAIADAAJAAEADQAJAAIADgALAAEADwAL
AAIAEAANAAEAEQANAAIAEwAPAAEAFAAPAAIAFQARAAEAFgARAAIAFwATAAEAGAATAAIAGQAVAAEA
GgAVAAIAGwAXAAEAHAAXAAIAHQAZAAEAHgAZAAIAHwAbAAEAIAAbAAIAIQAdAAEAIgAdAAIAIwAf
AAEAJAAfAAIAKQAhAAEAKgAhAAIAKwAjAAEALAAjAAIAMQAlAAIAMgAnAAEAMwAnAAIANAApAAIA
NwArAAEAOAArAAIAOQAtAAEAOgAtAAIAOwAvAAEAPAAvAE4CBIAAAAEAAADmHPNHAAAAAAAARQEA
AAQAAAAAAAAAAAAAAG8CgAEAAAAABAAAAAAAAAAAAAAAbwLECgAAAAAEAAAAAAAAAAAAAABvAgEM
AAAAAAQAAAAAAAAAAAAAAG8CBQ0AAAAABAAAAAAAAAAAAAAAbwLXBQAAAAANAAAAAAAAAAAAAAB4
ApoJAAAAAAQAAAAAAAAAAAAAAIECdQEAAAAABAAAAAAAAAAAAAAAbwJpAQAAAAAAAAAAAQAAAGsO
AAAKAAIACwAFAAwABQANAAcApwBfAcUA2gHHAF8BxQAEAskAMALLAF8BAAAAAAA8PmNfX0Rpc3Bs
YXlDbGFzczFfMABUYWJsZWAxAElRdWVyeWFibGVgMQBFeHByZXNzaW9uYDEAVG9JbnQzMgBGdW5j
YDIAQml0cml4MjQAZ2V0X1VURjgAPD45ADxNb2R1bGU+AGdldF9CTE9HX0lEAHNldF9CTE9HX0lE
AGdldF9BVVRIT1JfSUQAc2V0X0FVVEhPUl9JRABnZXRfSUQAc2V0X0lEAHNldF9Vc2VySUQAQlhf
Q2xpZW50SUQAZ2V0X1RJVExFAHNldF9USVRMRQBnZXRfREFURV9QVUJMSVNIAHNldF9EQVRFX1BV
QkxJU0gAZ2V0X0FTQ0lJAEJYX09BdXRoX1VSSQBTeXN0ZW0uSU8AZ2V0X0RFVEFJTF9URVhUAHNl
dF9ERVRBSUxfVEVYVAB2YWx1ZV9fAExhbWJkYQBTVF8yM2ZmODYzMDcxNTc0YjMyYjc3MTE3NzBl
MDUzNjZmYQBTeXN0ZW0uRGF0YQBTeXN0ZW0uV2ViAG1zY29ybGliADw+YwBBZGQAU3lzdGVtLkNv
bGxlY3Rpb25zLlNwZWNpYWxpemVkAGdldF9iaXRyaXhfbWVzc2FnZV9pZABzZXRfYml0cml4X21l
c3NhZ2VfaWQAZ2V0X2Jsb2dfaWQAc2V0X2Jsb2dfaWQAZ2V0X2F1dGhvcl9pZABzZXRfYXV0aG9y
X2lkAGdldF9pZABzZXRfaWQAZ2V0X2RlbGl2ZXJ5X2lkAHNldF9kZWxpdmVyeV9pZAA8SUQ+a19f
QmFja2luZ0ZpZWxkADxCTE9HX0lEPmtfX0JhY2tpbmdGaWVsZAA8QVVUSE9SX0lEPmtfX0JhY2tp
bmdGaWVsZAA8VElUTEU+a19fQmFja2luZ0ZpZWxkADxEQVRFX1BVQkxJU0g+a19fQmFja2luZ0Zp
ZWxkADxERVRBSUxfVEVYVD5rX19CYWNraW5nRmllbGQAPGlkPmtfX0JhY2tpbmdGaWVsZAA8Yml0
cml4X21lc3NhZ2VfaWQ+a19fQmFja2luZ0ZpZWxkADxibG9nX2lkPmtfX0JhY2tpbmdGaWVsZAA8
YXV0aG9yX2lkPmtfX0JhY2tpbmdGaWVsZAA8ZGVsaXZlcnlfaWQ+a19fQmFja2luZ0ZpZWxkADxt
ZXNzYWdlPmtfX0JhY2tpbmdGaWVsZAA8ZGF0ZV9wdWJsaXNoPmtfX0JhY2tpbmdGaWVsZAA8ZGV0
YWlsPmtfX0JhY2tpbmdGaWVsZAA8bWVzc2FnZV91cmw+a19fQmFja2luZ0ZpZWxkADxyZWZyZXNo
X3Rva2VuPmtfX0JhY2tpbmdGaWVsZAA8YWNjZXNzX3Rva2VuPmtfX0JhY2tpbmdGaWVsZAA8ZXhw
aXJlc19pbj5rX19CYWNraW5nRmllbGQAPHJlc3VsdD5rX19CYWNraW5nRmllbGQAPG5leHQ+a19f
QmFja2luZ0ZpZWxkAFJlYWRUb0VuZABTZW5kQ29tbWFuZABzZXRfTWV0aG9kAHNldF9QYXNzd29y
ZABSZXBsYWNlAElzTnVsbE9yV2hpdGVTcGFjZQBkZWZhdWx0SW5zdGFuY2UAc2V0X0RhdGFTb3Vy
Y2UAZ2V0X1N0YXR1c0NvZGUASHR0cFN0YXR1c0NvZGUAZ2V0X1VuaWNvZGUAQml0cml4TWVzc2Fn
ZQBnZXRfbWVzc2FnZQBzZXRfbWVzc2FnZQBDb29raWUAR2V0VGFibGUASURpc3Bvc2FibGUAUXVl
cnlhYmxlAFRvRG91YmxlAFJ1bnRpbWVGaWVsZEhhbmRsZQBSdW50aW1lTWV0aG9kSGFuZGxlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldEZpZWxkRnJvbUhhbmRsZQBHZXRNZXRob2RGcm9tSGFuZGxlAEdl
dFR5cGVGcm9tSGFuZGxlAERhdGVUaW1lAFJlZnJlc2hUaW1lAHNldF9Db250ZW50VHlwZQBXaGVy
ZQBTeXN0ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBDYXB0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxp
Y2F0aW9uU2V0dGluZ3NCYXNlAEh0dHBXZWJSZXNwb25zZQBqc29uUmVzcG9uc2UAR2V0UmVzcG9u
c2UAQ2xvc2UARGlzcG9zZQBUcnlQYXJzZQBDcmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQlhf
T0F1dGhTaXRlAFdyaXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUAVGFibGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JC
cm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFy
a0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQ29sdW1uQXR0cmlidXRlAEFzc2Vt
Ymx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAERh
dGFNZW1iZXJBdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBEYXRhQ29u
dHJhY3RBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAE1pblZh
bHVlAHZhbHVlAEVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3lzdGVtLkRhdGEu
TGlucS5NYXBwaW5nAFRvQmFzZTY0U3RyaW5nAGdldF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5n
AFBhcnNlUXVlcnlTdHJpbmcAU3Vic3RyaW5nAE1hdGNoAGdldF9kYXRlX3B1Ymxpc2gAc2V0X2Rh
dGVfcHVibGlzaABzZXRfQ29udGVudExlbmd0aABvYmpMb2dvbkJpdHJpeE9BdXRoAFVyaQBNaWNy
b3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3Mu
U2NyaXB0VGFzawBCWF9Qb3J0YWwARXF1YWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBv
bmVudE1vZGVsAGdldF9kZXRhaWwAc2V0X2RldGFpbABDYWxsAFNUXzIzZmY4NjMwNzE1NzRiMzJi
NzcxMTc3MGUwNTM2NmZhLmRsbABnZXRfbWVzc2FnZV91cmwAc2V0X21lc3NhZ2VfdXJsAEdldFJl
c3BvbnNlU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0ATWVtb3J5U3RyZWFtAGdldF9JdGVtAHNldF9J
dGVtAGl0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4Ab3BfTGVzc1RoYW4AUmVmcmVzaFRva2Vu
AEFjY2Vzc1Rva2VuAFNldFRva2VuAGdldF9yZWZyZXNoX3Rva2VuAHNldF9yZWZyZXNoX3Rva2Vu
AGdldF9hY2Nlc3NfdG9rZW4Ac2V0X2FjY2Vzc190b2tlbgBnZXRfZXhwaXJlc19pbgBzZXRfZXhw
aXJlc19pbgBTY3JpcHRNYWluAE1ldGhvZENhbGxFeHByZXNzaW9uAE1lbWJlckV4cHJlc3Npb24A
UGFyYW1ldGVyRXhwcmVzc2lvbgBDb25zdGFudEV4cHJlc3Npb24AQmluYXJ5RXhwcmVzc2lvbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUnVudGltZS5T
ZXJpYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAE5hbWVWYWx1ZUNvbGxlY3Rpb24ATWF0Y2hD
b2xsZWN0aW9uAFdlYkhlYWRlckNvbGxlY3Rpb24ASURiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9u
AEZvcm1hdEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3lzdGVtLlJ1bnRpbWUuU2VyaWFs
aXphdGlvbi5Kc29uAEZpeEpzb24AanNvbgBGaWVsZEluZm8ATWV0aG9kSW5mbwBDdWx0dXJlSW5m
bwBBbmRBbHNvAEdyb3VwAFN5c3RlbS5EYXRhLkxpbnEAU3lzdGVtLkxpbnEAQ2hhcgBTdHJlYW1S
ZWFkZXIAVGV4dFJlYWRlcgBJRm9ybWF0UHJvdmlkZXIARGJDb25uZWN0aW9uU3RyaW5nQnVpbGRl
cgBTcWxDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFBhcmFtZXRl
cgBEYXRhQ29udHJhY3RKc29uU2VyaWFsaXplcgBYbWxPYmplY3RTZXJpYWxpemVyAFJlc3BvbnNl
UHJvY2Vzc29yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBBZGRTZWNvbmRzAFByb2Nlc3NOZXdSZWNvcmRzAFN5c3RlbS5SdW50aW1lLkNv
bXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8yM2ZmODYzMDcxNTc0YjMyYjc3MTE3
NzBlMDUzNjZmYS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMA
bWVzc2FnZXMAU3VibWl0Q2hhbmdlcwBNYXRjaGVzAFNUXzIzZmY4NjMwNzE1NzRiMzJiNzcxMTc3
MGUwNTM2NmZhLlByb3BlcnRpZXMATnVtYmVyU3R5bGVzAEdldEJ5dGVzAFNldHRpbmdzAEdldFBh
cmFtcwBQb3N0UGFyYW1zAFJlZnJlc2hUb2tlbnMAU3lzdGVtLkxpbnEuRXhwcmVzc2lvbnMAU3lz
dGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAFN5c3RlbS5Db2xsZWN0aW9ucwBSZWdleE9wdGlv
bnMAZ2V0X0hlYWRlcnMAZ2V0X1N1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAENvbmNhdABS
ZWFkT2JqZWN0AFJvb3RPYmplY3QAU2VsZWN0AENvbm5lY3QAc2V0X0FsbG93QXV0b1JlZGlyZWN0
AFN5c3RlbS5OZXQAQlhfQ2xpZW50U2VjcmV0AEluc2VydE9uU3VibWl0AGdldF9EZWZhdWx0AHNl
dF9UYXNrUmVzdWx0AGdldF9yZXN1bHQAc2V0X3Jlc3VsdABDb25zdGFudABTeXN0ZW0uRGF0YS5T
cWxDbGllbnQAZ2V0X0N1cnJlbnQAQ291bnQAc2V0X0FjY2VwdABDb252ZXJ0AEh0dHBXZWJSZXF1
ZXN0AE1vdmVOZXh0AFN5c3RlbS5UZXh0AGdldF9uZXh0AHNldF9uZXh0AERhdGFDb250ZXh0AGdl
dF9Ob3cAUmVnZXgAZ2V0X0Fzc2VtYmx5AGdldF9RdWVyeQBvcF9FcXVhbGl0eQBIdHRwVXRpbGl0
eQBJc051bGxPckVtcHR5AFByb3BlcnR5AAAAAACArWgAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkA
eAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAvAG8AYQB1AHQAaAAvAGEAdQB0AGgAbwBy
AGkAegBlAC8APwBjAGwAaQBlAG4AdABfAGkAZAA9AGwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIA
MQA5ADkAZAAwAGUANwAuADcAMAA4ADAAMAA2ADcANwAAPWEAbgBkAHIAZQB5AGQAcgB1AHoAaABp
AG4AaQBuAEAAZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1AAANSgA0AGUAMwBZAHYAAAM6AAAb
QQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAADUIAYQBzAGkAYwAgAAAJUABPAFMAVAAAEUwAbwBj
AGEAdABpAG8AbgAAFVMAZQB0AC0AQwBvAG8AawBpAGUAAQlDAG8AZABlAAAZQwBvAGQAZQBOAG8A
dABGAG8AdQBuAGQAAIFnaAB0AHQAcABzADoALwAvAG8AYQB1AHQAaAAuAGIAaQB0AHIAaQB4AC4A
aQBuAGYAbwAvAG8AYQB1AHQAaAAvAHQAbwBrAGUAbgAvAD8AZwByAGEAbgB0AF8AdAB5AHAAZQA9
AGEAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AXwBjAG8AZABlACYAYwBsAGkAZQBuAHQAXwBpAGQA
PQBsAG8AYwBhAGwALgA1AGUAOAAyADUANQBiADEAOQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3
ADcAJgBjAGwAaQBlAG4AdABfAHMAZQBjAHIAZQB0AD0ANwAzADAAaAB2AFMAdgA1AHkAcgBnAG0A
VgB2ADAAZwBjAHcAawB4AFUAegAyAEEAVABhAEcARwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBT
AGsAZQBoAEsAYQBGAHoATQB6ACYAYwBvAGQAZQA9AAANQwBvAG8AawBpAGUAACtFAHIAcgBvAHIA
TABvAGcAbwBuAEIAaQB0AHIAaQB4AE8AQQB1AHQAaAAAgW9oAHQAdABwAHMAOgAvAC8AbwBhAHUA
dABoAC4AYgBpAHQAcgBpAHgALgBpAG4AZgBvAC8AbwBhAHUAdABoAC8AdABvAGsAZQBuAC8APwBn
AHIAYQBuAHQAXwB0AHkAcABlAD0AcgBlAGYAcgBlAHMAaABfAHQAbwBrAGUAbgAmAGMAbABpAGUA
bgB0AF8AaQBkAD0AbABvAGMAYQBsAC4ANQBlADgAMgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAw
ADgAMAAwADYANwA3ACYAYwBsAGkAZQBuAHQAXwBzAGUAYwByAGUAdAA9ADcAMwAwAGgAdgBTAHYA
NQB5AHIAZwBtAFYAdgAwAGcAYwB3AGsAeABVAHoAMgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBP
AFgATQBRAGoAUwBrAGUAaABLAGEARgB6AE0AegAmAHIAZQBmAHIAZQBzAGgAXwB0AG8AawBlAG4A
PQAAR2gAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAu
AHIAdQAvAHIAZQBzAHQALwAADT8AYQB1AHQAaAA9AAADJgAAIWEAcABwAGwAaQBjAGEAdABpAG8A
bgAvAGoAcwBvAG4AAENhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwB4AC0AdwB3AHcALQBmAG8AcgBt
AC0AdQByAGwAZQBuAGMAbwBkAGUAZAABIVwAXABbAFUAXQBbADAALQA5AEEALQBaAF0AewA0AH0A
AQtyAHUALQBSAFUAAX9bAFQAXQBbAEkAXQBbAFQAXQBbAEwAXQBbAEUAXQBbACIAXQBbADoAXQBb
ACIAXQAuACoAPwBbACIAXQBbACwAXQBbACIAXQBbAEEAXQBbAFUAXQBbAFQAXQBbAEgAXQBbAE8A
XQBbAFIAXQBbAF8AXQBbAEkAXQBbAEQAXQAAAyIAAAMnAAERVABJAFQATABFACcAOgAnAAERVABJ
AFQATABFACIAOgAiAAAZJwAsACcAQQBVAFQASABPAFIAXwBJAEQAARkiACwAIgBBAFUAVABIAE8A
UgBfAEkARAAAgIVbAEQAXQBbAEUAXQBbAFQAXQBbAEEAXQBbAEkAXQBbAEwAXQBbAF8AXQBbAFQA
XQBbAEUAXQBbAFgAXQBbAFQAXQBbACIAXQBbADoAXQBbACIAXQAuACoAPwBbACIAXQBbACwAXQBb
ACIAXQBbAEQAXQBbAEEAXQBbAFQAXQBbAEUAXQAAHUQARQBUAEEASQBMAF8AVABFAFgAVAAnADoA
JwABHUQARQBUAEEASQBMAF8AVABFAFgAVAAiADoAIgAADycALAAnAEQAQQBUAEUAAQ8iACwAIgBE
AEEAVABFAAAVMQAwAC4AMQAwAC4AMAAuADIAOAAAD3AAaABwAHUAcwBlAHIAABFnAG4AUQBDAFUA
RQBsAFUAABdbAEQAXQBbADAALQA5AF0AewA2AH0AAQNtAABpaAB0AHQAcABzADoALwAvAGIAaQB0
AHIAaQB4AC4AZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1AC8AYwBvAG0AcABhAG4AeQAvAHAA
ZQByAHMAbwBuAGEAbAAvAHUAcwBlAHIALwAADS8AYgBsAG8AZwAvAAADLwAAIWwAbwBnAC4AYgBs
AG8AZwBwAG8AcwB0AC4AZwBlAHQAADdMAE8ARwBfAFIASQBHAEgAVABTAFsAMABdAD0AUwBHADMA
MwAwACYAcwB0AGEAcgB0AD0AMAAAAQBxUwBUAF8AMgAzAGYAZgA4ADYAMwAwADcAMQA1ADcANABi
ADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAb4rBl/QXmkyCIszptzNxpQAEIAEBCAMgAAEFIAEBEREE
IAEBDgYgAQERgJkKBwYODg4SPRJBDgYAARKApQ4FAAASgK0GAAMODg4OBSABHQUOBQABDh0FBSAA
EoC5BQACDg4OBSACAQ4OBCABAQIFIAASgL0FIAARgMEEIAEODgMgAA4FAAESQQ4EAAECDgwHBRI9
EkUSKBJJETkIAAESgNERgNUGIAEBEoDRBCAAEkkFIAEcEkkEAAAROQQAAQ0OBSABETkNAwcBDgMG
ETkHAAICETkROQYHAw4dBQ4HAAQODg4ODgQgAQEKByADAR0FCAgFIAEBEkkRBwkSYQ4SZRJpCAMS
bRJpEmkHIAIBDhGA6QYgARKA7Q4CBg4EIAASZQMgABwEIAEOCAsABAIOEYD5EmEQCAUgAg4ODgMg
AAIdBwwScRUSdQESEBJFEnkSGB0SDAgSLBJpCBJ9EhAGIAEBEoENCTABABUSdQEeAAQKARIQBSAB
AR0FBSABEmkOCAACEn0SgNEOCAABEoEVEYEZCwACEoEhEoEREoEdDwADEoElEoEREoEdHRKBEQkA
AhKBKRwSgNEIAAESgS0RgTELAAISgSESgRESgS0LAAISgTUSgRESgREQEAECFRKBPQEeABKBER0S
fQoKARUSgTkCEhACHhABAhUSgUUBHgAVEoFFAR4AFRKBPQEVEoE5Ah4AAgsKARUSgTkCEhASEB8Q
AgIVEoFFAR4BFRKBRQEeABUSgT0BFRKBOQIeAB4BBgoCEhASEAsQAQEIFRKBRQEeAAQAAQgOBQAB
Dh0OBhUSdQESEAUgAQETAAUgABKBTQUgABKBUQcgAgEOEoFRCLd6XFYZNOCJCImEXc2AgMyRCLA/
X38R1Qo6OmwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIAMQA5ADkAZAAwAGUANwAuADcAMAA4ADAA
MAA2ADcANwBkNwAzADAAaAB2AFMAdgA1AHkAcgBnAG0AVgB2ADAAZwBjAHcAawB4AFUAegAyAEEA
VABhAEcARwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBTAGsAZQBoAEsAYQBGAHoATQB6ADpoAHQA
dABwAHMAOgAvAC8AYgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBzAHAAbAB1AHMALgByAHUAMmgA
dAB0AHAAcwA6AC8ALwBvAGEAdQB0AGgALgBiAGkAdAByAGkAeAAuAGkAbgBmAG8ABAAAAAAEAQAA
AAIGCAQGHRIMBAYSgJEEBhKAlQMGEiQDBhIMAwYSMAMGETQGIAMODg4OAyAACAQAAQ4OBSAAHRIM
BiABAR0SDAUAABKAkQUAABKAlQYAAQESgJUEAAASJAMAAAEDKAAOAygACAUoAB0SDAUIABKAkQUI
ABKAlQQIABIkCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAA
ACgBACNTVF8yM2ZmODYzMDcxNTc0YjMyYjc3MTE3NzBlMDUzNjZmYQAABQEAAAAAFgEAEUNvcHly
aWdodCBAICAyMDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29y
a0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNScBAAEAVA4ETmFtZRthYmVycmF0aW9uLmRi
by5tZXNzYWdlc18zMzAlAQACAFQCDUlzRGJHZW5lcmF0ZWQBVAIMSXNQcmltYXJ5S2V5AQC0AAAA
zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBW
ZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYx
OTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBB
RFBBRFC0AAAAbFsAAAAAAAAAAAAAhlsAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHhbAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAA
AAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAAAAAA
GgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAPNH5hwA
AAEA80fmHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkA
bgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMAdABy
AGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMA
bwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMgAzAGYAZgA4ADYA
MwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAAAAPgAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMwA5ADgALgAxADgANAAxADkA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMgAzAGYAZgA4ADYAMwAw
ADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAyADMAZgBm
ADgANgAzADAANwAxADUANwA0AGIAMwAyAGIANwA3ADEAMQA3ADcAMABlADAANQAzADYANgBmAGEA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgAzAGYAZgA4
ADYAMwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAAAA
QgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADMAOQA4AC4AMQA4
ADQAMQA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADMAOQA4AC4AMQA4ADQAMQA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAJg7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--В данном разделе CDATA содержатся сведения о макете пакета. В данном разделе содержатся сведения о координатах (x,y), ширине и высоте.-->
<!--В случае возникновения ошибки при редактировании этого раздела вручную его можно удалить. -->
<!--Пакет можно загрузить обычным образом, но прежние сведения о макете будут утеряны, и конструктор автоматически перераспределит элементы в области конструктора.-->
<Objects
  Version="8">
  <!--Все приведенные ниже узлы будут содержать свойства, не влияющие на поведение среды выполнения.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="358,42"
          Id="Package\Загрузка и обновление базы сообщений об отклонениях"
          TopLeft="257,187" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>