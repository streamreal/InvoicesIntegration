<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/2/2020 6:06:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="ETP025"
  DTS:CreatorName="ELTRANSPLUS\andreydruzhinin"
  DTS:DTSID="{0E750AA6-B6ED-4B1A-A03C-C422BB6B8627}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1049"
  DTS:ObjectName="Package2"
  DTS:PackageType="5"
  DTS:VersionBuild="15"
  DTS:VersionGUID="{76FF720E-7EE6-4789-B590-C55D15BBF700}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Загрузка и обновление базы сообщений об отклонениях"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{6BF5FA1E-9395-4763-8F47-068F6F6DB22F}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка и обновление базы сообщений об отклонениях"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_23ff863071574b32b7711770e05366fa"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Settings.get_Default():ST_23ff863071574b32b7711770e05366fa.Properties.Sett" +
    "ings")]

namespace ST_23ff863071574b32b7711770e05366fa.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_23ff863071574b32b7711770e05366fa</msb:CodeName>
		<msb:DisplayName>ST_23ff863071574b32b7711770e05366fa</msb:DisplayName>
		<msb:ProjectId>{96CFAD18-7A59-4A23-A7E7-3693283CA20E}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_23ff863071574b32b7711770e05366fa.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="messages.cs"/>
		<msb:File Include="BitrixMessage.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="ResponseProcessor.cs"/>
		<msb:File Include="RootObject.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="ST_23ff863071574b32b7711770e05366fa.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8C1C04CF-7830-4F64-8533-13AA38EB04AB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_23ff863071574b32b7711770e05366fa</RootNamespace>
    <AssemblyName>ST_23ff863071574b32b7711770e05366fa</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="BitrixMessage.cs" />
    <Compile Include="messages.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ResponseProcessor.cs" />
    <Compile Include="RootObject.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_23ff863071574b32b7711770e05366fa")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_23ff863071574b32b7711770e05366fa")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="RootObject.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [DataContract]
    public class RootObject
    {
        [DataMember]
        public BitrixMessage[] result { get; set; }
        [DataMember]
        public string next { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;

namespace ST_23ff863071574b32b7711770e05366fa
{   
    class Bitrix24
    {
        //боевой
        private const string BX_ClientID = "local.5e8255b199d0e7.70800677";
        private const string BX_ClientSecret = "730hvSv5yrgmVv0gcwkxUz2ATaGGIx0fZmuOXMQjSkehKaFzMz";
        private const string BX_Portal = "https://bitrix.eltransplus.ru";

        //битест
        //private const string BX_ClientID = "local.5e834c45530933.17923150"; 
        //private const string BX_ClientSecret = "lBA05N9gi8dw3sVX4A7V7R7oSqY5EU0L779BZNi0TGutrIzVFh";
        //private const string BX_Portal = "https://bitest.eltransplus.ru"; 


        private const string BX_OAuthSite = "https://oauth.bitrix.info";
        private string AccessToken;
        private string RefreshToken;
        private DateTime RefreshTime;
        private string Code;
        private string Cookie;

        public Bitrix24()
        {
            Connect();
        }

        private void Connect()
        {
            //Создание HTTP подключения
            string BX_URI = BX_Portal + "/oauth/authorize/?client_id=" + BX_ClientID;
            HttpWebRequest requestLogonBitrix24 = (HttpWebRequest)WebRequest.Create(BX_URI);

            //Логин и пароль администратора, под которым будут выполняться запросы
            string username = "andreydruzhinin@eltransplus.ru";
            string password = "J4e3Yv";

            //Настройка запроса
            string svcCredentials = Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(username + ":" + password));
            requestLogonBitrix24.Headers.Add("Authorization", "Basic " + svcCredentials);
            requestLogonBitrix24.AllowAutoRedirect = false; //обязательное условие, чтобы не было автоматической переадресации на другую страницу (теряются пользовательские сведения об авторизации)
            requestLogonBitrix24.Method = "POST";            
 
            HttpWebResponse responseLogonBitrix24 = (HttpWebResponse)requestLogonBitrix24.GetResponse();

            //Проверяем что статус-код 302, должны предложить переадресацию, иначе авторизация не требуется, мы и так авторизированы
            if (responseLogonBitrix24.StatusCode == HttpStatusCode.Found)
            {
                //Получаем из заголовков ответа Куки и параметры адреса переадресации (из поля "Location"), параметр Code
                Uri locationURI = new Uri(responseLogonBitrix24.Headers["Location"]);

                //Получаем параметры из строки ответа (нужен System.Web)
                var locationParams = HttpUtility.ParseQueryString(locationURI.Query);
                Cookie = responseLogonBitrix24.Headers["Set-Cookie"];
                Code = locationParams["Code"];

                //Вызываем исключение, если Код мы не смогли получить, без него далее никак.
                if (String.IsNullOrEmpty(Code))
                {
                    throw new FormatException("CodeNotFound");
                }

                //Закрываем подключение
                responseLogonBitrix24.Close();

                //Если код успешно получили, то формируем новый HTTP запрос для получения Токенов авторизации
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=authorization_code" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "code=" + Code;
                SetToken(BX_OAuth_URI);
            }

        }

        //Закрытый метод для получения и записи Токенов авторизации
        private void SetToken(string BX_OAuth_URI)
        {
            //Формируем новый HTTP запрос для получения Токенов авторизации
            HttpWebRequest requestLogonBitrixOAuth = (HttpWebRequest)WebRequest.Create(BX_OAuth_URI);
            requestLogonBitrixOAuth.Method = "POST";
            requestLogonBitrixOAuth.Headers["Cookie"] = Cookie; //Используем Куки полученный в предыдущем запросе авторизации

            //Подключаемся (отправляем запрос)
            HttpWebResponse responseLogonBitrixOAuth = (HttpWebResponse)requestLogonBitrixOAuth.GetResponse();

            //Если в ответ получаем статус-код отличный от 200, то это ошибка, вызываем исключение
            if (responseLogonBitrixOAuth.StatusCode != HttpStatusCode.OK)
            {
                throw new FormatException("ErrorLogonBitrixOAuth");
            }
            else
            {
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(objLogonBitrixOAuth));
                objLogonBitrixOAuth objLogonBitrixOAuth;

                using (Stream st = responseLogonBitrixOAuth.GetResponseStream())
                {
                    objLogonBitrixOAuth = (objLogonBitrixOAuth)deserializer.ReadObject(st);
                }

                //Записывем Токены авторизации в поля
                AccessToken = objLogonBitrixOAuth.access_token;
                RefreshToken = objLogonBitrixOAuth.refresh_token;
                RefreshTime = DateTime.Now.AddSeconds(Convert.ToDouble(objLogonBitrixOAuth.expires_in)); //Добавляем к текущей дате количество секунд действия токена, обычно это плюс один час
            }
        }

        //Закрытый метод для обновления Токенов авторизации, если истекло время их действия
        private void RefreshTokens()
        {
            if (RefreshTime == DateTime.MinValue) // Если RefreshTime пустая
            {
                //Тогда вызываем авторизацию по полной программе
                Connect();
                return;
            }

            //Проверяем, если истекло время действия Токена авторизации, то обновляем его
            if (RefreshTime.AddSeconds(-5) < DateTime.Now)
            {
                //Формируем новый HTTP запрос для обновления Токена авторизации, здесь Code уже не нужен
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=refresh_token" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "refresh_token=" + RefreshToken;
                SetToken(BX_OAuth_URI);
            }
        }

        //Открытый метод для отправки REST-запросов в Битрикс24
        public string SendCommand(string Command, string GetParams = "", string PostParams = "")
        {
            //Проверяем и обновлем Токены авторизации
            RefreshTokens();

            //Проверяем возможное указание параметров
            string BX_REST_URI = BX_Portal + "/rest/" + Command + "?auth=" + AccessToken;
            
            if (String.IsNullOrEmpty(GetParams) == false)
            {
                BX_REST_URI = BX_REST_URI + "&" + GetParams;
            }        

            //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
            HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
            requestBitrixREST.Method = "POST";
            requestBitrixREST.Accept = "application/json";
            requestBitrixREST.Headers["Cookie"] = Cookie; //Используем Куки полученный в запросе авторизации

            //Готовим тело запроса и вставляем его в тело POST-запроса  
            byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);         
            requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
            requestBitrixREST.ContentLength = byteArrayBody.Length;

            Stream dataBodyStream = requestBitrixREST.GetRequestStream();
            dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
            dataBodyStream.Close();

            //Отправляем данные в Битрикс24
            HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

            //Читаем тело ответа от Битрикс24
            Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
            var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
            string stringBitrixREST = readerBitrixREST.ReadToEnd();

            //Закрываем все подключения и потоки
            readerBitrixREST.Close();
            dataStreamBitrixREST.Close();
            responseBitrixREST.Close();

            //Возвращаем строку ответа в формате JSON
            return stringBitrixREST;
        }

        [DataContract]
        public class objLogonBitrixOAuth
        {
            [DataMember]
            public string expires_in { get; set; }
            [DataMember]
            public string refresh_token { get; set; }
            [DataMember]
            public string access_token { get; set; }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_23ff863071574b32b7711770e05366fa.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_23ff863071574b32b7711770e05366fa.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_23ff863071574b32b7711770e05366fa.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_23ff863071574b32b7711770e05366fa
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            Bitrix24 bx_logon = new Bitrix24();

            //общая выгрузка сообщений заняла 26 минут
            //данные возвращаются по 50 сообщений начиная с самых последних
            //расчет на работу скрипта ежечасно. забирает последние 50 сообщений одним запросом и сопоставляет с базой            
            string jsonResponse = bx_logon.SendCommand("log.blogpost.get", "LOG_RIGHTS[0]=SG330&start=0");
            jsonResponse = ResponseProcessor.FixJson(jsonResponse);
            _ = ResponseProcessor.ProcessNewRecords(jsonResponse);
            
            /*
            int start = 0;         
            do
            {
                string jsonResponse = bx_logon.SendCommand("log.blogpost.get", "LOG_RIGHTS[0]=SG330&start=" + start.ToString());
                jsonResponse = ResponseProcessor.FixJson(jsonResponse);
                start = ResponseProcessor.ProcessNewRecords(jsonResponse);

            } while (start > 0);
            */

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="BitrixMessage.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [DataContract]
    public class BitrixMessage
    {
        [DataMember]
        public string ID { get; set; }
        [DataMember]
        public string BLOG_ID { get; set; }
        [DataMember]
        public string TITLE { get; set; }
        [DataMember]
        public string AUTHOR_ID { get; set; }
        [DataMember]
        public string DETAIL_TEXT { get; set; }
        [DataMember]
        public string DATE_PUBLISH { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ResponseProcessor.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;

namespace ST_23ff863071574b32b7711770e05366fa
{
    class ResponseProcessor
    {
        //метод переводит Unicode-символы из ответа в читаемый вид
        //исправляет лишние двойные кавычки в элементах TITLE и DETAIL_TEXT
        public static string FixJson(string jsonResponse)
        {
            Regex regex = new Regex(@"\\[U][0-9A-Z]{4}", RegexOptions.IgnoreCase);
            MatchCollection m = regex.Matches(jsonResponse);
            IFormatProvider prov = new CultureInfo("ru-RU");
            string temp = string.Empty;

            foreach (Match match in m)
            {
                if (int.TryParse(match.Value.Substring(2), NumberStyles.HexNumber, prov, out int output) == true)
                {
                    char c = (char)output;
                    jsonResponse = jsonResponse.Replace(match.Value, c.ToString());
                }
            }

            regex = new Regex("[T][I][T][L][E][\"][:][\"].*?[\"][,][\"][A][U][T][H][O][R][_][I][D]", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("TITLE':'", "TITLE\":\"");
                temp = temp.Replace("','AUTHOR_ID", "\",\"AUTHOR_ID");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("[D][E][T][A][I][L][_][T][E][X][T][\"][:][\"].*?[\"][,][\"][D][A][T][E]", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("DETAIL_TEXT':'", "DETAIL_TEXT\":\"");
                temp = temp.Replace("','DATE", "\",\"DATE");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            return jsonResponse;
        }

        //метод десериализует JSON, проверяет наличие записи в базе и добавляет новые записи
        //возвращаемое значение соответствует указателю для повторного запроса следующих записей или 0 если достигнут конец
        public static int ProcessNewRecords(string json)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            IDbConnection connection = new SqlConnection(connBuilder.ConnectionString);

            DataContext db = new DataContext(connection);
            Table<messages> msg = db.GetTable<messages>();

            DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(RootObject));

            using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                var result = (RootObject)deserializer.ReadObject(ms);

                foreach (var item in result.result)
                {
                    Regex reg = new Regex("[D][0-9]{6}");
                    Match match = reg.Match(item.TITLE + item.DETAIL_TEXT);
                    int count = msg.Where(m => m.bitrix_message_id.ToString() == item.ID && m.author_id.ToString() == item.AUTHOR_ID).Select(m => m).Count();

                    if (match.Success == true && count == 0)
                    {
                        msg.InsertOnSubmit(new messages
                        {
                            bitrix_message_id = Convert.ToInt32(item.ID),
                            date_publish = item.DATE_PUBLISH,
                            delivery_id = match.Value,
                            message = item.TITLE,
                            detail = item.DETAIL_TEXT,
                            message_url = @"https://bitrix.eltransplus.ru/company/personal/user/" + item.AUTHOR_ID + @"/blog/" + item.ID + @"/",
                            blog_id = Convert.ToInt32(item.BLOG_ID),
                            author_id = Convert.ToInt32(item.AUTHOR_ID)
                        });                      
                    }
                }

                db.SubmitChanges();

                if (String.IsNullOrWhiteSpace(result.next) == false)
                {
                    return Convert.ToInt32(result.next);
                }
                else
                {
                    return 0;
                }
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="messages.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Data.Linq.Mapping;
#endregion


namespace ST_23ff863071574b32b7711770e05366fa
{
    [Table(Name = "aberration.dbo.only_messages_330")]
    public class messages
    {
        [Column(IsDbGenerated = true, IsPrimaryKey = true)]
        public int id { get; set; }
        [Column]
        public int bitrix_message_id { get; set; }
        [Column]
        public string date_publish { get; set; }
        [Column]
        public string delivery_id { get; set; }
        [Column]
        public string message { get; set; }
        [Column]
        public string detail { get; set; }
        [Column]
        public string message_url { get; set; }
        [Column]
        public int blog_id { get; set; }
        [Column]
        public int author_id { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_23ff863071574b32b7711770e05366fa.dll">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
/Q0QAEEA/Q0QAEkA/Q0QAFEA/Q0QAFkA/Q0QAGEA/Q0QAJkA/Q0GAKEA/Q0GAKkA/Q0GALEA/Q0G
ALkA/Q0GAAEB/Q0GABkB/Q0GADkB/Q0VAGkA/Q0GAEkBmgYnAFkB9QAuAGEB0g80AFkBGA87AGkB
AAlBAEkBpA9HAGEB0g9NAIEAjQFTAFEB/g9ZAEkBaQQQAEkBdwZeAHkAuwRkAHkBpA9HAIEArQpq
AIkB/Q0QAIkBEBFvAJEBLQlzAGEBMhF5AJkB/Q0QAHkBgwYGAIEAtgpTAKEBmgWLAIkA/Q2UAHkB
fQqbALEB2Q+gANkAiQYGAHEA9RCmAGkBMQWrAHEAHQ6wAHEAtQi6AHEAGhG+AHEA3Aq+AGEB0g/N
AFEBoBAQAFkBUAAuAEkBwQUQAEkBcAnVAEkBjwqbAJEAwwbaAJEAgwYGALkB/Q3iAMEBUwRvAMEB
gwYGAMkB/Q36AMkB1A4CASkB/Q0QAGEBOhEJAdkB7w0MAckAjhARAeEBqwhvAGEBPgkVAekBkQYa
AfkBJAlvAGEBgQQmAckAwhAsAQEC/Q0GAAECrAQQAAECqAAQAAECdAQQAAkCDwlvABEC/Q0QAOEA
/Q1OAeEAEgVVAVkB2QQuAPEA/Q1kAckB/Q0QAMkBSAlqASECmA1wASkChgV5ASECQBGCAekBJAlv
ACECMAqOASECbxCeAVkCcwWoASECTQSxASEC7Am9ASEC9wy9ASECPgHJAYEC0QXlAYEC7w8QAoEC
mhA3ApECsA8sAWkBOABDAmEB0g9IAgwALxBVAuEAxg4GAGEBiQR5AAkBvA9bApkCShABAAkB/Q0G
AKEBAxFhAiEB/Q1nAkEB/Q0GAA4ABACKAg4ACADFAg4ADAAqAw4ADQAAAA4AEABlAw4AEQAAAAgA
kACYAwgAlACdAykAcwCdAy4ACwAcBC4AEwAlBC4AGwBEBC4AIwBNBC4AKwB2BC4AMwB2BC4AOwB2
BC4AQwBNBC4ASwB8BC4AUwB2BC4AWwCTBEkAcwCdA2MAYwCdA2kAcwCdA4MAewDdBIkAcwCdA6kA
cwCdA8AAawCdA8MAYwCdA8kAcwCdA+AAawCdA+MAiwCdA+kAgwAKBQABawCdAwMBkwCdAwkBgwCd
AyABawCdAykBgwCdA0ABawCdA0EBawCdA0MBYwCdA0kBgwCdA2ABawCdA2EBawCdA2MBawCdA2kB
gwCdA4ABawCdA4EBawCdA4MBawCdA4kBgwCdA6ABawCdA6EBawCdA6kBgwCdA8ABawCdA8EBawCd
A8kBgwCdA+ABawCdA+EBawCdA+kBgwCdAwACawCdAwECawCdAwkCcwCdAyACawCdAyECawCdAykC
cwCdA0ECawCdA0kCmwBEBGACawCdA2ECawCdA2kCmwBEBIACawCdA4ECawCdA6ACawCdA6ECawCd
A6kCcwCdA8ACawCdA8ECawCdA8kCcwCdA+ACawCdA+ECawCdA+kCcwCdAwADawCdAwEDawCdAyAD
awCdAyEDawCdA0ADawCdA0EDawCdA2ADawCdA4ADawCdA6ADawCdA6EDawCdA8ADawCdA8EDawCd
A+ADawCdA+EDawCdAwAEawCdAwEEawCdAyAEawCdA0AEawCdA2AEawCdA4AEawCdAyAFawCdA0AF
awCdA2AFawCdA4AFawCdA+AGawCdAwAHawCdAyAHawCdA0AHawCdA2AHawCdA4AHawCdAxwAfgC2
AMYA6AAwAQMAAQAEAAcABgAQAAgAEgAJABQACgAVAAAAvAD9AwAAdgD9AwAAzQD9AwAAkAD9AwAA
KgH9AwAA6AD9AwAAOwIBBAAAygEBBAAAYwn9AwAAMgL9AwAAAwX9AwAAKQr9AwAAcQr9AwAA7AEB
BAAABgIBBAAAaBAFBAAA5BD9AwAAiA0LBAAACwYRBAAAQhAXBAAAYwv9AwAAIAv9AwAAQwv9AwIA
BgADAAEABwADAAIACAAFAAEACQAFAAIACgAHAAEACwAHAAIADAAJAAEADQAJAAIADgALAAEADwAL
AAIAEAANAAEAEQANAAIAEwAPAAEAFAAPAAIAFQARAAEAFgARAAIAFwATAAEAGAATAAIAGQAVAAEA
GgAVAAIAGwAXAAEAHAAXAAIAHQAZAAEAHgAZAAIAHwAbAAEAIAAbAAIAIQAdAAEAIgAdAAIAIwAf
AAEAJAAfAAIAKQAhAAEAKgAhAAIAKwAjAAEALAAjAAIAMQAlAAIAMgAnAAEAMwAnAAIANAApAAIA
NwArAAEAOAArAAIAOQAtAAEAOgAtAAIAOwAvAAEAPAAvAE4CBIAAAAEAAAAOHahvAAAAAAAARQEA
AAQAAAAAAAAAAAAAAG8CgAEAAAAABAAAAAAAAAAAAAAAbwLECgAAAAAEAAAAAAAAAAAAAABvAgEM
AAAAAAQAAAAAAAAAAAAAAG8CBQ0AAAAABAAAAAAAAAAAAAAAbwLXBQAAAAANAAAAAAAAAAAAAAB4
ApoJAAAAAAQAAAAAAAAAAAAAAIECdQEAAAAABAAAAAAAAAAAAAAAbwJpAQAAAAAAAAAAAQAAAGsO
AAAKAAIACwAFAAwABQANAAcApwBfAcUA2gHHAF8BxQAEAskAMALLAF8BAAAAAAA8PmNfX0Rpc3Bs
YXlDbGFzczFfMABUYWJsZWAxAElRdWVyeWFibGVgMQBFeHByZXNzaW9uYDEAVG9JbnQzMgBGdW5j
YDIAQml0cml4MjQAZ2V0X1VURjgAPD45ADxNb2R1bGU+AGdldF9CTE9HX0lEAHNldF9CTE9HX0lE
AGdldF9BVVRIT1JfSUQAc2V0X0FVVEhPUl9JRABnZXRfSUQAc2V0X0lEAHNldF9Vc2VySUQAQlhf
Q2xpZW50SUQAZ2V0X1RJVExFAHNldF9USVRMRQBnZXRfREFURV9QVUJMSVNIAHNldF9EQVRFX1BV
QkxJU0gAZ2V0X0FTQ0lJAEJYX09BdXRoX1VSSQBTeXN0ZW0uSU8AZ2V0X0RFVEFJTF9URVhUAHNl
dF9ERVRBSUxfVEVYVAB2YWx1ZV9fAExhbWJkYQBTVF8yM2ZmODYzMDcxNTc0YjMyYjc3MTE3NzBl
MDUzNjZmYQBTeXN0ZW0uRGF0YQBTeXN0ZW0uV2ViAG1zY29ybGliADw+YwBBZGQAU3lzdGVtLkNv
bGxlY3Rpb25zLlNwZWNpYWxpemVkAGdldF9iaXRyaXhfbWVzc2FnZV9pZABzZXRfYml0cml4X21l
c3NhZ2VfaWQAZ2V0X2Jsb2dfaWQAc2V0X2Jsb2dfaWQAZ2V0X2F1dGhvcl9pZABzZXRfYXV0aG9y
X2lkAGdldF9pZABzZXRfaWQAZ2V0X2RlbGl2ZXJ5X2lkAHNldF9kZWxpdmVyeV9pZAA8SUQ+a19f
QmFja2luZ0ZpZWxkADxCTE9HX0lEPmtfX0JhY2tpbmdGaWVsZAA8QVVUSE9SX0lEPmtfX0JhY2tp
bmdGaWVsZAA8VElUTEU+a19fQmFja2luZ0ZpZWxkADxEQVRFX1BVQkxJU0g+a19fQmFja2luZ0Zp
ZWxkADxERVRBSUxfVEVYVD5rX19CYWNraW5nRmllbGQAPGlkPmtfX0JhY2tpbmdGaWVsZAA8Yml0
cml4X21lc3NhZ2VfaWQ+a19fQmFja2luZ0ZpZWxkADxibG9nX2lkPmtfX0JhY2tpbmdGaWVsZAA8
YXV0aG9yX2lkPmtfX0JhY2tpbmdGaWVsZAA8ZGVsaXZlcnlfaWQ+a19fQmFja2luZ0ZpZWxkADxt
ZXNzYWdlPmtfX0JhY2tpbmdGaWVsZAA8ZGF0ZV9wdWJsaXNoPmtfX0JhY2tpbmdGaWVsZAA8ZGV0
YWlsPmtfX0JhY2tpbmdGaWVsZAA8bWVzc2FnZV91cmw+a19fQmFja2luZ0ZpZWxkADxyZWZyZXNo
X3Rva2VuPmtfX0JhY2tpbmdGaWVsZAA8YWNjZXNzX3Rva2VuPmtfX0JhY2tpbmdGaWVsZAA8ZXhw
aXJlc19pbj5rX19CYWNraW5nRmllbGQAPHJlc3VsdD5rX19CYWNraW5nRmllbGQAPG5leHQ+a19f
QmFja2luZ0ZpZWxkAFJlYWRUb0VuZABTZW5kQ29tbWFuZABzZXRfTWV0aG9kAHNldF9QYXNzd29y
ZABSZXBsYWNlAElzTnVsbE9yV2hpdGVTcGFjZQBkZWZhdWx0SW5zdGFuY2UAc2V0X0RhdGFTb3Vy
Y2UAZ2V0X1N0YXR1c0NvZGUASHR0cFN0YXR1c0NvZGUAZ2V0X1VuaWNvZGUAQml0cml4TWVzc2Fn
ZQBnZXRfbWVzc2FnZQBzZXRfbWVzc2FnZQBDb29raWUAR2V0VGFibGUASURpc3Bvc2FibGUAUXVl
cnlhYmxlAFRvRG91YmxlAFJ1bnRpbWVGaWVsZEhhbmRsZQBSdW50aW1lTWV0aG9kSGFuZGxlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldEZpZWxkRnJvbUhhbmRsZQBHZXRNZXRob2RGcm9tSGFuZGxlAEdl
dFR5cGVGcm9tSGFuZGxlAERhdGVUaW1lAFJlZnJlc2hUaW1lAHNldF9Db250ZW50VHlwZQBXaGVy
ZQBTeXN0ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBDYXB0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxp
Y2F0aW9uU2V0dGluZ3NCYXNlAEh0dHBXZWJSZXNwb25zZQBqc29uUmVzcG9uc2UAR2V0UmVzcG9u
c2UAQ2xvc2UARGlzcG9zZQBUcnlQYXJzZQBDcmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQlhf
T0F1dGhTaXRlAFdyaXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUAVGFibGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JC
cm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFy
a0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQ29sdW1uQXR0cmlidXRlAEFzc2Vt
Ymx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAERh
dGFNZW1iZXJBdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBEYXRhQ29u
dHJhY3RBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAE1pblZh
bHVlAHZhbHVlAEVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3lzdGVtLkRhdGEu
TGlucS5NYXBwaW5nAFRvQmFzZTY0U3RyaW5nAGdldF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5n
AFBhcnNlUXVlcnlTdHJpbmcAU3Vic3RyaW5nAE1hdGNoAGdldF9kYXRlX3B1Ymxpc2gAc2V0X2Rh
dGVfcHVibGlzaABzZXRfQ29udGVudExlbmd0aABvYmpMb2dvbkJpdHJpeE9BdXRoAFVyaQBNaWNy
b3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3Mu
U2NyaXB0VGFzawBCWF9Qb3J0YWwARXF1YWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBv
bmVudE1vZGVsAGdldF9kZXRhaWwAc2V0X2RldGFpbABDYWxsAFNUXzIzZmY4NjMwNzE1NzRiMzJi
NzcxMTc3MGUwNTM2NmZhLmRsbABnZXRfbWVzc2FnZV91cmwAc2V0X21lc3NhZ2VfdXJsAEdldFJl
c3BvbnNlU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0ATWVtb3J5U3RyZWFtAGdldF9JdGVtAHNldF9J
dGVtAGl0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4Ab3BfTGVzc1RoYW4AUmVmcmVzaFRva2Vu
AEFjY2Vzc1Rva2VuAFNldFRva2VuAGdldF9yZWZyZXNoX3Rva2VuAHNldF9yZWZyZXNoX3Rva2Vu
AGdldF9hY2Nlc3NfdG9rZW4Ac2V0X2FjY2Vzc190b2tlbgBnZXRfZXhwaXJlc19pbgBzZXRfZXhw
aXJlc19pbgBTY3JpcHRNYWluAE1ldGhvZENhbGxFeHByZXNzaW9uAE1lbWJlckV4cHJlc3Npb24A
UGFyYW1ldGVyRXhwcmVzc2lvbgBDb25zdGFudEV4cHJlc3Npb24AQmluYXJ5RXhwcmVzc2lvbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUnVudGltZS5T
ZXJpYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAE5hbWVWYWx1ZUNvbGxlY3Rpb24ATWF0Y2hD
b2xsZWN0aW9uAFdlYkhlYWRlckNvbGxlY3Rpb24ASURiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9u
AEZvcm1hdEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3lzdGVtLlJ1bnRpbWUuU2VyaWFs
aXphdGlvbi5Kc29uAEZpeEpzb24AanNvbgBGaWVsZEluZm8ATWV0aG9kSW5mbwBDdWx0dXJlSW5m
bwBBbmRBbHNvAEdyb3VwAFN5c3RlbS5EYXRhLkxpbnEAU3lzdGVtLkxpbnEAQ2hhcgBTdHJlYW1S
ZWFkZXIAVGV4dFJlYWRlcgBJRm9ybWF0UHJvdmlkZXIARGJDb25uZWN0aW9uU3RyaW5nQnVpbGRl
cgBTcWxDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFBhcmFtZXRl
cgBEYXRhQ29udHJhY3RKc29uU2VyaWFsaXplcgBYbWxPYmplY3RTZXJpYWxpemVyAFJlc3BvbnNl
UHJvY2Vzc29yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBBZGRTZWNvbmRzAFByb2Nlc3NOZXdSZWNvcmRzAFN5c3RlbS5SdW50aW1lLkNv
bXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8yM2ZmODYzMDcxNTc0YjMyYjc3MTE3
NzBlMDUzNjZmYS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMA
bWVzc2FnZXMAU3VibWl0Q2hhbmdlcwBNYXRjaGVzAFNUXzIzZmY4NjMwNzE1NzRiMzJiNzcxMTc3
MGUwNTM2NmZhLlByb3BlcnRpZXMATnVtYmVyU3R5bGVzAEdldEJ5dGVzAFNldHRpbmdzAEdldFBh
cmFtcwBQb3N0UGFyYW1zAFJlZnJlc2hUb2tlbnMAU3lzdGVtLkxpbnEuRXhwcmVzc2lvbnMAU3lz
dGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAFN5c3RlbS5Db2xsZWN0aW9ucwBSZWdleE9wdGlv
bnMAZ2V0X0hlYWRlcnMAZ2V0X1N1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAENvbmNhdABS
ZWFkT2JqZWN0AFJvb3RPYmplY3QAU2VsZWN0AENvbm5lY3QAc2V0X0FsbG93QXV0b1JlZGlyZWN0
AFN5c3RlbS5OZXQAQlhfQ2xpZW50U2VjcmV0AEluc2VydE9uU3VibWl0AGdldF9EZWZhdWx0AHNl
dF9UYXNrUmVzdWx0AGdldF9yZXN1bHQAc2V0X3Jlc3VsdABDb25zdGFudABTeXN0ZW0uRGF0YS5T
cWxDbGllbnQAZ2V0X0N1cnJlbnQAQ291bnQAc2V0X0FjY2VwdABDb252ZXJ0AEh0dHBXZWJSZXF1
ZXN0AE1vdmVOZXh0AFN5c3RlbS5UZXh0AGdldF9uZXh0AHNldF9uZXh0AERhdGFDb250ZXh0AGdl
dF9Ob3cAUmVnZXgAZ2V0X0Fzc2VtYmx5AGdldF9RdWVyeQBvcF9FcXVhbGl0eQBIdHRwVXRpbGl0
eQBJc051bGxPckVtcHR5AFByb3BlcnR5AAAAAACArWgAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkA
eAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAvAG8AYQB1AHQAaAAvAGEAdQB0AGgAbwBy
AGkAegBlAC8APwBjAGwAaQBlAG4AdABfAGkAZAA9AGwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIA
MQA5ADkAZAAwAGUANwAuADcAMAA4ADAAMAA2ADcANwAAPWEAbgBkAHIAZQB5AGQAcgB1AHoAaABp
AG4AaQBuAEAAZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1AAANSgA0AGUAMwBZAHYAAAM6AAAb
QQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAADUIAYQBzAGkAYwAgAAAJUABPAFMAVAAAEUwAbwBj
AGEAdABpAG8AbgAAFVMAZQB0AC0AQwBvAG8AawBpAGUAAQlDAG8AZABlAAAZQwBvAGQAZQBOAG8A
dABGAG8AdQBuAGQAAIFnaAB0AHQAcABzADoALwAvAG8AYQB1AHQAaAAuAGIAaQB0AHIAaQB4AC4A
aQBuAGYAbwAvAG8AYQB1AHQAaAAvAHQAbwBrAGUAbgAvAD8AZwByAGEAbgB0AF8AdAB5AHAAZQA9
AGEAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AXwBjAG8AZABlACYAYwBsAGkAZQBuAHQAXwBpAGQA
PQBsAG8AYwBhAGwALgA1AGUAOAAyADUANQBiADEAOQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3
ADcAJgBjAGwAaQBlAG4AdABfAHMAZQBjAHIAZQB0AD0ANwAzADAAaAB2AFMAdgA1AHkAcgBnAG0A
VgB2ADAAZwBjAHcAawB4AFUAegAyAEEAVABhAEcARwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBT
AGsAZQBoAEsAYQBGAHoATQB6ACYAYwBvAGQAZQA9AAANQwBvAG8AawBpAGUAACtFAHIAcgBvAHIA
TABvAGcAbwBuAEIAaQB0AHIAaQB4AE8AQQB1AHQAaAAAgW9oAHQAdABwAHMAOgAvAC8AbwBhAHUA
dABoAC4AYgBpAHQAcgBpAHgALgBpAG4AZgBvAC8AbwBhAHUAdABoAC8AdABvAGsAZQBuAC8APwBn
AHIAYQBuAHQAXwB0AHkAcABlAD0AcgBlAGYAcgBlAHMAaABfAHQAbwBrAGUAbgAmAGMAbABpAGUA
bgB0AF8AaQBkAD0AbABvAGMAYQBsAC4ANQBlADgAMgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAw
ADgAMAAwADYANwA3ACYAYwBsAGkAZQBuAHQAXwBzAGUAYwByAGUAdAA9ADcAMwAwAGgAdgBTAHYA
NQB5AHIAZwBtAFYAdgAwAGcAYwB3AGsAeABVAHoAMgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBP
AFgATQBRAGoAUwBrAGUAaABLAGEARgB6AE0AegAmAHIAZQBmAHIAZQBzAGgAXwB0AG8AawBlAG4A
PQAAR2gAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAu
AHIAdQAvAHIAZQBzAHQALwAADT8AYQB1AHQAaAA9AAADJgAAIWEAcABwAGwAaQBjAGEAdABpAG8A
bgAvAGoAcwBvAG4AAENhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwB4AC0AdwB3AHcALQBmAG8AcgBt
AC0AdQByAGwAZQBuAGMAbwBkAGUAZAABIVwAXABbAFUAXQBbADAALQA5AEEALQBaAF0AewA0AH0A
AQtyAHUALQBSAFUAAX9bAFQAXQBbAEkAXQBbAFQAXQBbAEwAXQBbAEUAXQBbACIAXQBbADoAXQBb
ACIAXQAuACoAPwBbACIAXQBbACwAXQBbACIAXQBbAEEAXQBbAFUAXQBbAFQAXQBbAEgAXQBbAE8A
XQBbAFIAXQBbAF8AXQBbAEkAXQBbAEQAXQAAAyIAAAMnAAERVABJAFQATABFACcAOgAnAAERVABJ
AFQATABFACIAOgAiAAAZJwAsACcAQQBVAFQASABPAFIAXwBJAEQAARkiACwAIgBBAFUAVABIAE8A
UgBfAEkARAAAgIVbAEQAXQBbAEUAXQBbAFQAXQBbAEEAXQBbAEkAXQBbAEwAXQBbAF8AXQBbAFQA
XQBbAEUAXQBbAFgAXQBbAFQAXQBbACIAXQBbADoAXQBbACIAXQAuACoAPwBbACIAXQBbACwAXQBb
ACIAXQBbAEQAXQBbAEEAXQBbAFQAXQBbAEUAXQAAHUQARQBUAEEASQBMAF8AVABFAFgAVAAnADoA
JwABHUQARQBUAEEASQBMAF8AVABFAFgAVAAiADoAIgAADycALAAnAEQAQQBUAEUAAQ8iACwAIgBE
AEEAVABFAAAVMQAwAC4AMQAwAC4AMAAuADIAOAAAD3AAaABwAHUAcwBlAHIAABFnAG4AUQBDAFUA
RQBsAFUAABdbAEQAXQBbADAALQA5AF0AewA2AH0AAQNtAABpaAB0AHQAcABzADoALwAvAGIAaQB0
AHIAaQB4AC4AZQBsAHQAcgBhAG4AcwBwAGwAdQBzAC4AcgB1AC8AYwBvAG0AcABhAG4AeQAvAHAA
ZQByAHMAbwBuAGEAbAAvAHUAcwBlAHIALwAADS8AYgBsAG8AZwAvAAADLwAAIWwAbwBnAC4AYgBs
AG8AZwBwAG8AcwB0AC4AZwBlAHQAADdMAE8ARwBfAFIASQBHAEgAVABTAFsAMABdAD0AUwBHADMA
MwAwACYAcwB0AGEAcgB0AD0AMAAAAQBxUwBUAF8AMgAzAGYAZgA4ADYAMwAwADcAMQA1ADcANABi
ADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAVRTgReNltEqAiJUWwYFjtgAEIAEBCAMgAAEFIAEBEREE
IAEBDgYgAQERgJkKBwYODg4SPRJBDgYAARKApQ4FAAASgK0GAAMODg4OBSABHQUOBQABDh0FBSAA
EoC5BQACDg4OBSACAQ4OBCABAQIFIAASgL0FIAARgMEEIAEODgMgAA4FAAESQQ4EAAECDgwHBRI9
EkUSKBJJETkIAAESgNERgNUGIAEBEoDRBCAAEkkFIAEcEkkEAAAROQQAAQ0OBSABETkNAwcBDgMG
ETkHAAICETkROQYHAw4dBQ4HAAQODg4ODgQgAQEKByADAR0FCAgFIAEBEkkRBwkSYQ4SZRJpCAMS
bRJpEmkHIAIBDhGA6QYgARKA7Q4CBg4EIAASZQMgABwEIAEOCAsABAIOEYD5EmEQCAUgAg4ODgMg
AAIdBwwScRUSdQESEBJFEnkSGB0SDAgSLBJpCBJ9EhAGIAEBEoENCTABABUSdQEeAAQKARIQBSAB
AR0FBSABEmkOCAACEn0SgNEOCAABEoEVEYEZCwACEoEhEoEREoEdDwADEoElEoEREoEdHRKBEQkA
AhKBKRwSgNEIAAESgS0RgTELAAISgSESgRESgS0LAAISgTUSgRESgREQEAECFRKBPQEeABKBER0S
fQoKARUSgTkCEhACHhABAhUSgUUBHgAVEoFFAR4AFRKBPQEVEoE5Ah4AAgsKARUSgTkCEhASEB8Q
AgIVEoFFAR4BFRKBRQEeABUSgT0BFRKBOQIeAB4BBgoCEhASEAsQAQEIFRKBRQEeAAQAAQgOBQAB
Dh0OBhUSdQESEAUgAQETAAUgABKBTQUgABKBUQcgAgEOEoFRCLd6XFYZNOCJCImEXc2AgMyRCLA/
X38R1Qo6OmwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIAMQA5ADkAZAAwAGUANwAuADcAMAA4ADAA
MAA2ADcANwBkNwAzADAAaAB2AFMAdgA1AHkAcgBnAG0AVgB2ADAAZwBjAHcAawB4AFUAegAyAEEA
VABhAEcARwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBTAGsAZQBoAEsAYQBGAHoATQB6ADpoAHQA
dABwAHMAOgAvAC8AYgBpAHQAcgBpAHgALgBlAGwAdAByAGEAbgBzAHAAbAB1AHMALgByAHUAMmgA
dAB0AHAAcwA6AC8ALwBvAGEAdQB0AGgALgBiAGkAdAByAGkAeAAuAGkAbgBmAG8ABAAAAAAEAQAA
AAIGCAQGHRIMBAYSgJEEBhKAlQMGEiQDBhIMAwYSMAMGETQGIAMODg4OAyAACAQAAQ4OBSAAHRIM
BiABAR0SDAUAABKAkQUAABKAlQYAAQESgJUEAAASJAMAAAEDKAAOAygACAUoAB0SDAUIABKAkQUI
ABKAlQQIABIkCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAA
ACgBACNTVF8yM2ZmODYzMDcxNTc0YjMyYjc3MTE3NzBlMDUzNjZmYQAABQEAAAAAFgEAEUNvcHly
aWdodCBAICAyMDIwAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29y
a0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNSwBAAEAVA4ETmFtZSBhYmVycmF0aW9uLmRi
by5vbmx5X21lc3NhZ2VzXzMzMCUBAAIAVAINSXNEYkdlbmVyYXRlZAFUAgxJc1ByaW1hcnlLZXkB
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAAHBbAAAAAAAAAAAAAIpbAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8WwAA
AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAA
AAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAGgQAAAAAAAAAAAAA
GgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAKhvDh0A
AAEAqG8OHT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkA
bgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBHoDAAABAFMAdABy
AGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMA
bwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMgAzAGYAZgA4ADYA
MwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAAAAPgAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcANAAzADgALgAyADgANQA4ADQA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMgAzAGYAZgA4ADYAMwAw
ADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAyADAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAyADMAZgBm
ADgANgAzADAANwAxADUANwA0AGIAMwAyAGIANwA3ADEAMQA3ADcAMABlADAANQAzADYANgBmAGEA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgAzAGYAZgA4
ADYAMwAwADcAMQA1ADcANABiADMAMgBiADcANwAxADEANwA3ADAAZQAwADUAMwA2ADYAZgBhAAAA
QgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADQAMwA4AC4AMgA4
ADUAOAA0AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADQAMwA4AC4AMgA4ADUAOAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAADAAAAJw7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Загрузка реестра отклонений"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{88836BFD-0102-4B5A-9135-B181B7489314}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Загрузка реестра отклонений"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_7e5970296ac341b2bc0dd4c73f15a22b"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Settings.get_Default():ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Sett" +
    "ings")]

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_7e5970296ac341b2bc0dd4c73f15a22b</msb:CodeName>
		<msb:DisplayName>ST_7e5970296ac341b2bc0dd4c73f15a22b</msb:DisplayName>
		<msb:ProjectId>{A5FAE179-2FEB-48D9-BB0E-304F8115EC77}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7e5970296ac341b2bc0dd4c73f15a22b.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="messages.cs"/>
		<msb:File Include="BitrixMessage.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Bitrix24.cs"/>
		<msb:File Include="ResponseProcessor.cs"/>
		<msb:File Include="RootObject.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7e5970296ac341b2bc0dd4c73f15a22b")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7e5970296ac341b2bc0dd4c73f15a22b")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="RootObject.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Runtime.Serialization;
#endregion


namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    [DataContract]
    public class RootObject
    {
        [DataMember]
        public BitrixMessage[] result { get; set; }
        [DataMember]
        public string next { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Bitrix24.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Web;

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{   
    class Bitrix24
    {
        //боевой
        private const string BX_ClientID = "local.5e8255b199d0e7.70800677";
        private const string BX_ClientSecret = "730hvSv5yrgmVv0gcwkxUz2ATaGGIx0fZmuOXMQjSkehKaFzMz";
        private const string BX_Portal = "https://bitrix.eltransplus.ru";

        //битест
        //private const string BX_ClientID = "local.5e834c45530933.17923150"; 
        //private const string BX_ClientSecret = "lBA05N9gi8dw3sVX4A7V7R7oSqY5EU0L779BZNi0TGutrIzVFh";
        //private const string BX_Portal = "https://bitest.eltransplus.ru"; 


        private const string BX_OAuthSite = "https://oauth.bitrix.info";
        private string AccessToken;
        private string RefreshToken;
        private DateTime RefreshTime;
        private string Code;
        private string Cookie;

        public Bitrix24()
        {
            Connect();
        }

        private void Connect()
        {
            //Создание HTTP подключения
            string BX_URI = BX_Portal + "/oauth/authorize/?client_id=" + BX_ClientID;
            HttpWebRequest requestLogonBitrix24 = (HttpWebRequest)WebRequest.Create(BX_URI);

            //Логин и пароль администратора, под которым будут выполняться запросы
            string username = "andreydruzhinin@eltransplus.ru";
            string password = "J4e3Yv";

            //Настройка запроса
            string svcCredentials = Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(username + ":" + password));
            requestLogonBitrix24.Headers.Add("Authorization", "Basic " + svcCredentials);
            requestLogonBitrix24.AllowAutoRedirect = false; //обязательное условие, чтобы не было автоматической переадресации на другую страницу (теряются пользовательские сведения об авторизации)
            requestLogonBitrix24.Method = "POST";            
 
            HttpWebResponse responseLogonBitrix24 = (HttpWebResponse)requestLogonBitrix24.GetResponse();

            //Проверяем что статус-код 302, должны предложить переадресацию, иначе авторизация не требуется, мы и так авторизированы
            if (responseLogonBitrix24.StatusCode == HttpStatusCode.Found)
            {
                //Получаем из заголовков ответа Куки и параметры адреса переадресации (из поля "Location"), параметр Code
                Uri locationURI = new Uri(responseLogonBitrix24.Headers["Location"]);

                //Получаем параметры из строки ответа (нужен System.Web)
                var locationParams = HttpUtility.ParseQueryString(locationURI.Query);
                Cookie = responseLogonBitrix24.Headers["Set-Cookie"];
                Code = locationParams["Code"];

                //Вызываем исключение, если Код мы не смогли получить, без него далее никак.
                if (String.IsNullOrEmpty(Code))
                {
                    throw new FormatException("CodeNotFound");
                }

                //Закрываем подключение
                responseLogonBitrix24.Close();

                //Если код успешно получили, то формируем новый HTTP запрос для получения Токенов авторизации
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=authorization_code" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "code=" + Code;
                SetToken(BX_OAuth_URI);
            }

        }

        //Закрытый метод для получения и записи Токенов авторизации
        private void SetToken(string BX_OAuth_URI)
        {
            //Формируем новый HTTP запрос для получения Токенов авторизации
            HttpWebRequest requestLogonBitrixOAuth = (HttpWebRequest)WebRequest.Create(BX_OAuth_URI);
            requestLogonBitrixOAuth.Method = "POST";
            requestLogonBitrixOAuth.Headers["Cookie"] = Cookie; //Используем Куки полученный в предыдущем запросе авторизации

            //Подключаемся (отправляем запрос)
            HttpWebResponse responseLogonBitrixOAuth = (HttpWebResponse)requestLogonBitrixOAuth.GetResponse();

            //Если в ответ получаем статус-код отличный от 200, то это ошибка, вызываем исключение
            if (responseLogonBitrixOAuth.StatusCode != HttpStatusCode.OK)
            {
                throw new FormatException("ErrorLogonBitrixOAuth");
            }
            else
            {
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(objLogonBitrixOAuth));
                objLogonBitrixOAuth objLogonBitrixOAuth;

                using (Stream st = responseLogonBitrixOAuth.GetResponseStream())
                {
                    objLogonBitrixOAuth = (objLogonBitrixOAuth)deserializer.ReadObject(st);
                }

                //Записывем Токены авторизации в поля
                AccessToken = objLogonBitrixOAuth.access_token;
                RefreshToken = objLogonBitrixOAuth.refresh_token;
                RefreshTime = DateTime.Now.AddSeconds(Convert.ToDouble(objLogonBitrixOAuth.expires_in)); //Добавляем к текущей дате количество секунд действия токена, обычно это плюс один час
            }
        }

        //Закрытый метод для обновления Токенов авторизации, если истекло время их действия
        private void RefreshTokens()
        {
            if (RefreshTime == DateTime.MinValue) // Если RefreshTime пустая
            {
                //Тогда вызываем авторизацию по полной программе
                Connect();
                return;
            }

            //Проверяем, если истекло время действия Токена авторизации, то обновляем его
            if (RefreshTime.AddSeconds(-5) < DateTime.Now)
            {
                //Формируем новый HTTP запрос для обновления Токена авторизации, здесь Code уже не нужен
                string BX_OAuth_URI = BX_OAuthSite + "/oauth/token" + "/?" + "grant_type=refresh_token" + "&" +
                "client_id=" + BX_ClientID + "&" +
                "client_secret=" + BX_ClientSecret + "&" +
                "refresh_token=" + RefreshToken;
                SetToken(BX_OAuth_URI);
            }
        }

        //Открытый метод для отправки REST-запросов в Битрикс24
        public string SendCommand(string Command, string GetParams = "", string PostParams = "")
        {
            //Проверяем и обновлем Токены авторизации
            RefreshTokens();

            //Проверяем возможное указание параметров
            string BX_REST_URI = BX_Portal + "/rest/" + Command + "?auth=" + AccessToken;
            
            if (String.IsNullOrEmpty(GetParams) == false)
            {
                BX_REST_URI = BX_REST_URI + "&" + GetParams;
            }        

            //Создаем новое HTTP подключение для отправки REST-запроса в Битрикс24
            HttpWebRequest requestBitrixREST = (HttpWebRequest)WebRequest.Create(BX_REST_URI);
            requestBitrixREST.Method = "POST";
            requestBitrixREST.Accept = "application/json";
            requestBitrixREST.Headers["Cookie"] = Cookie; //Используем Куки полученный в запросе авторизации

            //Готовим тело запроса и вставляем его в тело POST-запроса  
            byte[] byteArrayBody = Encoding.UTF8.GetBytes(PostParams);         
            requestBitrixREST.ContentType = "application/x-www-form-urlencoded";
            requestBitrixREST.ContentLength = byteArrayBody.Length;

            Stream dataBodyStream = requestBitrixREST.GetRequestStream();
            dataBodyStream.Write(byteArrayBody, 0, byteArrayBody.Length);
            dataBodyStream.Close();

            //Отправляем данные в Битрикс24
            HttpWebResponse responseBitrixREST = (HttpWebResponse)requestBitrixREST.GetResponse();

            //Читаем тело ответа от Битрикс24
            Stream dataStreamBitrixREST = responseBitrixREST.GetResponseStream();
            var readerBitrixREST = new StreamReader(dataStreamBitrixREST);
            string stringBitrixREST = readerBitrixREST.ReadToEnd();

            //Закрываем все подключения и потоки
            readerBitrixREST.Close();
            dataStreamBitrixREST.Close();
            responseBitrixREST.Close();

            //Возвращаем строку ответа в формате JSON
            return stringBitrixREST;
        }

        [DataContract]
        public class objLogonBitrixOAuth
        {
            [DataMember]
            public string expires_in { get; set; }
            [DataMember]
            public string refresh_token { get; set; }
            [DataMember]
            public string access_token { get; set; }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7e5970296ac341b2bc0dd4c73f15a22b.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
#endregion

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            Bitrix24 bx_logon = new Bitrix24();

            string jsonResponse = bx_logon.SendCommand("lists.element.get", "",
                                              "IBLOCK_TYPE_ID=lists_socnet" +
                                              "&SOCNET_GROUP_ID=330" +
                                              "&IBLOCK_ID=184" +
                                              "&ELEMENT_ORDER[ID]=DESC"
                                              );

            jsonResponse = ResponseProcessor.FixJson(jsonResponse);
            _ = ResponseProcessor.ProcessNewRecords(jsonResponse);

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="BitrixMessage.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Collections.Generic;
using System.Runtime.Serialization;
#endregion

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    [DataContract]
    public class BitrixMessage
    {
        [DataMember]
        public string ID { get; set; }
        [DataMember]
        public string NAME { get; set; }
        [DataMember]
        public string DATE_CREATE { get; set; }
        [DataMember] 
        public string DETAIL_TEXT { get; set; }
        [DataMember]
        public string CREATED_USER_NAME { get; set; }
        [DataMember]
        public Dictionary<string, string> PROPERTY_1292 { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ResponseProcessor.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.Linq;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Text.RegularExpressions;

namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    public static class ResponseProcessor
    {
        //метод переводит Unicode-символы из ответа в читаемый вид
        //исправляет лишние двойные кавычки в элементах
        public static string FixJson(string jsonResponse)
        {
            Regex regex = new Regex(@"\\[U][0-9A-Z]{4}", RegexOptions.IgnoreCase);
            MatchCollection m = regex.Matches(jsonResponse);
            IFormatProvider prov = new CultureInfo("ru-RU");
            string temp = string.Empty;

            foreach (Match match in m)
            {
                if (int.TryParse(match.Value.Substring(2), NumberStyles.HexNumber, prov, out int output) == true)
                {
                    char c = (char)output;
                    jsonResponse = jsonResponse.Replace(match.Value, c.ToString());
                }
            }

            regex = new Regex("{\"TYPE\":\"HTML\",\"TEXT\":\".*?\"}", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);           

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");

                
                temp = temp.Replace("{'TYPE':'HTML','TEXT':'", "{\"TYPE\":\"HTML\",\"TEXT\":\"");
                temp = temp.Replace("'}", "\"}");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("\"PREVIEW_TEXT\":\".*?\",\"TIMESTAMP", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("'PREVIEW_TEXT':'", "\"PREVIEW_TEXT\":\"");
                temp = temp.Replace("','TIMESTAMP", "\",\"TIMESTAMP");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("\"DETAIL_TEXT\":\".*?\",\"PREVIEW", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("'DETAIL_TEXT':'", "\"DETAIL_TEXT\":\"");
                temp = temp.Replace("','PREVIEW", "\",\"PREVIEW");
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }

            regex = new Regex("\"PROPERTY_[0-9]{4}\":{\".*?\":\".*?\"}", RegexOptions.IgnoreCase);
            m = regex.Matches(jsonResponse);

            foreach (Match match in m)
            {
                temp = match.Value.Replace("\"", "'");
                temp = temp.Replace("'PROPERTY_", "\"PROPERTY_");
                temp = temp.Replace("':{'", "\":{\"");
                temp = temp.Replace("':'", "\":\"");
                temp = temp.Replace("'}", "\"}");
                temp = temp.Replace("','", "\",\""); 
                jsonResponse = jsonResponse.Replace(match.Value, temp);
            }
                
            return jsonResponse;
        }

        //метод десериализует JSON, проверяет наличие записи в базе и добавляет новые записи
        //возвращаемое значение соответствует указателю для повторного запроса следующих записей или 0 если достигнут конец
        public static int ProcessNewRecords(string json)
        {
            SqlConnectionStringBuilder connBuilder = new SqlConnectionStringBuilder
            {
                DataSource = "10.10.0.28",
                UserID = "phpuser",
                Password = "gnQCUElU"
            };

            IDbConnection connection = new SqlConnection(connBuilder.ConnectionString);

            DataContext db = new DataContext(connection);
            Table<messages> msg = db.GetTable<messages>();

            DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(RootObject), new DataContractJsonSerializerSettings
            {
                UseSimpleDictionaryFormat = true
            });

            using (MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                var result = (RootObject)deserializer.ReadObject(ms);

                foreach (var item in result.result)
                {
                    Regex reg = new Regex("[D][0-9]{6}");
                    MatchCollection match = reg.Matches(item.NAME);
                    int count = msg.Where(m => m.element_id.ToString() == item.ID).Select(m => m).Count();

                    if (match.Count > 0 && count == 0)
                    {
                        foreach (Match m in match)
                        {
                            msg.InsertOnSubmit(new messages
                            {
                                element_id = Convert.ToInt32(item.ID),
                                date_create = item.DATE_CREATE,
                                delivery_id = m.Value,
                                message = item.DETAIL_TEXT,
                                message_url = @"https://bitrix.eltransplus.ru/workgroups/group/330/lists/184/element/0/" + item.ID.ToString() + @"/?list_section_id=",
                                author = item.CREATED_USER_NAME,
                                task_url = @"https://bitrix.eltransplus.ru/workgroups/group/330/tasks/task/view/" + item.PROPERTY_1292.First().Value.ToString() + @"/"
                            });  
                        }                     
                    }
                }

                db.SubmitChanges();

                if (String.IsNullOrWhiteSpace(result.next) == false)
                {
                    return Convert.ToInt32(result.next);
                }
                else
                {
                    return 0;
                }
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="messages.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.Data.Linq.Mapping;
#endregion


namespace ST_7e5970296ac341b2bc0dd4c73f15a22b
{
    [Table(Name = "aberration.dbo.list_330")]
    public class messages
    {
        [Column(IsDbGenerated = true, IsPrimaryKey = true)]
        public int id { get; set; }
        [Column]
        public int element_id { get; set; }
        [Column]
        public string date_create { get; set; }
        [Column]
        public string delivery_id { get; set; }
        [Column]
        public string message { get; set; }      
        [Column]
        public string message_url { get; set; }       
        [Column]
        public string author { get; set; }
        [Column]
        public string task_url { get; set; }
    }    
}]]></ProjectItem>
          <ProjectItem
            Name="ST_7e5970296ac341b2bc0dd4c73f15a22b.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{5EE044C4-B069-4567-A8E1-A7785F3A9209}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7e5970296ac341b2bc0dd4c73f15a22b</RootNamespace>
    <AssemblyName>ST_7e5970296ac341b2bc0dd4c73f15a22b</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.Web" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Bitrix24.cs" />
    <Compile Include="BitrixMessage.cs" />
    <Compile Include="messages.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ResponseProcessor.cs" />
    <Compile Include="RootObject.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_7e5970296ac341b2bc0dd4c73f15a22b.dll">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
CQsAAAD6ATMAFgAAAQAAAFgAAAANAAAAJAAAAD0AAAAaAAAAdAAAAAgAAABiAAAABgAAAAYAAAAW
AAAAKgAAAAIAAAABAAAACAAAAAEAAAAEAAAABwAAAAAALQoBAAAAAAAGABgIVA4GAL0IVA4GAEAH
JA4PAMgOAAAGAG0HMAwGAOcHMAwGAMgHMAwGAKQIMAwGAE4IMAwGAGcIMAwGAIQHMAwGAJ8H/QgG
ADYQ1goGALwF1goKAGoGYhAKAEIM7gEOAKYNuQwGALgKTgEOADgIEwwGAPkGVA4OAAQIEwwGAIgA
zwESADEHFwkSALgHFwkGAEMN1goGAP0NuA8KAHgJmQ8GACsF1goSAEERCQ0SABYACQ0GALIKTgEK
AFYMmQ8WALELgQ8GAHkAzwEaAIIIxwkaADYGxwkGAN0K1goGABQHJA4GAIwNdA4GAP0M/gsKANEG
EgoKAFQHEgoKAFIG6QsKAAkRYhAKAAURYhAGAPQIIxEGAGcJ1goGAP0Q1goKAGYMYhAKAG4GYhAK
AM8EYhAKAKQJ1goeAH4RtwEGAJYM1goGANwF1goGAHEF1goOAMENEwwGACsNTgEGADgNTgEKAFUR
mQ8KAMsPmQ8KACMGmQ8GAEgA1goGACUP/gsGACYN1goiAG0NxhAiAFMNpgwiAIgMxhAiAHoMhwEO
ADsPuQwWAN4LgQ8GACsGMAwGAF0F1goGAPIMMAwWAKALgQ8WAIsLgQ8WAMULgQ8GAOgMMAwGAEoF
1goWANgLgQ8GAHIA1goWADkAgQ8WADcFGg0WACwAGg0WACAFGg0GAB4AzwEaAAAKxwkGAF8RMAwA
AAAAqwAAAAAAAQABAAAAEACVAJMBNQABAAEAAQAQAOoEkwE1AAoABgABABAA1w6TATUAEAATAIEB
EADrDZMBNQAYACQAAQAQADIQkwE1ABgAJgABABAAgAuTAZEAGgArAAAAEAB7DvYONQAaAC0AAAEQ
AFUP9g6tABwAMQACABAAkAkAADUAHQA0AAMBEAABAAAANQAgADsAAyEQAMsBAAA1ACEAPAADAQAA
9A8AAJUAIgA+AFGAzQANAVGAbRANAVGA8AkNAVGA5gYNAQEABwsNAQEA+goNAQEAxQW6AAEA2QQN
AQEAEAUNAQEAeAINAQEAjAINAQEAxQINAQEA4gINAQEAogINAQEAWQLbAwEA/wLjAwEAEwPjAwEA
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
DgAIAP4CDgAMAGMDDgANAAAADgAQAJ4DDgARAAAACACMANEDCACQANYDKQBzANYDLgALAHUELgAT
AH4ELgAbAJ0ELgAjAKYELgArAM8ELgAzAM8ELgA7AM8ELgBDAKYELgBLANUELgBTAM8ELgBbAOwE
SQBzANYDYwBjANYDaQBzANYDgwB7ADYFiQBzANYDqQBzANYDwABrANYDwwBjANYDyQBzANYD4ABr
ANYD4wCLANYD6QCDAFoFAAFrANYDAwGTANYDCQGDANYDIAFrANYDKQGDANYDQAFrANYDQQFrANYD
QwFjANYDSQGDANYDYAFrANYDYQFrANYDYwFrANYDaQGDANYDgAFrANYDgQFrANYDgwFrANYDiQGD
ANYDoAFrANYDoQFrANYDqQGDANYDwAFrANYDwQFrANYDyQGDANYD4AFrANYD4QFrANYD6QFzANYD
AAJrANYDAQJrANYDCQJzANYDIAJrANYDIQJrANYDKQKbAJ0EQQJrANYDSQKbAJ0EYAJrANYDYQJr
ANYDgAJrANYDgQJrANYDiQJzANYDoAJrANYDoQJrANYDqQJzANYDwAJrANYDwQJrANYDyQJzANYD
4AJrANYD4QJrANYDAANrANYDAQNrANYDIANrANYDIQNrANYDQANrANYDYANrANYDgANrANYDgQNr
ANYDoANrANYDoQNrANYDwANrANYDwQNrANYD4ANrANYD4QNrANYDAARrANYDIARrANYDQARrANYD
wARrANYD4ARrANYDAAVrANYDIAVrANYDgAZrANYDoAZrANYDwAZrANYD4AZrANYDAAdrANYDIAdr
ANYDHAB+ALYAxgDoADQBAwABAAQABwAGAA8ACAARAAkAEwAKABQAAADWAE0EAAASAU0EAAArAU0E
AABsAU0EAADzAE0EAABkAFEEAABWAloEAAAuAloEAADFBk0EAABNAk0EAAAIBU0EAABpCk0EAADk
DU0EAACGCk0EAAC2EF4EAAA8EU0EAACMDWQEAAAbBmoEAACQEHAEAAB1C00EAAAyC00EAABVC00E
AgAGAAMAAQAHAAMAAgAIAAUAAQAJAAUAAgAKAAcAAQALAAcAAgAMAAkAAQANAAkAAgAOAAsAAQAP
AAsAAgAQAA0AAQARAA0AAgATAA8AAQAUAA8AAgAVABEAAQAWABEAAgAXABMAAQAYABMAAgAZABUA
AQAaABUAAgAbABcAAQAcABcAAgAdABkAAQAeABkAAgAfABsAAQAgABsAAgAhAB0AAQAiAB0AAgAm
AB8AAQAnAB8AAgAoACEAAQApACEAAgAuACMAAgAvACUAAQAwACUAAgAxACcAAgA0ACkAAQA1ACkA
AgA2ACsAAQA3ACsAAgA4AC0AAQA5AC0AegKHAgSAAAABAAAAJR1odwAAAAAAAJMBAAAEAAAAAAAA
AAAAAACoAsIBAAAAAAQAAAAAAAAAAAAAAKgC1goAAAAABAAAAAAAAAAAAAAAqAITDAAAAAAEAAAA
AAAAAAAAAACoAgkNAAAAAAQAAAAAAAAAAAAAAKgC5wUAAAAADQAAAAAAAAAAAAAAsQKoCQAAAAAE
AAAAAAAAAAAAAAC6ArcBAAAAAAQAAAAAAAAAAAAAAKgChwEAAAAAAAAAAAEAAACFDgAACgACAAsA
BQAMAAUADQAHAKcAcAHHAPEByQBwAccAGwLLAEcCzQBwAdUAcAIAAAAAADw+Y19fRGlzcGxheUNs
YXNzMV8wAFRhYmxlYDEASUVudW1lcmFibGVgMQBJUXVlcnlhYmxlYDEARXhwcmVzc2lvbmAxAFRv
SW50MzIAZ2V0X1BST1BFUlRZXzEyOTIAc2V0X1BST1BFUlRZXzEyOTIARnVuY2AyAEtleVZhbHVl
UGFpcmAyAERpY3Rpb25hcnlgMgBCaXRyaXgyNABnZXRfVVRGOAA8PjkAPE1vZHVsZT4AZ2V0X0lE
AHNldF9JRABzZXRfVXNlcklEAEJYX0NsaWVudElEAGdldF9DUkVBVEVEX1VTRVJfTkFNRQBzZXRf
Q1JFQVRFRF9VU0VSX05BTUUAZ2V0X05BTUUAc2V0X05BTUUAZ2V0X0RBVEVfQ1JFQVRFAHNldF9E
QVRFX0NSRUFURQBnZXRfQVNDSUkAQlhfT0F1dGhfVVJJAFN5c3RlbS5JTwBnZXRfREVUQUlMX1RF
WFQAc2V0X0RFVEFJTF9URVhUAHZhbHVlX18ATGFtYmRhAFN5c3RlbS5EYXRhAFNUXzdlNTk3MDI5
NmFjMzQxYjJiYzBkZDRjNzNmMTVhMjJiAFN5c3RlbS5XZWIAbXNjb3JsaWIAPD5jAFN5c3RlbS5D
b2xsZWN0aW9ucy5HZW5lcmljAEFkZABTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQAZ2V0
X2lkAHNldF9pZABnZXRfZWxlbWVudF9pZABzZXRfZWxlbWVudF9pZABnZXRfZGVsaXZlcnlfaWQA
c2V0X2RlbGl2ZXJ5X2lkADxQUk9QRVJUWV8xMjkyPmtfX0JhY2tpbmdGaWVsZAA8SUQ+a19fQmFj
a2luZ0ZpZWxkADxOQU1FPmtfX0JhY2tpbmdGaWVsZAA8Q1JFQVRFRF9VU0VSX05BTUU+a19fQmFj
a2luZ0ZpZWxkADxEQVRFX0NSRUFURT5rX19CYWNraW5nRmllbGQAPERFVEFJTF9URVhUPmtfX0Jh
Y2tpbmdGaWVsZAA8aWQ+a19fQmFja2luZ0ZpZWxkADxlbGVtZW50X2lkPmtfX0JhY2tpbmdGaWVs
ZAA8ZGVsaXZlcnlfaWQ+a19fQmFja2luZ0ZpZWxkADxtZXNzYWdlPmtfX0JhY2tpbmdGaWVsZAA8
ZGF0ZV9jcmVhdGU+a19fQmFja2luZ0ZpZWxkADxtZXNzYWdlX3VybD5rX19CYWNraW5nRmllbGQA
PHRhc2tfdXJsPmtfX0JhY2tpbmdGaWVsZAA8cmVmcmVzaF90b2tlbj5rX19CYWNraW5nRmllbGQA
PGFjY2Vzc190b2tlbj5rX19CYWNraW5nRmllbGQAPGV4cGlyZXNfaW4+a19fQmFja2luZ0ZpZWxk
ADxhdXRob3I+a19fQmFja2luZ0ZpZWxkADxyZXN1bHQ+a19fQmFja2luZ0ZpZWxkADxuZXh0Pmtf
X0JhY2tpbmdGaWVsZABSZWFkVG9FbmQAU2VuZENvbW1hbmQAc2V0X01ldGhvZABzZXRfUGFzc3dv
cmQAUmVwbGFjZQBJc051bGxPcldoaXRlU3BhY2UAZGVmYXVsdEluc3RhbmNlAHNldF9EYXRhU291
cmNlAGdldF9TdGF0dXNDb2RlAEh0dHBTdGF0dXNDb2RlAGdldF9Vbmljb2RlAEJpdHJpeE1lc3Nh
Z2UAZ2V0X21lc3NhZ2UAc2V0X21lc3NhZ2UAQ29va2llAEdldFRhYmxlAEVudW1lcmFibGUASURp
c3Bvc2FibGUAUXVlcnlhYmxlAFRvRG91YmxlAFJ1bnRpbWVGaWVsZEhhbmRsZQBSdW50aW1lTWV0
aG9kSGFuZGxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldEZpZWxkRnJvbUhhbmRsZQBHZXRNZXRob2RG
cm9tSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAERhdGVUaW1lAFJlZnJlc2hUaW1lAHNldF9Db250
ZW50VHlwZQBXaGVyZQBTeXN0ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJl
AHJlc291cmNlQ3VsdHVyZQBDYXB0dXJlAE1ldGhvZEJhc2UAVlNUQVJUU2NyaXB0T2JqZWN0TW9k
ZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEh0dHBXZWJSZXNwb25zZQBqc29uUmVzcG9u
c2UAR2V0UmVzcG9uc2UAQ2xvc2UARGlzcG9zZQBUcnlQYXJzZQBDcmVhdGUAZ2V0X2RhdGVfY3Jl
YXRlAHNldF9kYXRlX2NyZWF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBCWF9PQXV0aFNpdGUAV3Jp
dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBUYWJsZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJp
YnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBDb2x1bW5BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0
aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUARGF0YU1lbWJlckF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAERhdGFDb250cmFjdEF0dHJpYnV0
ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJ
U1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBS
dW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUATWluVmFsdWUAdmFsdWUARW5j
b2RpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBTeXN0ZW0uRGF0YS5MaW5xLk1hcHBpbmcA
VG9CYXNlNjRTdHJpbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAVG9TdHJpbmcAUGFyc2VRdWVyeVN0
cmluZwBTdWJzdHJpbmcATWF0Y2gAc2V0X0NvbnRlbnRMZW5ndGgAb2JqTG9nb25CaXRyaXhPQXV0
aABVcmkATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlRhc2tzLlNjcmlwdFRhc2sAQlhfUG9ydGFsAEVxdWFsAFNjcmlwdE9iamVjdE1vZGVsAFN5
c3RlbS5Db21wb25lbnRNb2RlbABDYWxsAFNUXzdlNTk3MDI5NmFjMzQxYjJiYzBkZDRjNzNmMTVh
MjJiLmRsbABnZXRfbWVzc2FnZV91cmwAc2V0X21lc3NhZ2VfdXJsAGdldF90YXNrX3VybABzZXRf
dGFza191cmwAR2V0UmVzcG9uc2VTdHJlYW0AR2V0UmVxdWVzdFN0cmVhbQBNZW1vcnlTdHJlYW0A
Z2V0X0l0ZW0Ac2V0X0l0ZW0AaXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBvcF9MZXNzVGhh
bgBSZWZyZXNoVG9rZW4AQWNjZXNzVG9rZW4AU2V0VG9rZW4AZ2V0X3JlZnJlc2hfdG9rZW4Ac2V0
X3JlZnJlc2hfdG9rZW4AZ2V0X2FjY2Vzc190b2tlbgBzZXRfYWNjZXNzX3Rva2VuAGdldF9leHBp
cmVzX2luAHNldF9leHBpcmVzX2luAFNjcmlwdE1haW4ATWV0aG9kQ2FsbEV4cHJlc3Npb24ATWVt
YmVyRXhwcmVzc2lvbgBQYXJhbWV0ZXJFeHByZXNzaW9uAENvbnN0YW50RXhwcmVzc2lvbgBCaW5h
cnlFeHByZXNzaW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5
c3RlbS5SdW50aW1lLlNlcmlhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ATmFtZVZhbHVlQ29s
bGVjdGlvbgBNYXRjaENvbGxlY3Rpb24AV2ViSGVhZGVyQ29sbGVjdGlvbgBJRGJDb25uZWN0aW9u
AFNxbENvbm5lY3Rpb24ARm9ybWF0RXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBTeXN0ZW0u
UnVudGltZS5TZXJpYWxpemF0aW9uLkpzb24ARml4SnNvbgBqc29uAEZpZWxkSW5mbwBNZXRob2RJ
bmZvAEN1bHR1cmVJbmZvAFN5c3RlbS5EYXRhLkxpbnEAU3lzdGVtLkxpbnEAQ2hhcgBTdHJlYW1S
ZWFkZXIAVGV4dFJlYWRlcgBJRm9ybWF0UHJvdmlkZXIARGJDb25uZWN0aW9uU3RyaW5nQnVpbGRl
cgBTcWxDb25uZWN0aW9uU3RyaW5nQnVpbGRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFBhcmFtZXRl
cgBEYXRhQ29udHJhY3RKc29uU2VyaWFsaXplcgBYbWxPYmplY3RTZXJpYWxpemVyAGdldF9hdXRo
b3IAc2V0X2F1dGhvcgBSZXNwb25zZVByb2Nlc3NvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9y
AC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAQWRkU2Vjb25kcwBQcm9jZXNzTmV3UmVj
b3JkcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1Rf
N2U1OTcwMjk2YWMzNDFiMmJjMGRkNGM3M2YxNWEyMmIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVz
b3VyY2VzAERlYnVnZ2luZ01vZGVzAG1lc3NhZ2VzAFN1Ym1pdENoYW5nZXMATWF0Y2hlcwBTVF83
ZTU5NzAyOTZhYzM0MWIyYmMwZGQ0YzczZjE1YTIyYi5Qcm9wZXJ0aWVzAE51bWJlclN0eWxlcwBH
ZXRCeXRlcwBEYXRhQ29udHJhY3RKc29uU2VyaWFsaXplclNldHRpbmdzAEdldFBhcmFtcwBQb3N0
UGFyYW1zAFJlZnJlc2hUb2tlbnMAU3lzdGVtLkxpbnEuRXhwcmVzc2lvbnMAU3lzdGVtLlRleHQu
UmVndWxhckV4cHJlc3Npb25zAFN5c3RlbS5Db2xsZWN0aW9ucwBSZWdleE9wdGlvbnMAZ2V0X0hl
YWRlcnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAQ29uY2F0AHNldF9Vc2VTaW1wbGVE
aWN0aW9uYXJ5Rm9ybWF0AFJlYWRPYmplY3QAUm9vdE9iamVjdABTZWxlY3QAQ29ubmVjdABzZXRf
QWxsb3dBdXRvUmVkaXJlY3QAU3lzdGVtLk5ldABCWF9DbGllbnRTZWNyZXQASW5zZXJ0T25TdWJt
aXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAZ2V0X3Jlc3VsdABzZXRfcmVzdWx0AENvbnN0
YW50AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABnZXRfQ291bnQAc2V0X0FjY2Vw
dABDb252ZXJ0AEh0dHBXZWJSZXF1ZXN0AEZpcnN0AE1vdmVOZXh0AFN5c3RlbS5UZXh0AGdldF9u
ZXh0AHNldF9uZXh0AERhdGFDb250ZXh0AGdldF9Ob3cAUmVnZXgAZ2V0X0Fzc2VtYmx5AGdldF9R
dWVyeQBvcF9FcXVhbGl0eQBIdHRwVXRpbGl0eQBJc051bGxPckVtcHR5AFByb3BlcnR5AAAAAACA
rWgAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIA
dQAvAG8AYQB1AHQAaAAvAGEAdQB0AGgAbwByAGkAegBlAC8APwBjAGwAaQBlAG4AdABfAGkAZAA9
AGwAbwBjAGEAbAAuADUAZQA4ADIANQA1AGIAMQA5ADkAZAAwAGUANwAuADcAMAA4ADAAMAA2ADcA
NwAAPWEAbgBkAHIAZQB5AGQAcgB1AHoAaABpAG4AaQBuAEAAZQBsAHQAcgBhAG4AcwBwAGwAdQBz
AC4AcgB1AAANSgA0AGUAMwBZAHYAAAM6AAAbQQB1AHQAaABvAHIAaQB6AGEAdABpAG8AbgAADUIA
YQBzAGkAYwAgAAAJUABPAFMAVAAAEUwAbwBjAGEAdABpAG8AbgAAFVMAZQB0AC0AQwBvAG8AawBp
AGUAAQlDAG8AZABlAAAZQwBvAGQAZQBOAG8AdABGAG8AdQBuAGQAAIFnaAB0AHQAcABzADoALwAv
AG8AYQB1AHQAaAAuAGIAaQB0AHIAaQB4AC4AaQBuAGYAbwAvAG8AYQB1AHQAaAAvAHQAbwBrAGUA
bgAvAD8AZwByAGEAbgB0AF8AdAB5AHAAZQA9AGEAdQB0AGgAbwByAGkAegBhAHQAaQBvAG4AXwBj
AG8AZABlACYAYwBsAGkAZQBuAHQAXwBpAGQAPQBsAG8AYwBhAGwALgA1AGUAOAAyADUANQBiADEA
OQA5AGQAMABlADcALgA3ADAAOAAwADAANgA3ADcAJgBjAGwAaQBlAG4AdABfAHMAZQBjAHIAZQB0
AD0ANwAzADAAaAB2AFMAdgA1AHkAcgBnAG0AVgB2ADAAZwBjAHcAawB4AFUAegAyAEEAVABhAEcA
RwBJAHgAMABmAFoAbQB1AE8AWABNAFEAagBTAGsAZQBoAEsAYQBGAHoATQB6ACYAYwBvAGQAZQA9
AAANQwBvAG8AawBpAGUAACtFAHIAcgBvAHIATABvAGcAbwBuAEIAaQB0AHIAaQB4AE8AQQB1AHQA
aAAAgW9oAHQAdABwAHMAOgAvAC8AbwBhAHUAdABoAC4AYgBpAHQAcgBpAHgALgBpAG4AZgBvAC8A
bwBhAHUAdABoAC8AdABvAGsAZQBuAC8APwBnAHIAYQBuAHQAXwB0AHkAcABlAD0AcgBlAGYAcgBl
AHMAaABfAHQAbwBrAGUAbgAmAGMAbABpAGUAbgB0AF8AaQBkAD0AbABvAGMAYQBsAC4ANQBlADgA
MgA1ADUAYgAxADkAOQBkADAAZQA3AC4ANwAwADgAMAAwADYANwA3ACYAYwBsAGkAZQBuAHQAXwBz
AGUAYwByAGUAdAA9ADcAMwAwAGgAdgBTAHYANQB5AHIAZwBtAFYAdgAwAGcAYwB3AGsAeABVAHoA
MgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBPAFgATQBRAGoAUwBrAGUAaABLAGEARgB6AE0AegAm
AHIAZQBmAHIAZQBzAGgAXwB0AG8AawBlAG4APQAAR2gAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkA
eAAuAGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAvAHIAZQBzAHQALwAADT8AYQB1AHQAaAA9
AAADJgAAIWEAcABwAGwAaQBjAGEAdABpAG8AbgAvAGoAcwBvAG4AAENhAHAAcABsAGkAYwBhAHQA
aQBvAG4ALwB4AC0AdwB3AHcALQBmAG8AcgBtAC0AdQByAGwAZQBuAGMAbwBkAGUAZAABIVwAXABb
AFUAXQBbADAALQA5AEEALQBaAF0AewA0AH0AAQtyAHUALQBSAFUAATl7ACIAVABZAFAARQAiADoA
IgBIAFQATQBMACIALAAiAFQARQBYAFQAIgA6ACIALgAqAD8AIgB9AAADIgAAAycAAS97ACcAVABZ
AFAARQAnADoAJwBIAFQATQBMACcALAAnAFQARQBYAFQAJwA6ACcAAS97ACIAVABZAFAARQAiADoA
IgBIAFQATQBMACIALAAiAFQARQBYAFQAIgA6ACIAAAUnAH0AAQUiAH0AAD8iAFAAUgBFAFYASQBF
AFcAXwBUAEUAWABUACIAOgAiAC4AKgA/ACIALAAiAFQASQBNAEUAUwBUAEEATQBQAAAhJwBQAFIA
RQBWAEkARQBXAF8AVABFAFgAVAAnADoAJwABISIAUABSAEUAVgBJAEUAVwBfAFQARQBYAFQAIgA6
ACIAABknACwAJwBUAEkATQBFAFMAVABBAE0AUAABGSIALAAiAFQASQBNAEUAUwBUAEEATQBQAAA5
IgBEAEUAVABBAEkATABfAFQARQBYAFQAIgA6ACIALgAqAD8AIgAsACIAUABSAEUAVgBJAEUAVwAA
HycARABFAFQAQQBJAEwAXwBUAEUAWABUACcAOgAnAAEfIgBEAEUAVABBAEkATABfAFQARQBYAFQA
IgA6ACIAABUnACwAJwBQAFIARQBWAEkARQBXAAEVIgAsACIAUABSAEUAVgBJAEUAVwAAQyIAUABS
AE8AUABFAFIAVABZAF8AWwAwAC0AOQBdAHsANAB9ACIAOgB7ACIALgAqAD8AIgA6ACIALgAqAD8A
IgB9AAEVJwBQAFIATwBQAEUAUgBUAFkAXwABFSIAUABSAE8AUABFAFIAVABZAF8AAAknADoAewAn
AAEJIgA6AHsAIgAABycAOgAnAAEHIgA6ACIAAAcnACwAJwABByIALAAiAAAVMQAwAC4AMQAwAC4A
MAAuADIAOAAAD3AAaABwAHUAcwBlAHIAABFnAG4AUQBDAFUARQBsAFUAABdbAEQAXQBbADAALQA5
AF0AewA2AH0AAQNtAACAj2gAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkAeAAuAGUAbAB0AHIAYQBu
AHMAcABsAHUAcwAuAHIAdQAvAHcAbwByAGsAZwByAG8AdQBwAHMALwBnAHIAbwB1AHAALwAzADMA
MAAvAGwAaQBzAHQAcwAvADEAOAA0AC8AZQBsAGUAbQBlAG4AdAAvADAALwAAJS8APwBsAGkAcwB0
AF8AcwBlAGMAdABpAG8AbgBfAGkAZAA9AACAh2gAdAB0AHAAcwA6AC8ALwBiAGkAdAByAGkAeAAu
AGUAbAB0AHIAYQBuAHMAcABsAHUAcwAuAHIAdQAvAHcAbwByAGsAZwByAG8AdQBwAHMALwBnAHIA
bwB1AHAALwAzADMAMAAvAHQAYQBzAGsAcwAvAHQAYQBzAGsALwB2AGkAZQB3AC8AAAMvAAAjbABp
AHMAdABzAC4AZQBsAGUAbQBlAG4AdAAuAGcAZQB0AAABAICpSQBCAEwATwBDAEsAXwBUAFkAUABF
AF8ASQBEAD0AbABpAHMAdABzAF8AcwBvAGMAbgBlAHQAJgBTAE8AQwBOAEUAVABfAEcAUgBPAFUA
UABfAEkARAA9ADMAMwAwACYASQBCAEwATwBDAEsAXwBJAEQAPQAxADgANAAmAEUATABFAE0ARQBO
AFQAXwBPAFIARABFAFIAWwBJAEQAXQA9AEQARQBTAEMAAHFTAFQAXwA3AGUANQA5ADcAMAAyADkA
NgBhAGMAMwA0ADEAYgAyAGIAYwAwAGQAZAA0AGMANwAzAGYAMQA1AGEAMgAyAGIALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAAPK44Bf0+eNDs17J7n/foCcABCAB
AQgDIAABBSABARERBCABAQ4GIAEBEYClCgcGDg4OEj0SQQ4GAAESgLEOBQAAEoC5BgADDg4ODgUg
AR0FDgUAAQ4dBQUgABKAxQUAAg4ODgUgAgEODgQgAQECBSAAEoDJBSAAEYDNBCABDg4DIAAOBQAB
EkEOBAABAg4MBwUSPRJFEigSSRE5CAABEoDdEYDhBiABARKA3QQgABJJBSABHBJJBAAAETkEAAEN
DgUgARE5DQMHAQ4DBhE5BwACAhE5ETkGBwMOHQUOBwAEDg4ODg4EIAEBCgcgAwEdBQgIBSABARJJ
FQcLEmUOEmkSbQgDEnESbRJtEm0SbQcgAgEOEYD1BiABEoCBDgIGDgQgABJpAyAAHAQgAQ4ICwAE
Ag4RgQESZRAIBSACDg4OAyAAAioHDxJ1FRJ5ARIQEkUSfRIYHRIMCBIsEoCBCBKAhRJpEm0VEYCJ
Ag4OEnEGIAEBEoEVCTABABUSeQEeAAQKARIQCSACARKA3RKBGQUgAQEdBQkAAhKAhRKA3Q4IAAES
gSERgSULAAISgS0SgR0SgSkPAAMSgTESgR0SgSkdEoEdCQACEoE1HBKA3QgAARKBORGBPQsAAhKB
LRKBHRKBOQsAAhKBQRKBHRKBHREQAQIVEoFJAR4AEoEdHRKAhQoKARUSgUUCEhACHhABAhUSgVEB
HgAVEoFRAR4AFRKBSQEVEoFFAh4AAgsKARUSgUUCEhASEB8QAgIVEoFRAR4BFRKBUQEeABUSgUkB
FRKBRQIeAB4BBgoCEhASEAsQAQEIFRKBUQEeAAMgAAgEAAEIDgwQAQEeABUSgVkBHgAJCgEVEYCJ
Ag4OBxURgIkCDg4EIAATAQYVEnkBEhAFIAEBEwAFIAASgV0FIAASgWEHIAIBDhKBYQi3elxWGTTg
iQiJhF3NgIDMkQiwP19/EdUKOjpsAG8AYwBhAGwALgA1AGUAOAAyADUANQBiADEAOQA5AGQAMABl
ADcALgA3ADAAOAAwADAANgA3ADcAZDcAMwAwAGgAdgBTAHYANQB5AHIAZwBtAFYAdgAwAGcAYwB3
AGsAeABVAHoAMgBBAFQAYQBHAEcASQB4ADAAZgBaAG0AdQBPAFgATQBRAGoAUwBrAGUAaABLAGEA
RgB6AE0AegA6aAB0AHQAcABzADoALwAvAGIAaQB0AHIAaQB4AC4AZQBsAHQAcgBhAG4AcwBwAGwA
dQBzAC4AcgB1ADJoAHQAdABwAHMAOgAvAC8AbwBhAHUAdABoAC4AYgBpAHQAcgBpAHgALgBpAG4A
ZgBvAAQAAAAABAEAAAAHBhUSWQIODgIGCAQGHRIMBAYSgJ0EBhKAoQMGEiQDBhIMAwYSMAMGETQG
IAMODg4OCCAAFRJZAg4OCSABARUSWQIODgQAAQ4OBSAAHRIMBiABAR0SDAUAABKAnQUAABKAoQYA
AQESgKEEAAASJAMAAAEDKAAOCCgAFRJZAg4OAygACAUoAB0SDAUIABKAnQUIABKAoQQIABIkCAEA
CAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF83ZTU5
NzAyOTZhYzM0MWIyYmMwZGQ0YzczZjE1YTIyYgAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIw
AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1l
Ei5ORVQgRnJhbWV3b3JrIDQuNSMBAAEAVA4ETmFtZRdhYmVycmF0aW9uLmRiby5saXN0XzMzMCUB
AAIAVAINSXNEYkdlbmVyYXRlZAFUAgxJc1ByaW1hcnlLZXkBtAAAAM7K774BAAAAkQAAAGxTeXN0
ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJl
c291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAACRfAAAAAAAA
AAAAAD5fAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwXwAAAAAAAAAAAAAAAF9Db3JEbGxNYWlu
AG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAA
AAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoEAAAAAAAAAAAAABoE
NAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQBodyUdAAAB
AGh3JR0/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4A
ZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBp
AG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8A
bQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAk
AAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADcAZQA1ADkANwAwADIA
OQA2AGEAYwAzADQAMQBiADIAYgBjADAAZABkADQAYwA3ADMAZgAxADUAYQAyADIAYgAAAD4ADwAB
AEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADQANgAxAC4AMwAwADUANgA4AAAA
AABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADcAZQA1ADkANwAwADIAOQA2
AGEAYwAzADQAMQBiADIAYgBjADAAZABkADQAYwA3ADMAZgAxADUAYQAyADIAYgAuAGQAbABsAAAA
SAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABA
ACAAIAAyADAAMgAwAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAA
AAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8ANwBlADUAOQA3
ADAAMgA5ADYAYQBjADMANAAxAGIAMgBiAGMAMABkAGQANABjADcAMwBmADEANQBhADIAMgBiAC4A
ZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADcAZQA1ADkANwAw
ADIAOQA2AGEAYwAzADQAMQBiADIAYgBjADAAZABkADQAYwA3ADMAZgAxADUAYQAyADIAYgAAAEIA
DwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA0ADYAMQAuADMAMAA1
ADYAOAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwA0ADYAMQAuADMAMAA1ADYAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAwAAABQPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Объединение в общий источник"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{2E354A7C-820F-4C35-BEF7-BCAF6750DA48}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Объединение в общий источник"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{9FEB3277-5F6F-47B9-86DD-F48ABBDA0231}"
          SQLTask:SqlStatementSource="INSERT INTO [aberration].[dbo].[messages_330]&#xA;           ([bitrix_message_id]&#xA;           ,[date_publish]&#xA;           ,[delivery_id]&#xA;           ,[message]&#xA;           ,[detail]&#xA;           ,[blog_id]&#xA;           ,[author_id]&#xA;           ,[message_url])&#xA;&#x9; SELECT [bitrix_message_id]&#xA;&#x9;&#x9;  ,[date_publish]&#xA;&#x9;&#x9;  ,[delivery_id]&#xA;&#x9;&#x9;  ,[message]&#xA;&#x9;&#x9;  ,[detail]&#xA;&#x9;&#x9;  ,[blog_id]&#xA;&#x9;&#x9;  ,[author_id]&#xA;&#x9;&#x9;  ,[message_url]&#xA;&#x9;  FROM [aberration].[dbo].[only_messages_330] msg&#xA;&#x9;  WHERE author_id = 1716 &#xA;&#x9;  AND NOT EXISTS (&#xA;&#x9;  SELECT 0 FROM [aberration].[dbo].[messages_330] every&#xA;&#x9;  WHERE every.author_id = 1716 AND every.bitrix_message_id = msg.bitrix_message_id&#xA;&#x9;  )&#xA;GO&#xA;INSERT [aberration].[dbo].[messages_330]&#xA;           ([bitrix_message_id]&#xA;           ,[date_publish]&#xA;           ,[delivery_id]&#xA;           ,[message]&#xA;           ,[detail]&#xA;           ,[blog_id]&#xA;           ,[author_id]&#xA;           ,[message_url]&#xA;           ,[list_id]&#xA;&#x9;&#x9;   ,[task_url])     &#xA;&#x9; SELECT &#xA;&#x9;   [element_id] [bitrix_message_id]&#xA;      ,COALESCE([date_create], '') [date_publish]&#xA;&#x9;  ,[delivery_id]   &#xA;      ,COALESCE([message], 'описание отклонения не указано') [message]&#xA;      ,COALESCE([message], '') [detail]&#xA;&#x9;  ,0 [blog_id]&#xA;&#x9;  ,0 [author_id]&#xA;&#x9;  ,[message_url]&#xA;&#x9;  ,[element_id] [list_id]   &#xA;&#x9;  ,[task_url]&#xA;  FROM [aberration].[dbo].[list_330] l&#xA;  WHERE NOT EXISTS (SELECT 0 FROM [aberration].[dbo].[messages_330] m&#xA;  WHERE m.list_id = l.element_id)&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение]"
      DTS:CreationName=""
      DTS:DTSID="{86A3843D-E43D-4774-AE8D-BF4FC082EB85}"
      DTS:From="Package\Загрузка и обновление базы сообщений об отклонениях"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение"
      DTS:To="Package\Загрузка реестра отклонений" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Ограничение 1]"
      DTS:CreationName=""
      DTS:DTSID="{A5788B3E-B761-4092-BA1C-698EEF2E81B8}"
      DTS:From="Package\Загрузка реестра отклонений"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Ограничение 1"
      DTS:To="Package\Объединение в общий источник" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--В данном разделе CDATA содержатся сведения о макете пакета. В данном разделе содержатся сведения о координатах (x,y), ширине и высоте.-->
<!--В случае возникновения ошибки при редактировании этого раздела вручную его можно удалить. -->
<!--Пакет можно загрузить обычным образом, но прежние сведения о макете будут утеряны, и конструктор автоматически перераспределит элементы в области конструктора.-->
<Objects
  Version="8">
  <!--Все приведенные ниже узлы будут содержать свойства, не влияющие на поведение среды выполнения.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="358,42"
          Id="Package\Загрузка и обновление базы сообщений об отклонениях"
          TopLeft="257,187" />
        <NodeLayout
          Size="224,42"
          Id="Package\Загрузка реестра отклонений"
          TopLeft="325,264" />
        <NodeLayout
          Size="238,42"
          Id="Package\Объединение в общий источник"
          TopLeft="323,339" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение]"
          TopLeft="436.5,229">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35"
              Start="0,0"
              End="0,27.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Ограничение 1]"
          TopLeft="439.5,306">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33"
              Start="0,0"
              End="0,25.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>